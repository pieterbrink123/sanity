name: End-to-End Tests
permissions:
  contents: read # for checkout
on:
  # Build on pushes branches that have a PR (including drafts)
  pull_request:
  # Build on commits pushed to branches without a PR if it's in the allowlist
  push:
    branches: [next]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-hash: ${{ steps.hash.outputs.hash }}
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          run_install: false
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
          
      - name: Generate hash for cache key
        id: hash
        run: echo "hash=${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT
          
      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ env.cache-name }}-${{ steps.hash.outputs.hash }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-${{ env.cache-name }}-
            ${{ runner.os }}-pnpm-store-
            ${{ runner.os }}-
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Store Playwright's Version
        id: playwright-version
        run: |
          PLAYWRIGHT_VERSION=$(npx playwright --version | sed 's/Version //')
          echo "Playwright's Version: $PLAYWRIGHT_VERSION"
          echo "version=${PLAYWRIGHT_VERSION}" >> "$GITHUB_OUTPUT"
          
      - name: Cache Playwright Browsers
        id: cache-playwright-browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ steps.playwright-version.outputs.version }}-playwright-browsers
          
      - name: Install Playwright Browsers
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps
        
      - name: Cache project node_modules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ steps.hash.outputs.hash }}

  install:
    needs: [setup]
    timeout-minutes: 30
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    strategy:
      fail-fast: false
      matrix:
        # Be sure to update all instances in this file and `pr-cleanup.yml` if updated
        project: [chromium, firefox]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false
          
      - name: Restore node_modules
        uses: actions/cache/restore@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ needs.setup.outputs.cache-hash }}
          fail-on-cache-miss: true

      - name: Build CLI
        run: pnpm build:cli --output-logs=full --log-order=grouped
        env:
          NODE_OPTIONS: --max_old_space_size=8192

      - name: Build E2E test studio on next
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/next' }}
        env:
          SANITY_E2E_SESSION_TOKEN: ${{ secrets.SANITY_E2E_SESSION_TOKEN_NEW }}
          SANITY_E2E_PROJECT_ID: ${{ vars.SANITY_E2E_PROJECT_ID }}
          SANITY_E2E_DATASET: ${{ vars.SANITY_E2E_DATASET }}
        run: pnpm e2e:setup && pnpm e2e:build

      - name: Build E2E test studio on PR
        if: ${{ github.event_name == 'pull_request' }}
        env:
          SANITY_E2E_SESSION_TOKEN: ${{ secrets.SANITY_E2E_SESSION_TOKEN_NEW }}
          SANITY_E2E_PROJECT_ID: ${{ vars.SANITY_E2E_PROJECT_ID }}
          SANITY_E2E_DATASET: pr-${{ matrix.project }}-${{ github.event.number }}
        run: pnpm e2e:setup && pnpm e2e:build

      # Caches build from either PR or next
      - name: Cache build
        id: cache-e2e-build
        uses: actions/cache@v4
        env:
          cache-name: cache-e2e-build
        with:
          path: |
            ./*
            !**/node_modules/**
          # Unique key for a workflow run. Should be invalidated in the next run
          key: ${{ runner.os }}-${{ matrix.project }}-${{ env.cache-name }}-${{ github.run_id }}

  playwright-test:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs: [setup, install]
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
      NODE_OPTIONS: --max_old_space_size=8192
    strategy:
      fail-fast: false
      matrix:
        # Be sure to update all instances in this file and `pr-cleanup.yml` if updated
        project: [chromium, firefox]
        # Add more shards here if needed
        shardIndex: [1, 2, 3, 4]
        shardTotal: [4]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false
          
      - name: Restore node_modules
        uses: actions/cache/restore@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ needs.setup.outputs.cache-hash }}
          fail-on-cache-miss: true

      - name: Restore Playwright Browsers
        uses: actions/cache/restore@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ steps.playwright-version.outputs.version }}-playwright-browsers

      - name: Restore build cache
        uses: actions/cache/restore@v4
        id: restore-build
        env:
          cache-name: cache-e2e-build
        with:
          path: |
            ./*
            !**/node_modules/**
          key: ${{ runner.os }}-${{ matrix.project }}-${{ env.cache-name }}-${{ github.run_id }}
          fail-on-cache-miss: true

      - name: Run E2E tests on next
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/next' }}
        env:
          PWTEST_BLOB_REPORT_NAME: ${{ matrix.project }}
          SANITY_E2E_SESSION_TOKEN: ${{ secrets.SANITY_E2E_SESSION_TOKEN_NEW }}
          SANITY_E2E_PROJECT_ID: ${{ vars.SANITY_E2E_PROJECT_ID }}
          SANITY_E2E_DATASET: ${{ vars.SANITY_E2E_DATASET }}
        run: pnpm test:e2e --project ${{ matrix.project }} --shard ${{ matrix.shardIndex }}/${{ matrix.shardTotal }}

      - name: Run E2E tests on PR
        if: ${{ github.event_name == 'pull_request' }}
        env:
          PWTEST_BLOB_REPORT_NAME: ${{ matrix.project }}
          SANITY_E2E_SESSION_TOKEN: ${{ secrets.SANITY_E2E_SESSION_TOKEN_NEW }}
          SANITY_E2E_PROJECT_ID: ${{ vars.SANITY_E2E_PROJECT_ID }}
          SANITY_E2E_DATASET: pr-${{ matrix.project }}-${{ github.event.number }}
        run: pnpm test:e2e --project ${{ matrix.project }} --shard ${{ matrix.shardIndex }}/${{ matrix.shardTotal }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.project }}-${{ matrix.shardIndex }}
          path: blob-report
          retention-days: 30

  merge-reports:
    if: always()
    needs: [setup, playwright-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false
          
      - name: Restore node_modules
        uses: actions/cache/restore@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ needs.setup.outputs.cache-hash }}
          fail-on-cache-miss: true

      - name: Download blob reports from Github Actions Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: playwright-report-*
          merge-multiple: true
          path: playwright-report

      - name: Merge into HTML Report
        run: npx playwright merge-reports --reporter html ./playwright-report

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: full-html-report--attempt-${{ github.run_attempt }}
          path: playwright-report
          retention-days: 30

  cleanup:
    permissions:
      contents: read
      actions: write # needed to delete the cache
    timeout-minutes: 30
    name: Cleanup (${{ matrix.project }})
    runs-on: ubuntu-latest
    needs: [playwright-test]

    strategy:
      fail-fast: false
      matrix:
        # Be sure to update all instances in this file and `pr-cleanup.yml` if updated
        project: [chromium, firefox]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # Delete the cache so it is only used once
      - name: Delete Cache
        run: gh cache delete ${{ runner.os }}-${{ matrix.project }}-${{ env.cache-name }}-${{ github.run_id }}
        env:
          cache-name: cache-e2e-build
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
