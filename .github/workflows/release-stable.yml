name: Release Stable Tag

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Semantic version to tag as stable (e.g., 3.2.1 or v3.2.1)"
        required: true
        type: string
  # TEMPORARY: Push trigger for testing - REMOVE before merging to main
  push:
    branches:
      - feat/sapp-2742-stable-tag-release

jobs:
  tag-stable:
    runs-on: ubuntu-latest
    environment:
      name: npm-production
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      NPM_CONFIG_PROVENANCE: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version based on trigger
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # TEMPORARY: Use fixed version for push trigger - REMOVE before merging to main
            VERSION="3.88.0"
            echo "Using fixed version for push trigger: $VERSION"
          else
            # Use input version for workflow_dispatch
            VERSION="${{ inputs.version }}"
            echo "Using input version for manual trigger: $VERSION"
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Validate and normalise version
        run: |
          VERSION="$VERSION"

          if [[ ! "$VERSION" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must be in semver format with optional 'v' prefix (e.g., 3.2.1 or v3.2.1)"
            exit 1
          fi

          # Normalise to v-prefixed format
          [[ "$VERSION" =~ ^v ]] && NORMALISED_VERSION="$VERSION" || NORMALISED_VERSION="v$VERSION"
          echo "NORMALISED_VERSION=$NORMALISED_VERSION" >> $GITHUB_ENV

      - name: Validate git tag and release
        run: |
          TAG="$NORMALISED_VERSION"
          VERSION_NUMBER="${TAG#v}"
          echo "Validating git tag '$TAG' and corresponding release..."

          # 1. Check if git tag exists in repository
          if ! git tag -l | grep -q "^${TAG}$"; then
            echo "Error: Git tag '$TAG' does not exist in the repository"
            echo "Available tags:"
            git tag -l | sort -V | tail -10
            exit 1
          fi
          echo "âœ“ Git tag '$TAG' found in repository"

          # 2. Check if tag corresponds to a valid published release
          if ! npm view sanity@$VERSION_NUMBER version &>/dev/null; then
            echo "Error: No NPM package 'sanity' found with version '$VERSION_NUMBER'"
            echo "This suggests the tag '$TAG' does not correspond to a published release"
            exit 1
          fi
          echo "âœ“ NPM package 'sanity@$VERSION_NUMBER' exists (valid published release)"

          echo "All validations passed for tag '$TAG'"
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "VERSION_NUMBER=$VERSION_NUMBER" >> $GITHUB_ENV

      - name: Checkout specific git tag
        run: |
          TAG="$TAG"
          echo "Checking out git tag '$TAG'..."

          git checkout "$TAG"

          # Verify we're on the correct tag
          CURRENT_TAG=$(git describe --tags --exact-match HEAD 2>/dev/null || echo "none")
          if [[ "$CURRENT_TAG" != "$TAG" ]]; then
            echo "Error: Failed to checkout tag '$TAG'. Currently on: $CURRENT_TAG"
            exit 1
          fi

          echo "âœ“ Successfully checked out git tag '$TAG'"
          echo "âœ“ Current HEAD is at: $(git rev-parse --short HEAD)"

      - name: Read Lerna configuration from git tag
        run: |
          echo "Reading Lerna configuration from checked out git tag '$TAG'..."

          # Verify lerna.json exists
          if [[ ! -f "lerna.json" ]]; then
            echo "Error: lerna.json not found in git tag '$TAG'"
            exit 1
          fi

          # Parse Lerna configuration
          LERNA_PACKAGES=$(node -p "JSON.stringify(require('./lerna.json').packages)")
          LERNA_NPM_CLIENT=$(node -p "require('./lerna.json').npmClient || 'npm'")

          echo "âœ“ Lerna configuration loaded:"
          echo "  NPM Client: $LERNA_NPM_CLIENT"
          echo "  Package patterns: $LERNA_PACKAGES"

          # Export variables for subsequent steps
          echo "LERNA_PACKAGES=$LERNA_PACKAGES" >> $GITHUB_ENV
          echo "LERNA_NPM_CLIENT=$LERNA_NPM_CLIENT" >> $GITHUB_ENV

      - name: Discover core bundle packages from git tag
        run: |
          echo "Identifying core bundle packages from checked out git tag '$TAG'..."

          # Define the core packages that require bundle builds
          CORE_PACKAGES="sanity @sanity/vision"
          CORE_PACKAGE_PATHS="packages/sanity packages/@sanity/vision"

          echo "âœ“ Core bundle packages: $CORE_PACKAGES"
          echo "âœ“ Package paths: $CORE_PACKAGE_PATHS"

          # Export for subsequent steps
          echo "CORE_PACKAGES=$CORE_PACKAGES" >> $GITHUB_ENV
          echo "CORE_PACKAGE_PATHS=$CORE_PACKAGE_PATHS" >> $GITHUB_ENV

      - name: Setup Node.js and pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version: lts/*
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies from git tag
        run: |
          echo "Installing dependencies from checked out git tag '$TAG'..."

          # Install dependencies using pnpm (this repository always uses pnpm)
          pnpm install --frozen-lockfile

          echo "âœ“ Dependencies installed successfully from git tag '$TAG'"

      - name: Build all packages from git tag source
        run: |
          echo "Building all packages from checked out git tag '$TAG'..."

          # Build all packages using the standard build script with proper logging
          # This filters to all packages in ./packages/* and ./packages/@sanity/*
          pnpm build --output-logs=full --log-order=grouped

          echo "âœ“ All packages built successfully from git tag '$TAG'"

      - name: Pre-flight checks
        run: |
          echo "Running pre-flight checks for stable release..."

          # Check if NODE_AUTH_TOKEN is working
          npm whoami

          # Configure git (same as release.yml)
          # https://github.com/actions/checkout/pull/1184
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git config --global advice.skippedCherryPicks false

          echo "âœ“ NPM authentication verified successfully"
          echo "âœ“ Git configuration completed"

      - name: Show current dist-tags for debugging
        run: |
          echo "Showing current dist-tags for all packages (for debugging)..."

          # Get list of packages from Lerna
          PACKAGES=$(lerna list --all --json | jq -r '.[] | select(.private == false) | .name')

          echo "Current dist-tags for each package:"
          for package in $PACKAGES; do
            echo "ðŸ“¦ $package:"
            if npm view "$package" dist-tags --json 2>/dev/null | jq -r 'to_entries[] | "  \(.key): \(.value)"' 2>/dev/null; then
              true  # jq succeeded
            else
              echo "  (unable to fetch dist-tags for $package)"
            fi
            echo ""
          done

      - name: Add stable dist-tag to packages
        run: |
          echo "Adding 'stable' dist-tag to existing published packages from git tag '$TAG'..."

          # Get list of packages and their versions
          echo "Discovering packages to tag from Lerna configuration..."
          PACKAGE_VERSIONS=$(lerna list --all --json | jq -r '.[] | select(.private == false) | "\(.name)@\(.version)"')

          echo "Packages to tag:"
          echo "$PACKAGE_VERSIONS"

          echo "Adding stable dist-tag to all packages in batch..."

          # Use xargs to run npm dist-tag add in parallel for all packages
          echo "$PACKAGE_VERSIONS" | xargs -I {} -P 10 bash -c '
            package_version="{}"
            echo "Adding stable dist-tag to $package_version..."
            
            # Check if version exists in registry
            if npm view "$package_version" version &>/dev/null; then
              # Check if already has stable tag
              if npm view "$package_version" dist-tags.stable &>/dev/null; then
                echo "  âœ“ $package_version already has stable dist-tag"
              else
                npm dist-tag add "$package_version" stable
                echo "  âœ“ Added stable dist-tag to $package_version"
              fi
            else
              echo "  âœ— $package_version not found in registry"
            fi
          '

          echo "âœ“ Batch dist-tag operation completed"

      - name: Verify dist-tag addition results
        run: |
          echo "Verifying that all packages were successfully tagged with 'stable' dist-tag..."

          # Get list of package@version combinations
          PACKAGE_VERSIONS=$(lerna list --all --json | jq -r '.[] | select(.private == false) | "\(.name)@\(.version)"')

          echo "Verifying stable tags:"

          # Use xargs for batch verification
          FAILED=0
          echo "$PACKAGE_VERSIONS" | xargs -I {} bash -c '
            package_version="{}"
            if npm view "$package_version" dist-tags.stable &>/dev/null; then
              echo "âœ“ $package_version has stable dist-tag"
            else
              echo "âœ— $package_version missing stable dist-tag"
              exit 1
            fi
          ' || FAILED=1

          if [[ $FAILED -eq 1 ]]; then
            echo "âœ— Some packages failed verification"
            exit 1
          fi

          echo "âœ“ All packages successfully verified with stable dist-tag"

      - name: Show final dist-tags for debugging
        run: |
          echo "Showing final dist-tags for all packages (for debugging)..."

          # Get list of packages from Lerna
          PACKAGES=$(lerna list --all --json | jq -r '.[] | select(.private == false) | .name')

          echo "Final dist-tags for each package:"
          for package in $PACKAGES; do
            echo "ðŸ“¦ $package:"
            if npm view "$package" dist-tags --json 2>/dev/null | jq -r 'to_entries[] | "  \(.key): \(.value)"' 2>/dev/null; then
              true  # jq succeeded
            else
              echo "  (unable to fetch dist-tags for $package)"
            fi
            echo ""
          done
