name: Release Stable Tag

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Semantic version to tag as stable (e.g., 3.2.1 or v3.2.1)"
        required: true
        type: string
  # TEMPORARY: Push trigger for testing - REMOVE before merging to main
  push:
    branches:
      - feat/sapp-2742-stable-tag-release

jobs:
  tag-stable:
    runs-on: ubuntu-latest
    environment:
      name: npm-production
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      NPM_CONFIG_PROVENANCE: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version based on trigger
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # TEMPORARY: Use fixed version for push trigger - REMOVE before merging to main
            VERSION="3.22.3"
            echo "Using fixed version for push trigger: $VERSION"
          else
            # Use input version for workflow_dispatch
            VERSION="${{ inputs.version }}"
            echo "Using input version for manual trigger: $VERSION"
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Validate and normalise version
        run: |
          VERSION="$VERSION"

          if [[ ! "$VERSION" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must be in semver format with optional 'v' prefix (e.g., 3.2.1 or v3.2.1)"
            exit 1
          fi

          # Normalise to v-prefixed format
          [[ "$VERSION" =~ ^v ]] && NORMALISED_VERSION="$VERSION" || NORMALISED_VERSION="v$VERSION"
          echo "NORMALISED_VERSION=$NORMALISED_VERSION" >> $GITHUB_ENV

      - name: Validate git tag and release
        run: |
          TAG="$NORMALISED_VERSION"
          VERSION_NUMBER="${TAG#v}"
          echo "Validating git tag '$TAG'..."

          # Check if git tag exists in repository
          if ! git tag -l | grep -q "^${TAG}$"; then
            echo "Error: Git tag '$TAG' does not exist in the repository"
            exit 1
          fi
          echo "✓ Git tag '$TAG' found"

          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "VERSION_NUMBER=$VERSION_NUMBER" >> $GITHUB_ENV

      - name: Checkout specific git tag
        run: |
          echo "Checking out git tag '$TAG'..."
          git checkout "$TAG"
          echo "✓ Checked out git tag '$TAG'"

      - name: Read Lerna configuration from git tag
        run: |
          echo "Reading Lerna configuration from checked out git tag '$TAG'..."

          # Verify lerna.json exists
          if [[ ! -f "lerna.json" ]]; then
            echo "Error: lerna.json not found in git tag '$TAG'"
            exit 1
          fi

          echo "✓ Lerna configuration loaded"

      - name: Setup Node.js and pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version: lts/*
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies from git tag
        run: |
          echo "Installing dependencies from checked out git tag '$TAG'..."
          pnpm install --frozen-lockfile
          echo "✓ Dependencies installed successfully"

      - name: Build all packages from git tag source
        run: |
          echo "Building all packages from checked out git tag '$TAG'..."
          pnpm build --output-logs=full --log-order=grouped
          echo "✓ All packages built successfully"

      - name: Pre-flight checks
        run: |
          echo "Running pre-flight checks..."
          npm whoami
          echo "✓ NPM authentication verified"

      - name: Add stable dist-tag to packages
        run: |
          echo "Adding 'stable' dist-tag to packages from git tag '$TAG'..."

          # Get list of packages in package@version format
          PACKAGE_VERSIONS=$(lerna list --all --json | jq -r '.[] | select(.private == false) | "\(.name)@\(.version)"')

          echo "Packages to tag:"
          echo "$PACKAGE_VERSIONS"

          # Add stable dist-tag to each package
          while read -r package_version; do
            [[ -z "$package_version" ]] && continue
            
            echo "Adding stable dist-tag to $package_version..."
            
            if npm dist-tag add "$package_version" stable; then
              echo "  ✓ Success"
            else
              echo "  ✗ Failed"
              exit 1
            fi
          done <<< "$PACKAGE_VERSIONS"

          echo "✓ All packages tagged with stable dist-tag"

      - name: Verify stable dist-tags
        run: |
          echo "Verifying stable dist-tags were set correctly..."

          # Get list of package@version combinations
          PACKAGE_VERSIONS=$(lerna list --all --json | jq -r '.[] | select(.private == false) | "\(.name)@\(.version)"')

          FAILED=0
          while read -r package_version; do
            [[ -z "$package_version" ]] && continue
            
            package_name=$(echo "$package_version" | cut -d'@' -f1)
            expected_version=$(echo "$package_version" | cut -d'@' -f2)
            
            # Get the version that stable tag points to
            STABLE_VERSION=$(npm view "$package_name" dist-tags.stable 2>/dev/null || echo "")
            
            if [[ "$STABLE_VERSION" == "$expected_version" ]]; then
              echo "✓ $package_name stable tag points to $expected_version"
            else
              echo "✗ $package_name stable tag points to '$STABLE_VERSION', expected '$expected_version'"
              FAILED=1
            fi
          done <<< "$PACKAGE_VERSIONS"

          if [[ $FAILED -eq 1 ]]; then
            echo "Some packages failed verification"
            exit 1
          fi

          echo "✓ All packages verified with stable dist-tag"
