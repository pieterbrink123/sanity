name: End-to-End Tests with upcoming @sanity/ui changes
permissions:
  contents: read # for checkout
on:
  # Can only be called remotely
  workflow_call:
    secrets:
      TURBO_TOKEN:
      SANITY_E2E_SESSION_TOKEN_NEW:
        required: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - run: pnpm install
      - name: Patch increment version in package.json
        id: npm-version
        shell: bash
        run: |
          echo "NPM_VERSION=$(npm version --no-git-commit-hooks --no-git-tag-version patch)" >> $GITHUB_OUTPUT
      - name: Namespace version with build run id
        run: npm version --no-git-commit-hooks --no-git-tag-version "${{ steps.npm-version.outputs.NPM_VERSION }}-gh.${{ github.run_id }}"
      - run: pnpm pack --pack-destination ./artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: pack-sanity-ui
          path: artifacts
          if-no-files-found: error
          overwrite: true

  cache-cli:
    needs: [prepare]
    timeout-minutes: 30
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}

    steps:
      - uses: actions/checkout@v4
        with:
          repository: sanity-io/sanity
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          run_install: false

      - uses: actions/download-artifact@v4
        with:
          name: pack-sanity-ui
          path: artifacts
      - name: Install project dependencies
        run: pnpm install
      - run: pnpm add -w ./artifacts/sanity-ui-*.tgz

      - name: Build CLI
        run: pnpm build:cli --output-logs=full --log-order=grouped

  build:
    needs: [prepare, cache-cli]
    strategy:
      fail-fast: false
      matrix:
        project: [chromium, firefox]
    uses: ./.github/workflows/shared-build.yml
    with:
      project: ${{ matrix.project }}
      cache-name-prefix: cache-e2e-build
      e2e-setup-required: true
      build-command: echo "Using CLI build from cache-cli job"
    secrets:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
      SANITY_E2E_SESSION_TOKEN_NEW: ${{ secrets.SANITY_E2E_SESSION_TOKEN_NEW }}
      SANITY_E2E_PROJECT_ID: ${{ vars.SANITY_E2E_PROJECT_ID }}

  playwright-test:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs: [build]
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    strategy:
      fail-fast: false
      matrix:
        project: [chromium, firefox]
        shardIndex: [1, 2, 3, 4]
        shardTotal: [4]
    steps:
      - uses: actions/checkout@v4
        with:
          repository: sanity-io/sanity
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            v1-${{ runner.os }}-pnpm-store-${{ env.cache-name }}-
            v1-${{ runner.os }}-pnpm-store-
            v1-${{ runner.os }}-

      - uses: actions/download-artifact@v4
        with:
          name: pack-sanity-ui
          path: artifacts
      - name: Install project dependencies
        run: pnpm install

      - name: Store Playwright's Version
        id: playwright-version
        run: |
          PLAYWRIGHT_VERSION=$(npx playwright --version | sed 's/Version //')
          echo "Playwright's Version: $PLAYWRIGHT_VERSION"
          echo "version=${PLAYWRIGHT_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Cache Playwright Browsers for Playwright's Version
        id: cache-playwright-browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ steps.playwright-version.outputs.version }}-playwright-browsers

      - name: Install Playwright Browsers
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Restore build cache
        uses: actions/cache/restore@v4
        id: restore-build
        env:
          cache-name: cache-e2e-build
        with:
          path: |
            ./*
            !**/node_modules/**
          key: ${{ runner.os }}-${{ matrix.project }}-${{ env.cache-name }}-${{ github.run_id }}
          fail-on-cache-miss: true

      - name: Run E2E tests on PR
        env:
          PWTEST_BLOB_REPORT_NAME: ${{ matrix.project }}
          SANITY_E2E_SESSION_TOKEN: ${{ secrets.SANITY_E2E_SESSION_TOKEN_NEW }}
          SANITY_E2E_PROJECT_ID: ${{ vars.SANITY_E2E_PROJECT_ID }}
          SANITY_E2E_DATASET: pr-${{ matrix.project }}-${{ github.event.number }}
        run: pnpm test:e2e --project ${{ matrix.project }} --shard ${{ matrix.shardIndex }}/${{ matrix.shardTotal }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.project }}-${{ matrix.shardIndex }}
          path: blob-report
          retention-days: 30
  merge-reports:
    if: always()
    needs: [playwright-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: sanity-io/sanity
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            v1-${{ runner.os }}-pnpm-store-${{ env.cache-name }}-
            v1-${{ runner.os }}-pnpm-store-
            v1-${{ runner.os }}-

      - name: Install project dependencies
        run: pnpm install

      - name: Download blob reports from Github Actions Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: playwright-report-*
          merge-multiple: true
          path: playwright-report

      - name: Merge into HTML Report
        run: npx playwright merge-reports --reporter html ./playwright-report

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: full-html-report--attempt-${{ github.run_attempt }}
          path: playwright-report
          retention-days: 30

  cleanup:
    permissions:
      contents: read
      actions: write # needed to delete the cache
    timeout-minutes: 30
    name: Cleanup (${{ matrix.project }})
    runs-on: ubuntu-latest
    needs: [playwright-test]

    strategy:
      # we want to know if a test fails on a specific node version
      fail-fast: false
      matrix:
        # Be sure to update all instances in this file and `pr-cleanup.yml` if updated
        project: [chromium, firefox]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # Delete the cache so it is only used once
      - name: Delete Cache
        run: gh cache delete ${{ runner.os }}-${{ matrix.project }}-${{ env.cache-name }}-${{ github.run_id }}
        env:
          cache-name: cache-e2e-build
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
