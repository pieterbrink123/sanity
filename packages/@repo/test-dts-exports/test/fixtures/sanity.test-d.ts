// Auto-generated by running `pnpm generate:dts-exports`
import type {
  ActiveWorkspaceMatcher,
  AddonDatasetProvider,
  ArrayOfObjectOptionsInput,
  ArrayOfObjectsFunctions,
  ArrayOfObjectsInput,
  ArrayOfObjectsInputMember,
  ArrayOfObjectsInputMembers,
  ArrayOfObjectsItem,
  ArrayOfOptionsInput,
  ArrayOfPrimitiveOptionsInput,
  ArrayOfPrimitivesFunctions,
  ArrayOfPrimitivesItem,
  asLoadable,
  BetaBadge,
  BlockImagePreview,
  BlockPreview,
  BooleanInput,
  buildCommentRangeDecorations,
  buildLegacyTheme,
  buildRangeDecorationSelectionsFromComments,
  buildTextSelectionFromFragment,
  catchWithCount,
  ChangeBreadcrumb,
  ChangeConnectorRoot,
  ChangeIndicator,
  ChangeList,
  ChangeResolver,
  ChangesError,
  ChangeTitleSegment,
  checkoutPair,
  CircularProgress,
  collate,
  ColorSchemeCustomProvider,
  ColorSchemeLocalStorageProvider,
  ColorSchemeProvider,
  CommentDeleteDialog,
  CommentsAuthoringPathProvider,
  CompactPreview,
  _createAuthStore,
  createConfig,
  createConnectionStatusStore,
  createDefaultIcon,
  createDocumentPreviewStore,
  createDocumentStore,
  createDraftFrom,
  createGrantsStore,
  createHistoryStore,
  createHookFromObservableFactory,
  createKeyValueStore,
  createMockAuthStore,
  createPatchChannel,
  createPlugin,
  createPresenceStore,
  createProjectStore,
  createPublishedFrom,
  createSanityMediaLibraryFileSource,
  createSanityMediaLibraryImageSource,
  createSchema,
  createSourceFromConfig,
  createSWR,
  createUserColorManager,
  createUserStore,
  createWorkspaceFromConfig,
  CrossDatasetReferenceInput,
  DateInput,
  DateTimeInput,
  dec,
  decodePath,
  DefaultPreview,
  defaultTemplateForType,
  defaultTemplatesForSchema,
  defineConfig,
  defineDocumentFieldAction,
  defineDocumentInspector,
  defineLocale,
  defineLocaleResourceBundle,
  defineLocalesResources,
  definePlugin,
  defineSearchFilter,
  defineSearchFilterOperators,
  defineSearchOperator,
  DetailPreview,
  DiffFromTo,
  DiffInspectWrapper,
  diffMatchPatch,
  DiffString,
  DiffStringSegment,
  DiffTooltip,
  documentIdEquals,
  DocumentPreviewPresence,
  DocumentStatus,
  DocumentStatusIndicator,
  EditPortal,
  EmailInput,
  emitOperation,
  encodePath,
  ErrorMessage,
  EventsProvider,
  FieldChange,
  FieldPresence,
  FileInput,
  Filters,
  findIndex,
  formatRelativeLocalePublishDate,
  FormBuilder,
  FormFieldStatus,
  FormFieldValidationStatus,
  FormProvider,
  FormValueProvider,
  fromMutationPatches,
  FromToArrow,
  getAnnotationAtPath,
  getAnnotationColor,
  getCalendarLabels,
  getConfigContextFromSource,
  getDiffAtPath,
  getDocumentPairPermissions,
  getDocumentValuePermissions,
  getDocumentVariantType,
  getDraftId,
  getExpandOperations,
  getIdPair,
  getInitialValueStream,
  getItemKey,
  getItemKeySegment,
  getNamelessWorkspaceIdentifier,
  getPairListener,
  getPreviewPaths,
  getPreviewStateObservable,
  getPreviewValueWithFallback,
  getProviderTitle,
  getPublishedId,
  getReleaseIdFromReleaseDocumentId,
  getReleaseTone,
  getSanityCreateLinkMetadata,
  getSchemaTypeTitle,
  getTemplatePermissions,
  getValueAtPath,
  getValueError,
  getVersionFromId,
  getVersionId,
  getWorkspaceIdentifier,
  grantsPermissionOn,
  GroupChange,
  hasCommentMessageValue,
  Hotkeys,
  idMatchesPerspective,
  ImageInput,
  inc,
  InlinePreview,
  insert,
  InsufficientPermissionsMessage,
  IntentButton,
  isAddedItemDiff,
  isArray,
  isArrayOfBlocksInputProps,
  isArrayOfObjectsInputProps,
  isArrayOfPrimitivesInputProps,
  isAuthStore,
  isBooleanInputProps,
  isBuilder,
  isCookielessCompatibleLoginMethod,
  _isCustomDocumentTypeDefinition,
  isDraft,
  isDraftId,
  isDraftPerspective,
  isEmptyObject,
  isFieldChange,
  isGoingToUnpublish,
  isGroupChange,
  IsLastPaneProvider,
  isNewDocument,
  isNonNullable,
  isNumberInputProps,
  isObjectInputProps,
  isObjectItemProps,
  isPerspectiveRaw,
  isPerspectiveWriteable,
  isPublishedId,
  isPublishedPerspective,
  isRecord,
  isReleaseDocument,
  isReleaseScheduledOrScheduling,
  isRemovedItemDiff,
  isSanityCreateExcludedType,
  isSanityCreateLinked,
  isSanityCreateLinkedDocument,
  isSanityCreateStartCompatibleDoc,
  _isSanityDocumentTypeDefinition,
  isString,
  isStringInputProps,
  isSystemBundle,
  isSystemBundleName,
  isTextSelectionComment,
  isTruthy,
  isUnchangedDiff,
  isValidAnnouncementAudience,
  isValidAnnouncementRole,
  isVersionId,
  LegacyLayerProvider,
  LinearProgress,
  listenQuery,
  LoadingBlock,
  LocaleProvider,
  LocaleProviderBase,
  matchWorkspace,
  MediaPreview,
  MemberFieldError,
  MemberItemError,
  MetaInfo,
  newDraftFrom,
  NoChanges,
  noop,
  normalizeIndexSegment,
  normalizeIndexTupleSegment,
  normalizeKeySegment,
  normalizePathSegment,
  NumberInput,
  ObjectInputMembers,
  pathsAreEqual,
  pathToString,
  PerspectiveProvider,
  PopoverDialog,
  prefixPath,
  prepareConfig,
  prepareForPreview,
  prepareTemplates,
  PresenceOverlay,
  PresenceScope,
  Preview,
  PreviewLoader,
  ReferenceInput,
  ReferenceInputOptionsProvider,
  RelativeTime,
  ReleaseAvatar,
  removeDupes,
  removeUndefinedLocaleResources,
  renderStudio,
  Resizable,
  resolveConditionalProperty,
  resolveConfig,
  resolveDiffComponent,
  resolveInitialObjectValue,
  resolveInitialValue,
  resolveSchemaTypes,
  ResourceCacheProvider,
  SanityCreateConfigProvider,
  SearchDialog,
  SearchPopover,
  SearchProvider,
  SearchResultItemPreview,
  SelectInput,
  serializeError,
  set,
  setAtPath,
  setIfMissing,
  sliceString,
  SlugInput,
  SourceProvider,
  StringInput,
  stringToPath,
  Studio,
  StudioAnnouncementsCard,
  StudioAnnouncementsDialog,
  StudioLayout,
  StudioLayoutComponent,
  StudioLogo,
  StudioNavbar,
  StudioProvider,
  StudioToolMenu,
  TagsArrayInput,
  TelephoneInput,
  TemplatePreview,
  TextInput,
  toMutationPatches,
  Translate,
  truncateString,
  UniversalArrayInput,
  unset,
  unstable_useObserveDocument,
  unstable_useValuePreview,
  UpsellDescriptionSerializer,
  UrlInput,
  useActiveReleases,
  useActiveWorkspace,
  useAddonDataset,
  useAnnotationColor,
  useArchivedReleases,
  useChangeIndicatorsReportedValues,
  useClient,
  useColorScheme,
  useColorSchemeInternalValue,
  useColorSchemeOptions,
  useColorSchemeSetValue,
  useColorSchemeValue,
  useComlinkStore,
  useComments,
  useCommentsEnabled,
  useCommentsSelectedPath,
  useCommentsTelemetry,
  useConditionalToast,
  useConfigContextFromSource,
  useConnectionState,
  useConnectionStatusStore,
  useCopyErrorDetails,
  useCurrentLocale,
  useCurrentUser,
  useDataset,
  useDateTimeFormat,
  useDidUpdate,
  useDiffAnnotationColor,
  useDocumentChange,
  useDocumentForm,
  useDocumentOperation,
  useDocumentOperationEvent,
  useDocumentPairPermissions,
  useDocumentPresence,
  useDocumentPreviewStore,
  useDocumentStore,
  useDocumentType,
  useDocumentValuePermissions,
  useDocumentValues,
  useDocumentVersionInfo,
  useDocumentVersions,
  useEditState,
  useEvents,
  useEventsStore,
  useExcludedPerspective,
  useFeatureEnabled,
  useFieldActions,
  useFormattedDuration,
  useFormBuilder,
  useFormCallbacks,
  useFormState,
  useFormValue,
  useGetFormValue,
  useGetI18nText,
  useGlobalCopyPasteElementHandler,
  useGlobalPresence,
  useGrantsStore,
  useHistoryStore,
  useHoveredField,
  useI18nText,
  useInitialValue,
  useInitialValueResolverContext,
  useKeyValueStore,
  useListFormat,
  useLoadable,
  useLocale,
  useManageFavorite,
  useMiddlewareComponents,
  useNumberFormat,
  useOnScroll,
  usePerspective,
  usePresenceStore,
  usePreviewCard,
  useProject,
  useProjectDatasets,
  useProjectId,
  useProjectStore,
  UserAvatar,
  UserColorManagerProvider,
  useReferenceInputOptions,
  useReferringDocuments,
  useRelativeTime,
  useReleasesIds,
  useRenderingContextStore,
  useResolveInitialValueForType,
  useResourceCache,
  useReviewChanges,
  userHasRole,
  useRovingFocus,
  useSanityCreateConfig,
  useSchema,
  useSearchMaxFieldDepth,
  useSearchState,
  useSetPerspective,
  useSource,
  useSyncState,
  useTemplatePermissions,
  useTemplates,
  useThrottledCallback,
  useTimeAgo,
  useTimelineSelector,
  useTimelineStore,
  useTools,
  useTrackerStore,
  useTrackerStoreReporter,
  useTranslation,
  useTreeEditingEnabled,
  useUnique,
  useUnitFormatter,
  useUser,
  useUserColor,
  useUserColorManager,
  useUserListWithPermissions,
  useUserStore,
  useValidationStatus,
  useVersionOperations,
  useVirtualizerScrollInstance,
  useWorkspace,
  useWorkspaceLoader,
  useWorkspaces,
  useZIndex,
  validateBasePaths,
  validateDocument,
  validateNames,
  validateWorkspaces,
  ValueError,
  VirtualizerScrollInstanceProvider,
  visitDiff,
  WithReferringDocuments,
  WorkspaceLoader,
  WorkspaceProvider,
  WorkspacesProvider,
  ZIndexProvider,
  ActionComponent,
  ActiveToolLayoutProps,
  ActiveWorkspaceMatcherContextValue,
  ActiveWorkspaceMatcherProps,
  AddonDatasetContextValue,
  Annotation,
  AnnotationDetails,
  ApiConfig,
  AppsOptions,
  ArrayDiff,
  ArrayFieldProps,
  ArrayInputCopyEvent,
  ArrayInputFunctionsProps,
  ArrayInputInsertEvent,
  ArrayInputMoveItemEvent,
  ArrayItemError,
  ArrayItemMetadata,
  ArrayOfObjectsFormNode,
  ArrayOfObjectsInputMembersProps,
  ArrayOfObjectsInputProps,
  ArrayOfObjectsItemMember,
  ArrayOfObjectsMember,
  ArrayOfObjectsMemberProps,
  ArrayOfPrimitivesElementType,
  ArrayOfPrimitivesFieldProps,
  ArrayOfPrimitivesFormNode,
  ArrayOfPrimitivesInput,
  ArrayOfPrimitivesInputProps,
  ArrayOfPrimitivesItemMember,
  ArrayOfPrimitivesMember,
  AssetSourceResolver,
  AsyncComposableOption,
  AsyncConfigPropertyReducer,
  AuthConfig,
  AuthProvider,
  AuthState,
  AuthStore,
  AuthStoreOptions,
  AutoCollapseMenu,
  AvailabilityReason,
  AvailabilityResponse,
  AvatarSkeleton,
  BaseEvent,
  BaseFieldProps,
  BaseFormNode,
  BaseInputProps,
  BaseItemProps,
  BaseOptions,
  BetaBadgeProps,
  BetaFeatures,
  BlockAnnotationProps,
  BlockDecoratorProps,
  BlockImagePreviewProps,
  BlockListItemProps,
  BlockProps,
  BlockStyleProps,
  BooleanDiff,
  BooleanFieldProps,
  BooleanFormNode,
  BooleanInputProps,
  BufferedDocumentEvent,
  BufferedDocumentWrapper,
  CapabilityGate,
  ChangeConnectorRootProps,
  ChangeFieldWrapper,
  ChangeIndicatorProps,
  ChangeIndicatorsTracker,
  ChangeIndicatorTrackerContextValue,
  ChangeListProps,
  ChangeNode,
  ChangeResolverProps,
  ChangeTitlePath,
  Chunk,
  ChunkType,
  CollapseMenu,
  CollapseMenuButton,
  CollapseMenuButtonProps,
  CollapseMenuProps,
  CollatedHit,
  ColorSchemeProviderProps,
  CombinedDocument,
  CommandList,
  CommandListElementType,
  CommandListGetItemDisabledCallback,
  CommandListGetItemKeyCallback,
  CommandListGetItemSelectedCallback,
  CommandListHandle,
  CommandListItemContext,
  CommandListProps,
  CommandListRenderItemCallback,
  CommentBaseCreatePayload,
  CommentContext,
  CommentCreatePayload,
  CommentDisabledIcon,
  CommentDocument,
  CommentFieldCreatePayload,
  CommentInlineHighlightSpan,
  CommentInput,
  CommentInputHandle,
  CommentInputProps,
  CommentIntentGetter,
  CommentListBreadcrumbs,
  CommentMessage,
  CommentOperations,
  CommentPath,
  CommentPostPayload,
  CommentReactionItem,
  CommentReactionOption,
  CommentReactionShortNames,
  COMMENTS_INSPECTOR_NAME,
  CommentsEnabledProvider,
  CommentsIntentProvider,
  CommentsIntentProviderProps,
  CommentsList,
  CommentsListBreadcrumbItem,
  CommentsProvider,
  CommentsSelectedPath,
  CommentsSelectedPathProvider,
  CommentStatus,
  CommentsTextSelectionItem,
  CommentsType,
  CommentsUIMode,
  CommentTaskCreatePayload,
  CommentTextSelection,
  CommentThreadItem,
  CommentUpdateOperationOptions,
  CommentUpdatePayload,
  CommitFunction,
  CommitRequest,
  CommittedEvent,
  CommonProps,
  CompactPreviewProps,
  ComplexElementProps,
  ComposableOption,
  ConcreteRuleClass,
  Config,
  ConfigContext,
  ConfigPropertyError,
  ConfigPropertyErrorOptions,
  ConfigPropertyReducer,
  ConfigResolutionError,
  ConfigResolutionErrorOptions,
  ConnectedStatus,
  CONNECTING,
  ConnectingStatus,
  ConnectionState,
  ConnectionStatus,
  ConnectionStatusStore,
  ConnectionStatusStoreOptions,
  ConnectorContextValue,
  ContextMenuButton,
  CookielessCompatibleLoginMethod,
  CopyOptions,
  CopyPasteContextType,
  CopyPasteProvider,
  CorsOriginError,
  CorsOriginErrorOptions,
  createAuthStore,
  createBufferedDocument,
  CreateDocumentVersionEvent,
  CreateLinkedActionsProps,
  CreateLinkedDocumentBannerContentProps,
  CreateLinkedSanityDocument,
  CreateLinkMetadata,
  CreateLiveDocumentEvent,
  createObservableBufferedDocument,
  createSearch,
  createSharedResizeObserver,
  CreateWorkspaceFromConfigOptions,
  CrossDatasetReferenceInputProps,
  DateInputProps,
  DateTimeInputProps,
  DEFAULT_MAX_RECURSION_DEPTH,
  DEFAULT_STUDIO_CLIENT_OPTIONS,
  defaultLocale,
  DefaultPluginsWorkspaceOptions,
  DefaultPreviewProps,
  defaultRenderAnnotation,
  defaultRenderBlock,
  defaultRenderField,
  defaultRenderInlineBlock,
  defaultRenderInput,
  defaultRenderItem,
  defaultRenderPreview,
  defaultTheme,
  DeleteDocumentGroupEvent,
  DeleteDocumentVersionEvent,
  DetailPreviewProps,
  Diff,
  DiffCard,
  DiffCardProps,
  DiffComponent,
  DiffComponentOptions,
  DiffComponentResolver,
  DiffErrorBoundary,
  DiffErrorBoundaryProps,
  DiffErrorBoundaryState,
  DiffFromToProps,
  DiffInspectWrapperProps,
  DiffProps,
  diffResolver,
  DiffTooltipProps,
  DiffTooltipWithAnnotationsProps,
  DiffVisitor,
  DocumentActionComponent,
  DocumentActionConfirmDialogProps,
  DocumentActionCustomDialogComponentProps,
  DocumentActionDescription,
  DocumentActionDialogProps,
  DocumentActionGroup,
  DocumentActionModalDialogProps,
  DocumentActionPopoverDialogProps,
  DocumentActionProps,
  DocumentActionsContext,
  DocumentActionsResolver,
  DocumentActionsVersionType,
  DocumentAvailability,
  DocumentBadgeComponent,
  DocumentBadgeDescription,
  DocumentBadgeProps,
  DocumentBadgesContext,
  DocumentBadgesResolver,
  DocumentChangeContextInstance,
  DocumentCommentsEnabledContext,
  DocumentField,
  DocumentFieldAction,
  DocumentFieldActionDivider,
  DocumentFieldActionGroup,
  DocumentFieldActionHook,
  DocumentFieldActionItem,
  DocumentFieldActionNode,
  DocumentFieldActionProps,
  documentFieldActionsReducer,
  DocumentFieldActionsResolver,
  DocumentFieldActionsResolverContext,
  DocumentFieldActionStatus,
  DocumentFieldActionTone,
  DocumentFormNode,
  DocumentGroupEvent,
  DocumentInspector,
  DocumentInspectorComponent,
  DocumentInspectorContext,
  DocumentInspectorMenuItem,
  DocumentInspectorProps,
  DocumentInspectorsResolver,
  DocumentInspectorUseMenuItemProps,
  DocumentLanguageFilterComponent,
  DocumentLanguageFilterContext,
  DocumentLanguageFilterResolver,
  DocumentLayoutProps,
  DocumentMeta,
  DocumentMutationEvent,
  DocumentPairPermissionsOptions,
  DocumentPermission,
  DocumentPluginOptions,
  DocumentPresence,
  DocumentPreviewPresenceProps,
  DocumentPreviewStore,
  DocumentPreviewStoreOptions,
  DocumentRebaseEvent,
  DocumentRemoteMutationEvent,
  DocumentRemoteMutationVersionEvent,
  DocumentRevision,
  DocumentStore,
  DocumentStoreExtraOptions,
  DocumentStoreOptions,
  DocumentTypeResolveState,
  DocumentValuePermission,
  DocumentValuePermissionsOptions,
  DocumentVariantType,
  DocumentVersion,
  DocumentVersionEvent,
  DocumentVersionEventType,
  DocumentVersionSnapshots,
  DraftId,
  DRAFTS_FOLDER,
  DraftsModelDocument,
  DraftsModelDocumentAvailability,
  DuplicateActionProps,
  DuplicateDocumentActionComponent,
  DuplicateKeysError,
  EditDocumentVersionEvent,
  EditReferenceLinkComponentProps,
  EditReferenceOptions,
  editState,
  EditStateFor,
  EmailInputProps,
  EMPTY_ARRAY,
  EMPTY_OBJECT,
  ErrorActions,
  ErrorActionsProps,
  ErrorMessageProps,
  ErrorState,
  ErrorStatus,
  ErrorWithId,
  escapeField,
  EvaluationParams,
  Event,
  EventsStore,
  EventsStoreRevision,
  ExpandFieldSetOperation,
  ExpandOperation,
  ExpandPathOperation,
  FallbackDiff,
  FieldActionMenu,
  FieldActionMenuProps,
  FieldActionsProps,
  FieldActionsProvider,
  FieldActionsResolver,
  FieldChangeNode,
  FieldCommentsProps,
  FieldError,
  FieldMember,
  FieldName,
  fieldNeedsEscape,
  FieldOperationsAPI,
  FieldPresenceData,
  FieldPresenceInner,
  FieldPresenceInnerProps,
  FieldPresenceProps,
  FieldPresenceWithOverlay,
  FieldPreviewComponent,
  FieldProps,
  FieldSetMember,
  FieldsetState,
  FieldStatusProps,
  FieldValueError,
  FileInputProps,
  FileLike,
  FIXME,
  flattenConfig,
  formatRelativeLocale,
  FormattableMeasurementUnit,
  FormattedDuration,
  FormBuilderComponentResolverContext,
  FormBuilderContextValue,
  FormBuilderCustomMarkersComponent,
  FormBuilderFilterFieldFn,
  FormBuilderInputComponentMap,
  FormBuilderMarkersComponent,
  FormBuilderProps,
  FormCallbacksProvider,
  FormCallbacksValue,
  FormComponents,
  FormDecPatch,
  FormDiffMatchPatch,
  FormDocumentValue,
  FormField,
  FormFieldGroup,
  FormFieldHeaderText,
  FormFieldHeaderTextProps,
  FormFieldProps,
  FormFieldSet,
  FormFieldSetProps,
  FormFieldValidation,
  FormFieldValidationError,
  FormFieldValidationInfo,
  FormFieldValidationStatusProps,
  FormFieldValidationWarning,
  FormIncPatch,
  FormInput,
  FormInputAbsolutePathArg,
  FormInputRelativePathArg,
  FormInsertPatch,
  FormInsertPatchPosition,
  FormNodePresence,
  FormPatch,
  FormPatchBase,
  FormPatchJSONValue,
  FormPatchOrigin,
  FormProviderProps,
  FormSetIfMissingPatch,
  FormSetPatch,
  FormState,
  FormUnsetPatch,
  FormValueContextValue,
  FromTo,
  FromToArrowDirection,
  FromToIndex,
  FromToProps,
  GeneralDocumentListLayoutKey,
  GeneralPreviewLayoutKey,
  GetFormValueProvider,
  GetHookCollectionState,
  GetHookCollectionStateProps,
  getSearchableTypes,
  getVersionInlineBadge,
  GlobalCopyPasteElementHandler,
  GlobalPresence,
  globalScope,
  Grant,
  GrantsStore,
  GrantsStoreOptions,
  GroupChangeNode,
  HexColor,
  HiddenField,
  HistoryClearedEvent,
  HistoryStore,
  HistoryStoreOptions,
  HookCollectionActionHook,
  HotkeysProps,
  HoveredFieldProvider,
  I18nNode,
  I18nSearchOperatorDescriptionKey,
  I18nSearchOperatorNameKey,
  Id,
  IdPair,
  ImageInputProps,
  ImageUrlBuilder,
  ImperativeToast,
  ImplicitLocaleResourceBundle,
  IncompatibleTypeError,
  initialDocumentFieldActions,
  InitialSnapshotEvent,
  InitialValueErrorMsg,
  InitialValueLoadingMsg,
  InitialValueMsg,
  InitialValueOptions,
  InitialValueState,
  InitialValueSuccessMsg,
  InitialValueTemplateItem,
  InlinePreviewProps,
  InputProps,
  InsufficientPermissionsMessageProps,
  InterpolationProp,
  InvalidationChannelEvent,
  InvalidItemTypeError,
  isCreateDocumentVersionEvent,
  isCreateLiveDocumentEvent,
  isDeleteDocumentGroupEvent,
  isDeleteDocumentVersionEvent,
  isDev,
  isEditDocumentVersionEvent,
  IsEqualFunction,
  isProd,
  isPublishDocumentVersionEvent,
  isReleasePerspective,
  isSanityDefinedAction,
  isScheduleDocumentVersionEvent,
  isUnpublishDocumentEvent,
  isUnscheduleDocumentVersionEvent,
  isUpdateLiveDocumentEvent,
  ItemDiff,
  ItemProps,
  joinPath,
  KeyValueStore,
  KeyValueStoreValue,
  LatencyReportEvent,
  LATEST,
  LayoutProps,
  LegacyThemeProps,
  LegacyThemeTints,
  ListenerEvent,
  ListenQueryOptions,
  ListenQueryParams,
  Loadable,
  LoadableState,
  LoadedState,
  LoadingState,
  LoadingTuple,
  Locale,
  LocaleConfigContext,
  LocaleDefinition,
  LocaleNestedResource,
  LocalePluginOptions,
  LocaleResourceBundle,
  LocaleResourceKey,
  LocaleResourceRecord,
  LocalesBundlesOption,
  LocalesOption,
  LocaleSource,
  LocaleWeekInfo,
  Location,
  LoginComponentProps,
  LoginMethod,
  LogoProps,
  MapDocument,
  MatchWorkspaceOptions,
  MatchWorkspaceResult,
  MediaLibraryConfig,
  MediaPreviewProps,
  MemberField,
  MemberFieldProps,
  MemberFieldSet,
  MemberItemProps,
  MetaInfoProps,
  MissingConfigFile,
  MissingKeysError,
  MixedArrayError,
  MockAuthStoreOptions,
  MutationEvent,
  MutationPatch,
  MutationPatchMsg,
  MutationPayload,
  MutationResult,
  NavbarAction,
  NavbarContextValue,
  NavbarProps,
  NewDocumentCreationContext,
  NewDocumentOptionsContext,
  NewDocumentOptionsResolver,
  NullDiff,
  NumberDiff,
  NumberFieldProps,
  NumberFormNode,
  NumberInputProps,
  ObjectArrayFormNode,
  ObjectDiff,
  ObjectFieldProps,
  ObjectFormNode,
  ObjectInput,
  ObjectInputMember,
  ObjectInputMemberProps,
  ObjectInputProps,
  ObjectItem,
  ObjectItemProps,
  ObjectMember,
  ObjectMembers,
  ObjectMembersProps,
  ObserveDocumentAvailabilityFn,
  ObserveDocumentTypeFromIdFn,
  ObserveForPreviewFn,
  ObservePathsFn,
  OnPathFocusPayload,
  onRetry,
  Opaque,
  Operation,
  OperationArgs,
  OperationError,
  operationEvents,
  OperationImpl,
  OperationsAPI,
  OperationSuccess,
  OperatorButtonValueComponentProps,
  operatorDefinitions,
  OperatorInputComponentProps,
  Pair,
  ParsedTimeRef,
  PartialContext,
  PartialExcept,
  PartialIndexSettings,
  PasteOptions,
  PatchArg,
  PatchChannel,
  PatchEvent,
  PatchMsg,
  PatchMsgSubscriber,
  PendingMutationsEvent,
  PermissionCheckResult,
  PerspectiveContextValue,
  PerspectiveNotWriteableReason,
  PerspectiveStack,
  Plugin,
  PluginFactory,
  PluginOptions,
  BlockEditor,
  PortableTextInput,
  PortableTextInputProps,
  PortableTextMarker,
  PortableTextMemberItem,
  PortableTextPluginsProps,
  PortableTextPreviewLayoutKey,
  Position,
  PreparedConfig,
  PreparedSnapshot,
  PresenceLocation,
  PresenceOverlayProps,
  PresenceScopeProps,
  PresenceStore,
  PresentUser,
  Previewable,
  PreviewableType,
  PreviewCard,
  PreviewCardContextValue,
  PreviewComponent,
  PreviewLayoutKey,
  PreviewMediaDimensions,
  PreviewPath,
  PreviewProps,
  PrimitiveFieldProps,
  PrimitiveFormNode,
  PrimitiveInputElementProps,
  PrimitiveInputProps,
  PrimitiveItemProps,
  PrimitiveMemberItemProps,
  ProjectData,
  ProjectDatasetData,
  ProjectStore,
  PublishDocumentVersionEvent,
  PublishedId,
  QueryParams,
  ReactHook,
  RebasePatchMsg,
  ReconnectEvent,
  Rect,
  ReferenceDiff,
  ReferenceInputOptions,
  ReferenceInputPreviewCard,
  ReferenceInputProps,
  RegionWithIntersectionDetails,
  RelativeTimeOptions,
  RelativeTimeProps,
  ReleaseDocument,
  ReleaseId,
  RELEASES_INTENT,
  RELEASES_STUDIO_CLIENT_OPTIONS,
  ReleasesNav,
  ReleasesNavMenuItemPropsGetter,
  RemoteSnapshotEvent,
  remoteSnapshots,
  RemoteSnapshotVersionEvent,
  removeMissingReferences,
  RenderAnnotationCallback,
  RenderArrayOfObjectsItemCallback,
  RenderArrayOfPrimitivesItemCallback,
  RenderBlockActionsCallback,
  RenderBlockActionsProps,
  RenderBlockCallback,
  RenderCustomMarkers,
  RenderFieldCallback,
  RenderInputCallback,
  RenderItemCallback,
  RenderPreviewCallback,
  RenderPreviewCallbackProps,
  Reported,
  ReportedRegionWithRect,
  ReporterHook,
  resizeObserver,
  ResolvedUploader,
  resolveInitialValueForType,
  ResolveProductionUrlContext,
  ResourceCache,
  ResourceCacheProviderProps,
  RetryingStatus,
  RevertChangesButton,
  RovingFocusNavigationType,
  RovingFocusProps,
  SANITY_PATCH_TYPE,
  SANITY_VERSION,
  SanityClient,
  SanityClipboardItem,
  SanityCreateConfigContextValue,
  SanityDefaultPreview,
  SanityDefaultPreviewProps,
  SanityFormConfig,
  ScheduleDocumentVersionEvent,
  ScheduledPublishingPluginOptions,
  SchemaError,
  SchemaPluginOptions,
  ScrollContainer,
  ScrollContainerProps,
  ScrollContextValue,
  ScrollEventHandler,
  SearchButton,
  SearchContextValue,
  SearchFactoryOptions,
  SearchFilterDefinition,
  SearchHeader,
  SearchOperatorBase,
  SearchOperatorBuilder,
  SearchOperatorButtonValue,
  SearchOperatorInput,
  SearchOperatorParams,
  SearchOperatorType,
  SearchOptions,
  SearchPopoverProps,
  SearchSort,
  SearchTerms,
  SearchValueFormatterContext,
  SelectedPerspective,
  Selection,
  SelectionState,
  Serializeable,
  Session,
  SESSION_ID,
  SetActiveGroupOperation,
  SharedResizeObserver,
  SingleWorkspace,
  Size,
  SlugInputProps,
  SnapshotEvent,
  snapshotPair,
  Source,
  SourceClientOptions,
  SourceOptions,
  SourceProviderProps,
  StateTree,
  StaticLocaleResourceBundle,
  Status,
  StatusButton,
  StatusButtonProps,
  StringDiff,
  StringDiffSegment,
  StringFieldProps,
  StringFormNode,
  StringInputProps,
  StringSegmentChanged,
  StringSegmentUnchanged,
  StudioComponents,
  StudioComponentsPluginOptions,
  StudioLocaleResourceKeys,
  StudioProps,
  StudioProviderProps,
  StudioTheme,
  StudioThemeColorSchemeKey,
  supportsTouch,
  SyncState,
  SystemBundle,
  systemBundles,
  TagsArrayInputProps,
  TelephoneInputProps,
  Template,
  TemplateArrayFieldDefinition,
  TemplateFieldDefinition,
  TemplateItem,
  TemplateOption,
  TemplateParameter,
  TemplatePermissionsOptions,
  TemplatePermissionsResult,
  TemplatePreviewProps,
  TemplateReferenceTarget,
  TemplateResolver,
  TextInputProps,
  TextWithTone,
  TextWithToneProps,
  TFunction,
  TimeAgoOpts,
  Timeline,
  TIMELINE_ITEM_I18N_KEY_MAPPING,
  TimelineController,
  TimelineControllerOptions,
  TimelineOptions,
  TimelineState,
  TimelineStore,
  ToastParams,
  Tool,
  ToolLink,
  ToolLinkProps,
  ToolMenuProps,
  TooltipOfDisabled,
  TrackedArea,
  TrackedChange,
  TrackerContextGetSnapshot,
  TrackerContextStore,
  Transaction,
  TransformPatches,
  TranslateComponentMap,
  TranslationProps,
  TypeAnnotationMismatchError,
  TypeChangeDiff,
  TypeTarget,
  uncaughtErrorHandler,
  UndeclaredMembersError,
  UnitFormatter,
  UnpublishDocumentEvent,
  UnscheduleDocumentVersionEvent,
  UpdateLiveDocumentEvent,
  Uploader,
  UploaderDef,
  UploaderResolver,
  UploadEvent,
  UploadOptions,
  UploadProgressEvent,
  UpsellDialogDismissed,
  UpsellDialogLearnMoreCtaClicked,
  UpsellDialogUpgradeCtaClicked,
  UpsellDialogViewed,
  UpsellDialogViewedInfo,
  UrlInputProps,
  useCanvasCompanionDoc,
  useChangeIndicatorsReporter,
  useCopyPaste,
  UseDateTimeFormatOptions,
  useDocumentPairPermissionsFromHookFactory,
  useDocumentVersionTypeSortedList,
  UseFormattedDurationOptions,
  UseFormStateOptions,
  useIsReleaseActive,
  UseListFormatOptions,
  UseManageFavoriteProps,
  useNavigateToCanvasDoc,
  usEnglishLocale,
  UseNumberFormatOptions,
  useOnlyHasVersions,
  UserAvatarProps,
  UserColor,
  UserColorHue,
  UserColorManager,
  UserColorManagerOptions,
  UserColorManagerProviderProps,
  useReconnectingToast,
  UserId,
  UserListWithPermissionsHookValue,
  UserListWithPermissionsOptions,
  UserSessionPair,
  UserStore,
  UserStoreOptions,
  UserWithPermission,
  useStudioUrl,
  useTemplatePermissionsFromHookFactory,
  UseTranslationOptions,
  UseTranslationResponse,
  UseUnitFormatterOptions,
  useWorkspaceSchemaId,
  ValidateDocumentOptions,
  ValidateWorkspaceOptions,
  validation,
  ValidationLocaleResourceKeys,
  ValuelessSearchOperatorBuilder,
  ValuelessSearchOperatorParams,
  VERSION_FOLDER,
  VersionChip,
  VersionInfoDocumentStub,
  VersionInlineBadge,
  VirtualizerScrollInstance,
  WelcomeEvent,
  WithVersion,
  Workspace,
  WorkspaceLike,
  WorkspaceOptions,
  WorkspaceProviderProps,
  WorkspacesContextValue,
  WorkspacesProviderProps,
  WorkspaceSummary,
  ZIndexContextValue,
  ZIndexContextValueKey,
  defineArrayMember,
  defineAssetAspect,
  defineField,
  defineType,
  isArrayOfBlocksSchemaType,
  isArrayOfObjectsSchemaType,
  isArrayOfPrimitivesSchemaType,
  isArraySchemaType,
  isAssetAspect,
  isBlockChildrenObjectField,
  isBlockListObjectField,
  isBlockSchemaType,
  isBlockStyleObjectField,
  isBooleanSchemaType,
  isCreateIfNotExistsMutation,
  isCreateMutation,
  isCreateOrReplaceMutation,
  isCreateSquashedMutation,
  isCrossDatasetReference,
  isCrossDatasetReferenceSchemaType,
  isDateTimeSchemaType,
  isDeleteMutation,
  isDeprecatedSchemaType,
  isDeprecationConfiguration,
  isDocumentSchemaType,
  isFileSchemaType,
  isGlobalDocumentReference,
  isImage,
  isImageSchemaType,
  isIndexSegment,
  isIndexTuple,
  isKeyedObject,
  isKeySegment,
  isNumberSchemaType,
  isObjectSchemaType,
  isPatchMutation,
  isPortableTextListBlock,
  isPortableTextSpan,
  isPortableTextTextBlock,
  isPrimitiveSchemaType,
  isReference,
  isReferenceSchemaType,
  isSanityDocument,
  isSearchStrategy,
  isSlug,
  isSpanSchemaType,
  isStringSchemaType,
  isTitledListValue,
  isTypedObject,
  isValidationError,
  isValidationErrorMarker,
  isValidationInfo,
  isValidationInfoMarker,
  isValidationWarning,
  isValidationWarningMarker,
  typed,
  ArrayActionName,
  ArrayDefinition,
  ArrayOfEntry,
  ArrayOfType,
  ArrayOptions,
  ArrayRule,
  ArraySchemaType,
  ArraySchemaTypeOf,
  Asset,
  AssetFromSource,
  AssetMetadataType,
  AssetSchemaTypeOptions,
  AssetSource,
  AssetSourceComponentProps,
  AssetSourceSpec,
  AssetSourceUploader,
  AssetSourceUploaderClass,
  AssetSourceUploadEvent,
  AssetSourceUploadEventAbort,
  AssetSourceUploadEventAllComplete,
  AssetSourceUploadEventError,
  AssetSourceUploadEventProgress,
  AssetSourceUploadEventStatus,
  AssetSourceUploadFile,
  AssetSourceUploadSubscriber,
  AutocompleteString,
  BaseSchemaDefinition,
  BaseSchemaType,
  BaseSchemaTypeOptions,
  BlockAnnotationDefinition,
  BlockChildrenObjectField,
  BlockDecoratorDefinition,
  BlockDefinition,
  BlockListDefinition,
  BlockListObjectField,
  BlockMarksDefinition,
  BlockOptions,
  BlockRule,
  BlockSchemaType,
  BlockStyleDefinition,
  BlockStyleObjectField,
  BooleanDefinition,
  BooleanOptions,
  BooleanRule,
  BooleanSchemaType,
  CanvasAppOptions,
  CollapseOptions,
  ConditionalIndexAccess,
  ConditionalProperty,
  ConditionalPropertyCallback,
  ConditionalPropertyCallbackContext,
  CreateIfNotExistsMutation,
  CreateMutation,
  CreateOrReplaceMutation,
  CreateSquashedMutation,
  CrossDatasetReferenceDefinition,
  CrossDatasetReferenceFilterResolver,
  CrossDatasetReferenceFilterSearchOptions,
  CrossDatasetReferenceSchemaType,
  CrossDatasetReferenceValue,
  CrossDatasetType,
  CurrentUser,
  CustomValidator,
  CustomValidatorResult,
  DateDefinition,
  DateOptions,
  DateRule,
  DatetimeDefinition,
  DatetimeOptions,
  DatetimeRule,
  DefineArrayMemberBase,
  DefineSchemaBase,
  DefineSchemaOptions,
  DefineSchemaType,
  DeleteMutation,
  DeprecatedProperty,
  DeprecatedSchemaType,
  DeprecationConfiguration,
  DocumentDefinition,
  DocumentOptions,
  DocumentRule,
  EmailDefinition,
  EmailOptions,
  EmailRule,
  EmptyProps,
  EnumListProps,
  FieldDefinition,
  FieldDefinitionBase,
  FieldGroup,
  FieldGroupDefinition,
  FieldReference,
  FieldRules,
  Fieldset,
  FieldsetDefinition,
  File,
  FileAsset,
  FileDefinition,
  FileOptions,
  FileRule,
  FileSchemaType,
  FileValue,
  FormNodeValidation,
  GeopointDefinition,
  GeopointOptions,
  GeopointRule,
  GeopointValue,
  GlobalDocumentReferenceDefinition,
  GlobalDocumentReferenceFilterResolver,
  GlobalDocumentReferenceFilterSearchOptions,
  GlobalDocumentReferenceSchemaType,
  GlobalDocumentReferenceType,
  GlobalDocumentReferenceValue,
  HotspotOptions,
  HotspotPreview,
  I18nTextRecord,
  I18nTitledListValue,
  Image,
  ImageAsset,
  ImageCrop,
  ImageDefinition,
  ImageDimensions,
  ImageHotspot,
  ImageMetadata,
  ImageMetadataType,
  ImageOptions,
  ImagePalette,
  ImageRule,
  ImageSchemaType,
  ImageSwatch,
  ImageUrlAutoMode,
  ImageUrlCropMode,
  ImageUrlFitMode,
  ImageUrlFormat,
  ImageUrlOrientation,
  ImageUrlParams,
  ImageValue,
  IndexTuple,
  InitialValueProperty,
  InitialValueResolver,
  InitialValueResolverContext,
  InlineFieldDefinition,
  InsertMenuOptions,
  InsertPatch,
  IntrinsicArrayOfBase,
  IntrinsicArrayOfDefinition,
  IntrinsicBase,
  IntrinsicDefinitions,
  IntrinsicTypeName,
  KeyedObject,
  KeyedSegment,
  LocalizedValidationMessages,
  MaybeAllowUnknownProps,
  MaybePreview,
  MEDIA_LIBRARY_ASSET_ASPECT_TYPE_NAME,
  MediaAssetTypes,
  MediaLibraryAssetAspectDefinition,
  MediaLibraryAssetAspectDocument,
  MediaLibraryAssetAspectSupportedFieldDefinitions,
  MediaLibraryAssetAspectTypeName,
  MediaLibraryAssetType,
  MediaValidationValue,
  MediaValidator,
  MendozaEffectPair,
  MendozaPatch,
  MultiFieldSet,
  MultipleMutationResult,
  Mutation,
  MutationOperationName,
  MutationSelection,
  NarrowPreview,
  NumberDefinition,
  NumberOptions,
  NumberRule,
  NumberSchemaType,
  ObjectDefinition,
  ObjectField,
  ObjectFieldType,
  ObjectOptions,
  ObjectRule,
  ObjectSchemaType,
  ObjectSchemaTypeWithOptions,
  PatchMutation,
  PatchMutationOperation,
  PatchOperations,
  Path,
  PathSegment,
  PortableTextBlock,
  PortableTextChild,
  PortableTextListBlock,
  PortableTextObject,
  PortableTextSpan,
  PortableTextTextBlock,
  PrepareViewOptions,
  PreviewConfig,
  PreviewValue,
  Reference,
  ReferenceBaseOptions,
  ReferenceDefinition,
  ReferenceFilterOptions,
  ReferenceFilterQueryOptions,
  ReferenceFilterResolver,
  ReferenceFilterResolverContext,
  ReferenceFilterResolverOptions,
  ReferenceFilterSearchOptions,
  ReferenceOptions,
  ReferenceRule,
  ReferenceSchemaType,
  ReferenceTo,
  ReferenceValue,
  Role,
  Rule,
  RuleBuilder,
  RuleClass,
  RuleDef,
  RuleSpec,
  RuleSpecConstraint,
  RuleTypeConstraint,
  SanityCreateOptions,
  SanityDocument,
  SanityDocumentLike,
  Schema,
  SchemaType,
  SchemaTypeDefinition,
  SchemaValidationError,
  SchemaValidationProblem,
  SchemaValidationProblemGroup,
  SchemaValidationProblemPath,
  SchemaValidationValue,
  SchemaValidationWarning,
  SearchConfiguration,
  searchStrategies,
  SearchStrategy,
  SingleFieldSet,
  SingleMutationResult,
  Slug,
  SlugDefinition,
  SlugifierFn,
  SlugIsUniqueValidator,
  SlugOptions,
  SlugParent,
  SlugRule,
  SlugSchemaType,
  SlugSourceContext,
  SlugSourceFn,
  SlugValidationContext,
  SlugValue,
  SortOrdering,
  SortOrderingItem,
  SpanMarksObjectField,
  SpanSchemaType,
  SpanTextObjectField,
  StrictDefinition,
  StringDefinition,
  StringOptions,
  StringRule,
  StringSchemaType,
  SwatchName,
  TextDefinition,
  TextOptions,
  TextRule,
  TextSchemaType,
  TitledListValue,
  TransactionLogEvent,
  TransactionLogEventWithEffects,
  TransactionLogEventWithMutations,
  TransactionLogMutation,
  TypeAliasDefinition,
  TypedObject,
  TypeReference,
  UploadState,
  UriValidationOptions,
  UrlDefinition,
  UrlOptions,
  UrlRule,
  User,
  ValidationBuilder,
  ValidationContext,
  ValidationError,
  ValidationErrorClass,
  ValidationErrorOptions,
  ValidationMarker,
  Validator,
  Validators,
  WeakCrossDatasetReferenceValue,
  WeakGlobalDocumentReferenceValue,
  WeakReference,
  WidenInitialValue,
  WidenValidation,
  ArrayOfObjectsComponents,
  ArrayOfPrimitivesComponents,
  BooleanComponents,
  DateComponents,
  DatetimeComponents,
  DocumentComponents,
  FileComponents,
  GeopointComponents,
  ImageComponents,
  NumberComponents,
  ObjectComponents,
  ReferenceComponents,
  CrossDatasetReferenceComponents,
  SlugComponents,
  SpanComponents,
  StringComponents,
  TextComponents,
  UrlComponents,
  EmailComponents,
  SpanDefinition,
} from 'sanity'
import {describe, expectTypeOf, test} from 'vitest'

describe('sanity', () => {
  test('ActiveWorkspaceMatcher', () => {
    expectTypeOf<typeof ActiveWorkspaceMatcher>().toBeFunction()
  })
  test('AddonDatasetProvider', () => {
    expectTypeOf<typeof AddonDatasetProvider>().toBeFunction()
  })
  test('ArrayOfObjectOptionsInput', () => {
    expectTypeOf<typeof ArrayOfObjectOptionsInput>().toBeFunction()
  })
  test('ArrayOfObjectsFunctions', () => {
    expectTypeOf<typeof ArrayOfObjectsFunctions>().toBeFunction()
  })
  test('ArrayOfObjectsInput', () => {
    expectTypeOf<typeof ArrayOfObjectsInput>().toBeFunction()
  })
  test('ArrayOfObjectsInputMember', () => {
    expectTypeOf<typeof ArrayOfObjectsInputMember>().toBeFunction()
  })
  test('ArrayOfObjectsInputMembers', () => {
    expectTypeOf<typeof ArrayOfObjectsInputMembers>().toBeFunction()
  })
  test('ArrayOfObjectsItem', () => {
    expectTypeOf<typeof ArrayOfObjectsItem>().toBeFunction()
  })
  test('ArrayOfOptionsInput', () => {
    expectTypeOf<typeof ArrayOfOptionsInput>().toBeFunction()
  })
  test('ArrayOfPrimitiveOptionsInput', () => {
    expectTypeOf<typeof ArrayOfPrimitiveOptionsInput>().toBeFunction()
  })
  test('ArrayOfPrimitivesFunctions', () => {
    expectTypeOf<typeof ArrayOfPrimitivesFunctions>().toBeFunction()
  })
  test('ArrayOfPrimitivesItem', () => {
    expectTypeOf<typeof ArrayOfPrimitivesItem>().toBeFunction()
  })
  test('asLoadable', () => {
    expectTypeOf<typeof asLoadable>().toBeFunction()
  })
  test('BetaBadge', () => {
    expectTypeOf<typeof BetaBadge>().toBeFunction()
  })
  test('BlockImagePreview', () => {
    expectTypeOf<typeof BlockImagePreview>().toBeFunction()
  })
  test('BlockPreview', () => {
    expectTypeOf<typeof BlockPreview>().toBeFunction()
  })
  test('BooleanInput', () => {
    expectTypeOf<typeof BooleanInput>().toBeFunction()
  })
  test('buildCommentRangeDecorations', () => {
    expectTypeOf<typeof buildCommentRangeDecorations>().toBeFunction()
  })
  test('buildLegacyTheme', () => {
    expectTypeOf<typeof buildLegacyTheme>().toBeFunction()
  })
  test('buildRangeDecorationSelectionsFromComments', () => {
    expectTypeOf<typeof buildRangeDecorationSelectionsFromComments>().toBeFunction()
  })
  test('buildTextSelectionFromFragment', () => {
    expectTypeOf<typeof buildTextSelectionFromFragment>().toBeFunction()
  })
  test('catchWithCount', () => {
    expectTypeOf<typeof catchWithCount>().toBeFunction()
  })
  test('ChangeBreadcrumb', () => {
    expectTypeOf<typeof ChangeBreadcrumb>().toBeFunction()
  })
  test('ChangeConnectorRoot', () => {
    expectTypeOf<typeof ChangeConnectorRoot>().toBeFunction()
  })
  test('ChangeIndicator', () => {
    expectTypeOf<typeof ChangeIndicator>().toBeFunction()
  })
  test('ChangeList', () => {
    expectTypeOf<typeof ChangeList>().toBeFunction()
  })
  test('ChangeResolver', () => {
    expectTypeOf<typeof ChangeResolver>().toBeFunction()
  })
  test('ChangesError', () => {
    expectTypeOf<typeof ChangesError>().toBeFunction()
  })
  test('ChangeTitleSegment', () => {
    expectTypeOf<typeof ChangeTitleSegment>().toBeFunction()
  })
  test('checkoutPair', () => {
    expectTypeOf<typeof checkoutPair>().toBeFunction()
  })
  test('CircularProgress', () => {
    expectTypeOf<typeof CircularProgress>().toBeFunction()
  })
  test('collate', () => {
    expectTypeOf<typeof collate>().toBeFunction()
  })
  test('ColorSchemeCustomProvider', () => {
    expectTypeOf<typeof ColorSchemeCustomProvider>().toBeFunction()
  })
  test('ColorSchemeLocalStorageProvider', () => {
    expectTypeOf<typeof ColorSchemeLocalStorageProvider>().toBeFunction()
  })
  test('ColorSchemeProvider', () => {
    expectTypeOf<typeof ColorSchemeProvider>().toBeFunction()
  })
  test('CommentDeleteDialog', () => {
    expectTypeOf<typeof CommentDeleteDialog>().toBeFunction()
  })
  test('CommentsAuthoringPathProvider', () => {
    expectTypeOf<typeof CommentsAuthoringPathProvider>().toBeFunction()
  })
  test('CompactPreview', () => {
    expectTypeOf<typeof CompactPreview>().toBeFunction()
  })
  test('_createAuthStore', () => {
    expectTypeOf<typeof _createAuthStore>().toBeFunction()
  })
  test('createConfig', () => {
    expectTypeOf<typeof createConfig>().toBeFunction()
  })
  test('createConnectionStatusStore', () => {
    expectTypeOf<typeof createConnectionStatusStore>().toBeFunction()
  })
  test('createDefaultIcon', () => {
    expectTypeOf<typeof createDefaultIcon>().toBeFunction()
  })
  test('createDocumentPreviewStore', () => {
    expectTypeOf<typeof createDocumentPreviewStore>().toBeFunction()
  })
  test('createDocumentStore', () => {
    expectTypeOf<typeof createDocumentStore>().toBeFunction()
  })
  test('createDraftFrom', () => {
    expectTypeOf<typeof createDraftFrom>().toBeFunction()
  })
  test('createGrantsStore', () => {
    expectTypeOf<typeof createGrantsStore>().toBeFunction()
  })
  test('createHistoryStore', () => {
    expectTypeOf<typeof createHistoryStore>().toBeFunction()
  })
  test('createHookFromObservableFactory', () => {
    expectTypeOf<typeof createHookFromObservableFactory>().toBeFunction()
  })
  test('createHookFromObservableFactory', () => {
    expectTypeOf<typeof createHookFromObservableFactory>().toBeFunction()
  })
  test('createKeyValueStore', () => {
    expectTypeOf<typeof createKeyValueStore>().toBeFunction()
  })
  test('createMockAuthStore', () => {
    expectTypeOf<typeof createMockAuthStore>().toBeFunction()
  })
  test('createPatchChannel', () => {
    expectTypeOf<typeof createPatchChannel>().toBeFunction()
  })
  test('createPlugin', () => {
    expectTypeOf<typeof createPlugin>().toBeFunction()
  })
  test('createPresenceStore', () => {
    expectTypeOf<typeof createPresenceStore>().toBeFunction()
  })
  test('createProjectStore', () => {
    expectTypeOf<typeof createProjectStore>().toBeFunction()
  })
  test('createPublishedFrom', () => {
    expectTypeOf<typeof createPublishedFrom>().toBeFunction()
  })
  test('createSanityMediaLibraryFileSource', () => {
    expectTypeOf<typeof createSanityMediaLibraryFileSource>().toBeFunction()
  })
  test('createSanityMediaLibraryImageSource', () => {
    expectTypeOf<typeof createSanityMediaLibraryImageSource>().toBeFunction()
  })
  test('createSchema', () => {
    expectTypeOf<typeof createSchema>().toBeFunction()
  })
  test('createSourceFromConfig', () => {
    expectTypeOf<typeof createSourceFromConfig>().toBeFunction()
  })
  test('createSWR', () => {
    expectTypeOf<typeof createSWR>().toBeFunction()
  })
  test('createUserColorManager', () => {
    expectTypeOf<typeof createUserColorManager>().toBeFunction()
  })
  test('createUserStore', () => {
    expectTypeOf<typeof createUserStore>().toBeFunction()
  })
  test('createWorkspaceFromConfig', () => {
    expectTypeOf<typeof createWorkspaceFromConfig>().toBeFunction()
  })
  test('CrossDatasetReferenceInput', () => {
    expectTypeOf<typeof CrossDatasetReferenceInput>().toBeFunction()
  })
  test('DateInput', () => {
    expectTypeOf<typeof DateInput>().toBeFunction()
  })
  test('DateTimeInput', () => {
    expectTypeOf<typeof DateTimeInput>().toBeFunction()
  })
  test('dec', () => {
    expectTypeOf<typeof dec>().toBeFunction()
  })
  test('decodePath', () => {
    expectTypeOf<typeof decodePath>().toBeFunction()
  })
  test('DefaultPreview', () => {
    expectTypeOf<typeof DefaultPreview>().toBeFunction()
  })
  test('defaultTemplateForType', () => {
    expectTypeOf<typeof defaultTemplateForType>().toBeFunction()
  })
  test('defaultTemplatesForSchema', () => {
    expectTypeOf<typeof defaultTemplatesForSchema>().toBeFunction()
  })
  test('defineConfig', () => {
    expectTypeOf<typeof defineConfig>().toBeFunction()
  })
  test('defineDocumentFieldAction', () => {
    expectTypeOf<typeof defineDocumentFieldAction>().toBeFunction()
  })
  test('defineDocumentInspector', () => {
    expectTypeOf<typeof defineDocumentInspector>().toBeFunction()
  })
  test('defineLocale', () => {
    expectTypeOf<typeof defineLocale>().toBeFunction()
  })
  test('defineLocaleResourceBundle', () => {
    expectTypeOf<typeof defineLocaleResourceBundle>().toBeFunction()
  })
  test('defineLocalesResources', () => {
    expectTypeOf<typeof defineLocalesResources>().toBeFunction()
  })
  test('definePlugin', () => {
    expectTypeOf<typeof definePlugin>().toBeFunction()
  })
  test('defineSearchFilter', () => {
    expectTypeOf<typeof defineSearchFilter>().toBeFunction()
  })
  test('defineSearchFilterOperators', () => {
    expectTypeOf<typeof defineSearchFilterOperators>().toBeFunction()
  })
  test('defineSearchOperator', () => {
    expectTypeOf<typeof defineSearchOperator>().toBeFunction()
  })
  test('DetailPreview', () => {
    expectTypeOf<typeof DetailPreview>().toBeFunction()
  })
  test('DiffFromTo', () => {
    expectTypeOf<typeof DiffFromTo>().toBeFunction()
  })
  test('DiffInspectWrapper', () => {
    expectTypeOf<typeof DiffInspectWrapper>().toBeFunction()
  })
  test('diffMatchPatch', () => {
    expectTypeOf<typeof diffMatchPatch>().toBeFunction()
  })
  test('DiffString', () => {
    expectTypeOf<typeof DiffString>().toBeFunction()
  })
  test('DiffStringSegment', () => {
    expectTypeOf<typeof DiffStringSegment>().toBeFunction()
  })
  test('DiffTooltip', () => {
    expectTypeOf<typeof DiffTooltip>().toBeFunction()
  })
  test('documentIdEquals', () => {
    expectTypeOf<typeof documentIdEquals>().toBeFunction()
  })
  test('DocumentPreviewPresence', () => {
    expectTypeOf<typeof DocumentPreviewPresence>().toBeFunction()
  })
  test('DocumentStatus', () => {
    expectTypeOf<typeof DocumentStatus>().toBeFunction()
  })
  test('DocumentStatusIndicator', () => {
    expectTypeOf<typeof DocumentStatusIndicator>().toBeFunction()
  })
  test('EditPortal', () => {
    expectTypeOf<typeof EditPortal>().toBeFunction()
  })
  test('EmailInput', () => {
    expectTypeOf<typeof EmailInput>().toBeFunction()
  })
  test('emitOperation', () => {
    expectTypeOf<typeof emitOperation>().toBeFunction()
  })
  test('encodePath', () => {
    expectTypeOf<typeof encodePath>().toBeFunction()
  })
  test('ErrorMessage', () => {
    expectTypeOf<typeof ErrorMessage>().toBeFunction()
  })
  test('EventsProvider', () => {
    expectTypeOf<typeof EventsProvider>().toBeFunction()
  })
  test('FieldChange', () => {
    expectTypeOf<typeof FieldChange>().toBeFunction()
  })
  test('FieldPresence', () => {
    expectTypeOf<typeof FieldPresence>().toBeFunction()
  })
  test('FileInput', () => {
    expectTypeOf<typeof FileInput>().toBeFunction()
  })
  test('Filters', () => {
    expectTypeOf<typeof Filters>().toBeFunction()
  })
  test('findIndex', () => {
    expectTypeOf<typeof findIndex>().toBeFunction()
  })
  test('formatRelativeLocalePublishDate', () => {
    expectTypeOf<typeof formatRelativeLocalePublishDate>().toBeFunction()
  })
  test('FormBuilder', () => {
    expectTypeOf<typeof FormBuilder>().toBeFunction()
  })
  test('FormFieldStatus', () => {
    expectTypeOf<typeof FormFieldStatus>().toBeFunction()
  })
  test('FormFieldValidationStatus', () => {
    expectTypeOf<typeof FormFieldValidationStatus>().toBeFunction()
  })
  test('FormProvider', () => {
    expectTypeOf<typeof FormProvider>().toBeFunction()
  })
  test('FormValueProvider', () => {
    expectTypeOf<typeof FormValueProvider>().toBeFunction()
  })
  test('fromMutationPatches', () => {
    expectTypeOf<typeof fromMutationPatches>().toBeFunction()
  })
  test('FromToArrow', () => {
    expectTypeOf<typeof FromToArrow>().toBeFunction()
  })
  test('getAnnotationAtPath', () => {
    expectTypeOf<typeof getAnnotationAtPath>().toBeFunction()
  })
  test('getAnnotationColor', () => {
    expectTypeOf<typeof getAnnotationColor>().toBeFunction()
  })
  test('getCalendarLabels', () => {
    expectTypeOf<typeof getCalendarLabels>().toBeFunction()
  })
  test('getConfigContextFromSource', () => {
    expectTypeOf<typeof getConfigContextFromSource>().toBeFunction()
  })
  test('getDiffAtPath', () => {
    expectTypeOf<typeof getDiffAtPath>().toBeFunction()
  })
  test('getDocumentPairPermissions', () => {
    expectTypeOf<typeof getDocumentPairPermissions>().toBeFunction()
  })
  test('getDocumentValuePermissions', () => {
    expectTypeOf<typeof getDocumentValuePermissions>().toBeFunction()
  })
  test('getDocumentVariantType', () => {
    expectTypeOf<typeof getDocumentVariantType>().toBeFunction()
  })
  test('getDraftId', () => {
    expectTypeOf<typeof getDraftId>().toBeFunction()
  })
  test('getExpandOperations', () => {
    expectTypeOf<typeof getExpandOperations>().toBeFunction()
  })
  test('getIdPair', () => {
    expectTypeOf<typeof getIdPair>().toBeFunction()
  })
  test('getInitialValueStream', () => {
    expectTypeOf<typeof getInitialValueStream>().toBeFunction()
  })
  test('getItemKey', () => {
    expectTypeOf<typeof getItemKey>().toBeFunction()
  })
  test('getItemKeySegment', () => {
    expectTypeOf<typeof getItemKeySegment>().toBeFunction()
  })
  test('getNamelessWorkspaceIdentifier', () => {
    expectTypeOf<typeof getNamelessWorkspaceIdentifier>().toBeFunction()
  })
  test('getPairListener', () => {
    expectTypeOf<typeof getPairListener>().toBeFunction()
  })
  test('getPreviewPaths', () => {
    expectTypeOf<typeof getPreviewPaths>().toBeFunction()
  })
  test('getPreviewStateObservable', () => {
    expectTypeOf<typeof getPreviewStateObservable>().toBeFunction()
  })
  test('getPreviewValueWithFallback', () => {
    expectTypeOf<typeof getPreviewValueWithFallback>().toBeFunction()
  })
  test('getProviderTitle', () => {
    expectTypeOf<typeof getProviderTitle>().toBeFunction()
  })
  test('getPublishedId', () => {
    expectTypeOf<typeof getPublishedId>().toBeFunction()
  })
  test('getReleaseIdFromReleaseDocumentId', () => {
    expectTypeOf<typeof getReleaseIdFromReleaseDocumentId>().toBeFunction()
  })
  test('getReleaseTone', () => {
    expectTypeOf<typeof getReleaseTone>().toBeFunction()
  })
  test('getSanityCreateLinkMetadata', () => {
    expectTypeOf<typeof getSanityCreateLinkMetadata>().toBeFunction()
  })
  test('getSchemaTypeTitle', () => {
    expectTypeOf<typeof getSchemaTypeTitle>().toBeFunction()
  })
  test('getTemplatePermissions', () => {
    expectTypeOf<typeof getTemplatePermissions>().toBeFunction()
  })
  test('getValueAtPath', () => {
    expectTypeOf<typeof getValueAtPath>().toBeFunction()
  })
  test('getValueError', () => {
    expectTypeOf<typeof getValueError>().toBeFunction()
  })
  test('getVersionFromId', () => {
    expectTypeOf<typeof getVersionFromId>().toBeFunction()
  })
  test('getVersionId', () => {
    expectTypeOf<typeof getVersionId>().toBeFunction()
  })
  test('getWorkspaceIdentifier', () => {
    expectTypeOf<typeof getWorkspaceIdentifier>().toBeFunction()
  })
  test('grantsPermissionOn', () => {
    expectTypeOf<typeof grantsPermissionOn>().toBeFunction()
  })
  test('GroupChange', () => {
    expectTypeOf<typeof GroupChange>().toBeFunction()
  })
  test('hasCommentMessageValue', () => {
    expectTypeOf<typeof hasCommentMessageValue>().toBeFunction()
  })
  test('Hotkeys', () => {
    expectTypeOf<typeof Hotkeys>().toBeFunction()
  })
  test('idMatchesPerspective', () => {
    expectTypeOf<typeof idMatchesPerspective>().toBeFunction()
  })
  test('ImageInput', () => {
    expectTypeOf<typeof ImageInput>().toBeFunction()
  })
  test('inc', () => {
    expectTypeOf<typeof inc>().toBeFunction()
  })
  test('InlinePreview', () => {
    expectTypeOf<typeof InlinePreview>().toBeFunction()
  })
  test('insert', () => {
    expectTypeOf<typeof insert>().toBeFunction()
  })
  test('InsufficientPermissionsMessage', () => {
    expectTypeOf<typeof InsufficientPermissionsMessage>().toBeFunction()
  })
  test('IntentButton', () => {
    expectTypeOf<typeof IntentButton>().toBeFunction()
  })
  test('isAddedItemDiff', () => {
    expectTypeOf<typeof isAddedItemDiff>().toBeFunction()
  })
  test('isArray', () => {
    expectTypeOf<typeof isArray>().toBeFunction()
  })
  test('isArrayOfBlocksInputProps', () => {
    expectTypeOf<typeof isArrayOfBlocksInputProps>().toBeFunction()
  })
  test('isArrayOfObjectsInputProps', () => {
    expectTypeOf<typeof isArrayOfObjectsInputProps>().toBeFunction()
  })
  test('isArrayOfPrimitivesInputProps', () => {
    expectTypeOf<typeof isArrayOfPrimitivesInputProps>().toBeFunction()
  })
  test('isAuthStore', () => {
    expectTypeOf<typeof isAuthStore>().toBeFunction()
  })
  test('isBooleanInputProps', () => {
    expectTypeOf<typeof isBooleanInputProps>().toBeFunction()
  })
  test('isBuilder', () => {
    expectTypeOf<typeof isBuilder>().toBeFunction()
  })
  test('isCookielessCompatibleLoginMethod', () => {
    expectTypeOf<typeof isCookielessCompatibleLoginMethod>().toBeFunction()
  })
  test('_isCustomDocumentTypeDefinition', () => {
    expectTypeOf<typeof _isCustomDocumentTypeDefinition>().toBeFunction()
  })
  test('isDraft', () => {
    expectTypeOf<typeof isDraft>().toBeFunction()
  })
  test('isDraftId', () => {
    expectTypeOf<typeof isDraftId>().toBeFunction()
  })
  test('isDraftPerspective', () => {
    expectTypeOf<typeof isDraftPerspective>().toBeFunction()
  })
  test('isEmptyObject', () => {
    expectTypeOf<typeof isEmptyObject>().toBeFunction()
  })
  test('isFieldChange', () => {
    expectTypeOf<typeof isFieldChange>().toBeFunction()
  })
  test('isGoingToUnpublish', () => {
    expectTypeOf<typeof isGoingToUnpublish>().toBeFunction()
  })
  test('isGroupChange', () => {
    expectTypeOf<typeof isGroupChange>().toBeFunction()
  })
  test('IsLastPaneProvider', () => {
    expectTypeOf<typeof IsLastPaneProvider>().toBeFunction()
  })
  test('isNewDocument', () => {
    expectTypeOf<typeof isNewDocument>().toBeFunction()
  })
  test('isNonNullable', () => {
    expectTypeOf<typeof isNonNullable>().toBeFunction()
  })
  test('isNumberInputProps', () => {
    expectTypeOf<typeof isNumberInputProps>().toBeFunction()
  })
  test('isObjectInputProps', () => {
    expectTypeOf<typeof isObjectInputProps>().toBeFunction()
  })
  test('isObjectItemProps', () => {
    expectTypeOf<typeof isObjectItemProps>().toBeFunction()
  })
  test('isPerspectiveRaw', () => {
    expectTypeOf<typeof isPerspectiveRaw>().toBeFunction()
  })
  test('isPerspectiveWriteable', () => {
    expectTypeOf<typeof isPerspectiveWriteable>().toBeFunction()
  })
  test('isPublishedId', () => {
    expectTypeOf<typeof isPublishedId>().toBeFunction()
  })
  test('isPublishedPerspective', () => {
    expectTypeOf<typeof isPublishedPerspective>().toBeFunction()
  })
  test('isRecord', () => {
    expectTypeOf<typeof isRecord>().toBeFunction()
  })
  test('isReleaseDocument', () => {
    expectTypeOf<typeof isReleaseDocument>().toBeFunction()
  })
  test('isReleaseScheduledOrScheduling', () => {
    expectTypeOf<typeof isReleaseScheduledOrScheduling>().toBeFunction()
  })
  test('isRemovedItemDiff', () => {
    expectTypeOf<typeof isRemovedItemDiff>().toBeFunction()
  })
  test('isSanityCreateExcludedType', () => {
    expectTypeOf<typeof isSanityCreateExcludedType>().toBeFunction()
  })
  test('isSanityCreateLinked', () => {
    expectTypeOf<typeof isSanityCreateLinked>().toBeFunction()
  })
  test('isSanityCreateLinkedDocument', () => {
    expectTypeOf<typeof isSanityCreateLinkedDocument>().toBeFunction()
  })
  test('isSanityCreateStartCompatibleDoc', () => {
    expectTypeOf<typeof isSanityCreateStartCompatibleDoc>().toBeFunction()
  })
  test('_isSanityDocumentTypeDefinition', () => {
    expectTypeOf<typeof _isSanityDocumentTypeDefinition>().toBeFunction()
  })
  test('isString', () => {
    expectTypeOf<typeof isString>().toBeFunction()
  })
  test('isStringInputProps', () => {
    expectTypeOf<typeof isStringInputProps>().toBeFunction()
  })
  test('isSystemBundle', () => {
    expectTypeOf<typeof isSystemBundle>().toBeFunction()
  })
  test('isSystemBundleName', () => {
    expectTypeOf<typeof isSystemBundleName>().toBeFunction()
  })
  test('isTextSelectionComment', () => {
    expectTypeOf<typeof isTextSelectionComment>().toBeFunction()
  })
  test('isTruthy', () => {
    expectTypeOf<typeof isTruthy>().toBeFunction()
  })
  test('isUnchangedDiff', () => {
    expectTypeOf<typeof isUnchangedDiff>().toBeFunction()
  })
  test('isValidAnnouncementAudience', () => {
    expectTypeOf<typeof isValidAnnouncementAudience>().toBeFunction()
  })
  test('isValidAnnouncementRole', () => {
    expectTypeOf<typeof isValidAnnouncementRole>().toBeFunction()
  })
  test('isVersionId', () => {
    expectTypeOf<typeof isVersionId>().toBeFunction()
  })
  test('LegacyLayerProvider', () => {
    expectTypeOf<typeof LegacyLayerProvider>().toBeFunction()
  })
  test('LinearProgress', () => {
    expectTypeOf<typeof LinearProgress>().toBeFunction()
  })
  test('listenQuery', () => {
    expectTypeOf<typeof listenQuery>().toBeFunction()
  })
  test('LoadingBlock', () => {
    expectTypeOf<typeof LoadingBlock>().toBeFunction()
  })
  test('LocaleProvider', () => {
    expectTypeOf<typeof LocaleProvider>().toBeFunction()
  })
  test('LocaleProviderBase', () => {
    expectTypeOf<typeof LocaleProviderBase>().toBeFunction()
  })
  test('matchWorkspace', () => {
    expectTypeOf<typeof matchWorkspace>().toBeFunction()
  })
  test('MediaPreview', () => {
    expectTypeOf<typeof MediaPreview>().toBeFunction()
  })
  test('MemberFieldError', () => {
    expectTypeOf<typeof MemberFieldError>().toBeFunction()
  })
  test('MemberItemError', () => {
    expectTypeOf<typeof MemberItemError>().toBeFunction()
  })
  test('MetaInfo', () => {
    expectTypeOf<typeof MetaInfo>().toBeFunction()
  })
  test('newDraftFrom', () => {
    expectTypeOf<typeof newDraftFrom>().toBeFunction()
  })
  test('NoChanges', () => {
    expectTypeOf<typeof NoChanges>().toBeFunction()
  })
  test('noop', () => {
    expectTypeOf<typeof noop>().toBeFunction()
  })
  test('normalizeIndexSegment', () => {
    expectTypeOf<typeof normalizeIndexSegment>().toBeFunction()
  })
  test('normalizeIndexTupleSegment', () => {
    expectTypeOf<typeof normalizeIndexTupleSegment>().toBeFunction()
  })
  test('normalizeKeySegment', () => {
    expectTypeOf<typeof normalizeKeySegment>().toBeFunction()
  })
  test('normalizePathSegment', () => {
    expectTypeOf<typeof normalizePathSegment>().toBeFunction()
  })
  test('NumberInput', () => {
    expectTypeOf<typeof NumberInput>().toBeFunction()
  })
  test('ObjectInputMembers', () => {
    expectTypeOf<typeof ObjectInputMembers>().toBeFunction()
  })
  test('pathsAreEqual', () => {
    expectTypeOf<typeof pathsAreEqual>().toBeFunction()
  })
  test('pathToString', () => {
    expectTypeOf<typeof pathToString>().toBeFunction()
  })
  test('PerspectiveProvider', () => {
    expectTypeOf<typeof PerspectiveProvider>().toBeFunction()
  })
  test('PopoverDialog', () => {
    expectTypeOf<typeof PopoverDialog>().toBeFunction()
  })
  test('prefixPath', () => {
    expectTypeOf<typeof prefixPath>().toBeFunction()
  })
  test('prepareConfig', () => {
    expectTypeOf<typeof prepareConfig>().toBeFunction()
  })
  test('prepareForPreview', () => {
    expectTypeOf<typeof prepareForPreview>().toBeFunction()
  })
  test('prepareTemplates', () => {
    expectTypeOf<typeof prepareTemplates>().toBeFunction()
  })
  test('PresenceOverlay', () => {
    expectTypeOf<typeof PresenceOverlay>().toBeFunction()
  })
  test('PresenceScope', () => {
    expectTypeOf<typeof PresenceScope>().toBeFunction()
  })
  test('Preview', () => {
    expectTypeOf<typeof Preview>().toBeFunction()
  })
  test('PreviewLoader', () => {
    expectTypeOf<typeof PreviewLoader>().toBeFunction()
  })
  test('ReferenceInput', () => {
    expectTypeOf<typeof ReferenceInput>().toBeFunction()
  })
  test('ReferenceInputOptionsProvider', () => {
    expectTypeOf<typeof ReferenceInputOptionsProvider>().toBeFunction()
  })
  test('RelativeTime', () => {
    expectTypeOf<typeof RelativeTime>().toBeFunction()
  })
  test('ReleaseAvatar', () => {
    expectTypeOf<typeof ReleaseAvatar>().toBeFunction()
  })
  test('removeDupes', () => {
    expectTypeOf<typeof removeDupes>().toBeFunction()
  })
  test('removeUndefinedLocaleResources', () => {
    expectTypeOf<typeof removeUndefinedLocaleResources>().toBeFunction()
  })
  test('renderStudio', () => {
    expectTypeOf<typeof renderStudio>().toBeFunction()
  })
  test('renderStudio', () => {
    expectTypeOf<typeof renderStudio>().toBeFunction()
  })
  test('renderStudio', () => {
    expectTypeOf<typeof renderStudio>().toBeFunction()
  })
  test('Resizable', () => {
    expectTypeOf<typeof Resizable>().toBeFunction()
  })
  test('resolveConditionalProperty', () => {
    expectTypeOf<typeof resolveConditionalProperty>().toBeFunction()
  })
  test('resolveConfig', () => {
    expectTypeOf<typeof resolveConfig>().toBeFunction()
  })
  test('resolveDiffComponent', () => {
    expectTypeOf<typeof resolveDiffComponent>().toBeFunction()
  })
  test('resolveInitialObjectValue', () => {
    expectTypeOf<typeof resolveInitialObjectValue>().toBeFunction()
  })
  test('resolveInitialValue', () => {
    expectTypeOf<typeof resolveInitialValue>().toBeFunction()
  })
  test('resolveSchemaTypes', () => {
    expectTypeOf<typeof resolveSchemaTypes>().toBeFunction()
  })
  test('ResourceCacheProvider', () => {
    expectTypeOf<typeof ResourceCacheProvider>().toBeFunction()
  })
  test('SanityCreateConfigProvider', () => {
    expectTypeOf<typeof SanityCreateConfigProvider>().toBeFunction()
  })
  test('SearchDialog', () => {
    expectTypeOf<typeof SearchDialog>().toBeFunction()
  })
  test('SearchPopover', () => {
    expectTypeOf<typeof SearchPopover>().toBeFunction()
  })
  test('SearchProvider', () => {
    expectTypeOf<typeof SearchProvider>().toBeFunction()
  })
  test('SearchResultItemPreview', () => {
    expectTypeOf<typeof SearchResultItemPreview>().toBeFunction()
  })
  test('SelectInput', () => {
    expectTypeOf<typeof SelectInput>().toBeFunction()
  })
  test('serializeError', () => {
    expectTypeOf<typeof serializeError>().toBeFunction()
  })
  test('set', () => {
    expectTypeOf<typeof set>().toBeFunction()
  })
  test('setAtPath', () => {
    expectTypeOf<typeof setAtPath>().toBeFunction()
  })
  test('setIfMissing', () => {
    expectTypeOf<typeof setIfMissing>().toBeFunction()
  })
  test('sliceString', () => {
    expectTypeOf<typeof sliceString>().toBeFunction()
  })
  test('SlugInput', () => {
    expectTypeOf<typeof SlugInput>().toBeFunction()
  })
  test('SourceProvider', () => {
    expectTypeOf<typeof SourceProvider>().toBeFunction()
  })
  test('StringInput', () => {
    expectTypeOf<typeof StringInput>().toBeFunction()
  })
  test('stringToPath', () => {
    expectTypeOf<typeof stringToPath>().toBeFunction()
  })
  test('Studio', () => {
    expectTypeOf<typeof Studio>().toBeFunction()
  })
  test('StudioAnnouncementsCard', () => {
    expectTypeOf<typeof StudioAnnouncementsCard>().toBeFunction()
  })
  test('StudioAnnouncementsDialog', () => {
    expectTypeOf<typeof StudioAnnouncementsDialog>().toBeFunction()
  })
  test('StudioLayout', () => {
    expectTypeOf<typeof StudioLayout>().toBeFunction()
  })
  test('StudioLayoutComponent', () => {
    expectTypeOf<typeof StudioLayoutComponent>().toBeFunction()
  })
  test('StudioLogo', () => {
    expectTypeOf<typeof StudioLogo>().toBeFunction()
  })
  test('StudioNavbar', () => {
    expectTypeOf<typeof StudioNavbar>().toBeFunction()
  })
  test('StudioProvider', () => {
    expectTypeOf<typeof StudioProvider>().toBeFunction()
  })
  test('StudioToolMenu', () => {
    expectTypeOf<typeof StudioToolMenu>().toBeFunction()
  })
  test('TagsArrayInput', () => {
    expectTypeOf<typeof TagsArrayInput>().toBeFunction()
  })
  test('TelephoneInput', () => {
    expectTypeOf<typeof TelephoneInput>().toBeFunction()
  })
  test('TemplatePreview', () => {
    expectTypeOf<typeof TemplatePreview>().toBeFunction()
  })
  test('TextInput', () => {
    expectTypeOf<typeof TextInput>().toBeFunction()
  })
  test('toMutationPatches', () => {
    expectTypeOf<typeof toMutationPatches>().toBeFunction()
  })
  test('Translate', () => {
    expectTypeOf<typeof Translate>().toBeFunction()
  })
  test('truncateString', () => {
    expectTypeOf<typeof truncateString>().toBeFunction()
  })
  test('UniversalArrayInput', () => {
    expectTypeOf<typeof UniversalArrayInput>().toBeFunction()
  })
  test('unset', () => {
    expectTypeOf<typeof unset>().toBeFunction()
  })
  test('unstable_useObserveDocument', () => {
    expectTypeOf<typeof unstable_useObserveDocument>().toBeFunction()
  })
  test('unstable_useValuePreview', () => {
    expectTypeOf<typeof unstable_useValuePreview>().toBeFunction()
  })
  test('UpsellDescriptionSerializer', () => {
    expectTypeOf<typeof UpsellDescriptionSerializer>().toBeFunction()
  })
  test('UrlInput', () => {
    expectTypeOf<typeof UrlInput>().toBeFunction()
  })
  test('useActiveReleases', () => {
    expectTypeOf<typeof useActiveReleases>().toBeFunction()
  })
  test('useActiveWorkspace', () => {
    expectTypeOf<typeof useActiveWorkspace>().toBeFunction()
  })
  test('useAddonDataset', () => {
    expectTypeOf<typeof useAddonDataset>().toBeFunction()
  })
  test('useAnnotationColor', () => {
    expectTypeOf<typeof useAnnotationColor>().toBeFunction()
  })
  test('useArchivedReleases', () => {
    expectTypeOf<typeof useArchivedReleases>().toBeFunction()
  })
  test('useChangeIndicatorsReportedValues', () => {
    expectTypeOf<typeof useChangeIndicatorsReportedValues>().toBeFunction()
  })
  test('useClient', () => {
    expectTypeOf<typeof useClient>().toBeFunction()
  })
  test('useClient', () => {
    expectTypeOf<typeof useClient>().toBeFunction()
  })
  test('useColorScheme', () => {
    expectTypeOf<typeof useColorScheme>().toBeFunction()
  })
  test('useColorSchemeInternalValue', () => {
    expectTypeOf<typeof useColorSchemeInternalValue>().toBeFunction()
  })
  test('useColorSchemeOptions', () => {
    expectTypeOf<typeof useColorSchemeOptions>().toBeFunction()
  })
  test('useColorSchemeSetValue', () => {
    expectTypeOf<typeof useColorSchemeSetValue>().toBeFunction()
  })
  test('useColorSchemeValue', () => {
    expectTypeOf<typeof useColorSchemeValue>().toBeFunction()
  })
  test('useComlinkStore', () => {
    expectTypeOf<typeof useComlinkStore>().toBeFunction()
  })
  test('useComments', () => {
    expectTypeOf<typeof useComments>().toBeFunction()
  })
  test('useCommentsEnabled', () => {
    expectTypeOf<typeof useCommentsEnabled>().toBeFunction()
  })
  test('useCommentsSelectedPath', () => {
    expectTypeOf<typeof useCommentsSelectedPath>().toBeFunction()
  })
  test('useCommentsTelemetry', () => {
    expectTypeOf<typeof useCommentsTelemetry>().toBeFunction()
  })
  test('useConditionalToast', () => {
    expectTypeOf<typeof useConditionalToast>().toBeFunction()
  })
  test('useConfigContextFromSource', () => {
    expectTypeOf<typeof useConfigContextFromSource>().toBeFunction()
  })
  test('useConnectionState', () => {
    expectTypeOf<typeof useConnectionState>().toBeFunction()
  })
  test('useConnectionStatusStore', () => {
    expectTypeOf<typeof useConnectionStatusStore>().toBeFunction()
  })
  test('useCopyErrorDetails', () => {
    expectTypeOf<typeof useCopyErrorDetails>().toBeFunction()
  })
  test('useCurrentLocale', () => {
    expectTypeOf<typeof useCurrentLocale>().toBeFunction()
  })
  test('useCurrentUser', () => {
    expectTypeOf<typeof useCurrentUser>().toBeFunction()
  })
  test('useDataset', () => {
    expectTypeOf<typeof useDataset>().toBeFunction()
  })
  test('useDateTimeFormat', () => {
    expectTypeOf<typeof useDateTimeFormat>().toBeFunction()
  })
  test('useDidUpdate', () => {
    expectTypeOf<typeof useDidUpdate>().toBeFunction()
  })
  test('useDiffAnnotationColor', () => {
    expectTypeOf<typeof useDiffAnnotationColor>().toBeFunction()
  })
  test('useDocumentChange', () => {
    expectTypeOf<typeof useDocumentChange>().toBeFunction()
  })
  test('useDocumentForm', () => {
    expectTypeOf<typeof useDocumentForm>().toBeFunction()
  })
  test('useDocumentOperation', () => {
    expectTypeOf<typeof useDocumentOperation>().toBeFunction()
  })
  test('useDocumentOperationEvent', () => {
    expectTypeOf<typeof useDocumentOperationEvent>().toBeFunction()
  })
  test('useDocumentPairPermissions', () => {
    expectTypeOf<typeof useDocumentPairPermissions>().toBeFunction()
  })
  test('useDocumentPresence', () => {
    expectTypeOf<typeof useDocumentPresence>().toBeFunction()
  })
  test('useDocumentPreviewStore', () => {
    expectTypeOf<typeof useDocumentPreviewStore>().toBeFunction()
  })
  test('useDocumentStore', () => {
    expectTypeOf<typeof useDocumentStore>().toBeFunction()
  })
  test('useDocumentType', () => {
    expectTypeOf<typeof useDocumentType>().toBeFunction()
  })
  test('useDocumentValuePermissions', () => {
    expectTypeOf<typeof useDocumentValuePermissions>().toBeFunction()
  })
  test('useDocumentValues', () => {
    expectTypeOf<typeof useDocumentValues>().toBeFunction()
  })
  test('useDocumentVersionInfo', () => {
    expectTypeOf<typeof useDocumentVersionInfo>().toBeFunction()
  })
  test('useDocumentVersions', () => {
    expectTypeOf<typeof useDocumentVersions>().toBeFunction()
  })
  test('useEditState', () => {
    expectTypeOf<typeof useEditState>().toBeFunction()
  })
  test('useEvents', () => {
    expectTypeOf<typeof useEvents>().toBeFunction()
  })
  test('useEventsStore', () => {
    expectTypeOf<typeof useEventsStore>().toBeFunction()
  })
  test('useExcludedPerspective', () => {
    expectTypeOf<typeof useExcludedPerspective>().toBeFunction()
  })
  test('useFeatureEnabled', () => {
    expectTypeOf<typeof useFeatureEnabled>().toBeFunction()
  })
  test('useFieldActions', () => {
    expectTypeOf<typeof useFieldActions>().toBeFunction()
  })
  test('useFormattedDuration', () => {
    expectTypeOf<typeof useFormattedDuration>().toBeFunction()
  })
  test('useFormBuilder', () => {
    expectTypeOf<typeof useFormBuilder>().toBeFunction()
  })
  test('useFormCallbacks', () => {
    expectTypeOf<typeof useFormCallbacks>().toBeFunction()
  })
  test('useFormState', () => {
    expectTypeOf<typeof useFormState>().toBeFunction()
  })
  test('useFormValue', () => {
    expectTypeOf<typeof useFormValue>().toBeFunction()
  })
  test('useGetFormValue', () => {
    expectTypeOf<typeof useGetFormValue>().toBeFunction()
  })
  test('useGetI18nText', () => {
    expectTypeOf<typeof useGetI18nText>().toBeFunction()
  })
  test('useGlobalCopyPasteElementHandler', () => {
    expectTypeOf<typeof useGlobalCopyPasteElementHandler>().toBeFunction()
  })
  test('useGlobalPresence', () => {
    expectTypeOf<typeof useGlobalPresence>().toBeFunction()
  })
  test('useGrantsStore', () => {
    expectTypeOf<typeof useGrantsStore>().toBeFunction()
  })
  test('useHistoryStore', () => {
    expectTypeOf<typeof useHistoryStore>().toBeFunction()
  })
  test('useHoveredField', () => {
    expectTypeOf<typeof useHoveredField>().toBeFunction()
  })
  test('useI18nText', () => {
    expectTypeOf<typeof useI18nText>().toBeFunction()
  })
  test('useInitialValue', () => {
    expectTypeOf<typeof useInitialValue>().toBeFunction()
  })
  test('useInitialValueResolverContext', () => {
    expectTypeOf<typeof useInitialValueResolverContext>().toBeFunction()
  })
  test('useKeyValueStore', () => {
    expectTypeOf<typeof useKeyValueStore>().toBeFunction()
  })
  test('useListFormat', () => {
    expectTypeOf<typeof useListFormat>().toBeFunction()
  })
  test('useLoadable', () => {
    expectTypeOf<typeof useLoadable>().toBeFunction()
  })
  test('useLoadable', () => {
    expectTypeOf<typeof useLoadable>().toBeFunction()
  })
  test('useLocale', () => {
    expectTypeOf<typeof useLocale>().toBeFunction()
  })
  test('useManageFavorite', () => {
    expectTypeOf<typeof useManageFavorite>().toBeFunction()
  })
  test('useMiddlewareComponents', () => {
    expectTypeOf<typeof useMiddlewareComponents>().toBeFunction()
  })
  test('useNumberFormat', () => {
    expectTypeOf<typeof useNumberFormat>().toBeFunction()
  })
  test('useOnScroll', () => {
    expectTypeOf<typeof useOnScroll>().toBeFunction()
  })
  test('usePerspective', () => {
    expectTypeOf<typeof usePerspective>().toBeFunction()
  })
  test('usePresenceStore', () => {
    expectTypeOf<typeof usePresenceStore>().toBeFunction()
  })
  test('usePreviewCard', () => {
    expectTypeOf<typeof usePreviewCard>().toBeFunction()
  })
  test('useProject', () => {
    expectTypeOf<typeof useProject>().toBeFunction()
  })
  test('useProjectDatasets', () => {
    expectTypeOf<typeof useProjectDatasets>().toBeFunction()
  })
  test('useProjectId', () => {
    expectTypeOf<typeof useProjectId>().toBeFunction()
  })
  test('useProjectStore', () => {
    expectTypeOf<typeof useProjectStore>().toBeFunction()
  })
  test('UserAvatar', () => {
    expectTypeOf<typeof UserAvatar>().toBeFunction()
  })
  test('UserColorManagerProvider', () => {
    expectTypeOf<typeof UserColorManagerProvider>().toBeFunction()
  })
  test('useReferenceInputOptions', () => {
    expectTypeOf<typeof useReferenceInputOptions>().toBeFunction()
  })
  test('useReferringDocuments', () => {
    expectTypeOf<typeof useReferringDocuments>().toBeFunction()
  })
  test('useRelativeTime', () => {
    expectTypeOf<typeof useRelativeTime>().toBeFunction()
  })
  test('useReleasesIds', () => {
    expectTypeOf<typeof useReleasesIds>().toBeFunction()
  })
  test('useRenderingContextStore', () => {
    expectTypeOf<typeof useRenderingContextStore>().toBeFunction()
  })
  test('useResolveInitialValueForType', () => {
    expectTypeOf<typeof useResolveInitialValueForType>().toBeFunction()
  })
  test('useResourceCache', () => {
    expectTypeOf<typeof useResourceCache>().toBeFunction()
  })
  test('useReviewChanges', () => {
    expectTypeOf<typeof useReviewChanges>().toBeFunction()
  })
  test('userHasRole', () => {
    expectTypeOf<typeof userHasRole>().toBeFunction()
  })
  test('useRovingFocus', () => {
    expectTypeOf<typeof useRovingFocus>().toBeFunction()
  })
  test('useSanityCreateConfig', () => {
    expectTypeOf<typeof useSanityCreateConfig>().toBeFunction()
  })
  test('useSchema', () => {
    expectTypeOf<typeof useSchema>().toBeFunction()
  })
  test('useSearchMaxFieldDepth', () => {
    expectTypeOf<typeof useSearchMaxFieldDepth>().toBeFunction()
  })
  test('useSearchState', () => {
    expectTypeOf<typeof useSearchState>().toBeFunction()
  })
  test('useSetPerspective', () => {
    expectTypeOf<typeof useSetPerspective>().toBeFunction()
  })
  test('useSource', () => {
    expectTypeOf<typeof useSource>().toBeFunction()
  })
  test('useSyncState', () => {
    expectTypeOf<typeof useSyncState>().toBeFunction()
  })
  test('useTemplatePermissions', () => {
    expectTypeOf<typeof useTemplatePermissions>().toBeFunction()
  })
  test('useTemplates', () => {
    expectTypeOf<typeof useTemplates>().toBeFunction()
  })
  test('useThrottledCallback', () => {
    expectTypeOf<typeof useThrottledCallback>().toBeFunction()
  })
  test('useTimeAgo', () => {
    expectTypeOf<typeof useTimeAgo>().toBeFunction()
  })
  test('useTimelineSelector', () => {
    expectTypeOf<typeof useTimelineSelector>().toBeFunction()
  })
  test('useTimelineStore', () => {
    expectTypeOf<typeof useTimelineStore>().toBeFunction()
  })
  test('useTools', () => {
    expectTypeOf<typeof useTools>().toBeFunction()
  })
  test('useTrackerStore', () => {
    expectTypeOf<typeof useTrackerStore>().toBeFunction()
  })
  test('useTrackerStoreReporter', () => {
    expectTypeOf<typeof useTrackerStoreReporter>().toBeFunction()
  })
  test('useTranslation', () => {
    expectTypeOf<typeof useTranslation>().toBeFunction()
  })
  test('useTreeEditingEnabled', () => {
    expectTypeOf<typeof useTreeEditingEnabled>().toBeFunction()
  })
  test('useUnique', () => {
    expectTypeOf<typeof useUnique>().toBeFunction()
  })
  test('useUnitFormatter', () => {
    expectTypeOf<typeof useUnitFormatter>().toBeFunction()
  })
  test('useUser', () => {
    expectTypeOf<typeof useUser>().toBeFunction()
  })
  test('useUserColor', () => {
    expectTypeOf<typeof useUserColor>().toBeFunction()
  })
  test('useUserColorManager', () => {
    expectTypeOf<typeof useUserColorManager>().toBeFunction()
  })
  test('useUserListWithPermissions', () => {
    expectTypeOf<typeof useUserListWithPermissions>().toBeFunction()
  })
  test('useUserStore', () => {
    expectTypeOf<typeof useUserStore>().toBeFunction()
  })
  test('useValidationStatus', () => {
    expectTypeOf<typeof useValidationStatus>().toBeFunction()
  })
  test('useVersionOperations', () => {
    expectTypeOf<typeof useVersionOperations>().toBeFunction()
  })
  test('useVirtualizerScrollInstance', () => {
    expectTypeOf<typeof useVirtualizerScrollInstance>().toBeFunction()
  })
  test('useWorkspace', () => {
    expectTypeOf<typeof useWorkspace>().toBeFunction()
  })
  test('useWorkspaceLoader', () => {
    expectTypeOf<typeof useWorkspaceLoader>().toBeFunction()
  })
  test('useWorkspaces', () => {
    expectTypeOf<typeof useWorkspaces>().toBeFunction()
  })
  test('useZIndex', () => {
    expectTypeOf<typeof useZIndex>().toBeFunction()
  })
  test('validateBasePaths', () => {
    expectTypeOf<typeof validateBasePaths>().toBeFunction()
  })
  test('validateDocument', () => {
    expectTypeOf<typeof validateDocument>().toBeFunction()
  })
  test('validateNames', () => {
    expectTypeOf<typeof validateNames>().toBeFunction()
  })
  test('validateWorkspaces', () => {
    expectTypeOf<typeof validateWorkspaces>().toBeFunction()
  })
  test('ValueError', () => {
    expectTypeOf<typeof ValueError>().toBeFunction()
  })
  test('VirtualizerScrollInstanceProvider', () => {
    expectTypeOf<typeof VirtualizerScrollInstanceProvider>().toBeFunction()
  })
  test('visitDiff', () => {
    expectTypeOf<typeof visitDiff>().toBeFunction()
  })
  test('WithReferringDocuments', () => {
    expectTypeOf<typeof WithReferringDocuments>().toBeFunction()
  })
  test('WorkspaceLoader', () => {
    expectTypeOf<typeof WorkspaceLoader>().toBeFunction()
  })
  test('WorkspaceProvider', () => {
    expectTypeOf<typeof WorkspaceProvider>().toBeFunction()
  })
  test('WorkspacesProvider', () => {
    expectTypeOf<typeof WorkspacesProvider>().toBeFunction()
  })
  test('ZIndexProvider', () => {
    expectTypeOf<typeof ZIndexProvider>().toBeFunction()
  })
  test('ActionComponent', () => {
    expectTypeOf<ActionComponent<any>>().toBeObject()
  })
  test('ActiveToolLayoutProps', () => {
    expectTypeOf<ActiveToolLayoutProps>().toBeObject()
  })
  test('ActiveWorkspaceMatcherContextValue', () => {
    expectTypeOf<ActiveWorkspaceMatcherContextValue>().toBeObject()
  })
  test('ActiveWorkspaceMatcherProps', () => {
    expectTypeOf<ActiveWorkspaceMatcherProps>().toBeObject()
  })
  test('AddonDatasetContextValue', () => {
    expectTypeOf<AddonDatasetContextValue>().toBeObject()
  })
  test('Annotation', () => {
    expectTypeOf<Annotation>().not.toBeNever()
  })
  test('AnnotationDetails', () => {
    expectTypeOf<AnnotationDetails>().not.toBeNever()
  })
  test('ApiConfig', () => {
    expectTypeOf<ApiConfig>().toBeObject()
  })
  test('AppsOptions', () => {
    expectTypeOf<AppsOptions>().not.toBeNever()
  })
  test('ArrayDiff', () => {
    expectTypeOf<ArrayDiff<any>>().not.toBeNever()
  })
  test('ArrayFieldProps', () => {
    expectTypeOf<ArrayFieldProps>().toBeObject()
  })
  test('ArrayInputCopyEvent', () => {
    expectTypeOf<ArrayInputCopyEvent<any>>().toBeObject()
  })
  test('ArrayInputFunctionsProps', () => {
    expectTypeOf<ArrayInputFunctionsProps<any, any>>().toBeObject()
  })
  test('ArrayInputInsertEvent', () => {
    expectTypeOf<ArrayInputInsertEvent<any>>().toBeObject()
  })
  test('ArrayInputMoveItemEvent', () => {
    expectTypeOf<ArrayInputMoveItemEvent>().toBeObject()
  })
  test('ArrayItemError', () => {
    expectTypeOf<ArrayItemError>().toBeObject()
  })
  test('ArrayItemMetadata', () => {
    expectTypeOf<ArrayItemMetadata>().toBeObject()
  })
  test('ArrayOfObjectsFormNode', () => {
    expectTypeOf<ArrayOfObjectsFormNode<any, any>>().toBeObject()
  })
  test('ArrayOfObjectsInputMembersProps', () => {
    expectTypeOf<ArrayOfObjectsInputMembersProps>().toBeObject()
  })
  test('ArrayOfObjectsInputProps', () => {
    expectTypeOf<ArrayOfObjectsInputProps<any, any>>().toBeObject()
  })
  test('ArrayOfObjectsItemMember', () => {
    expectTypeOf<ArrayOfObjectsItemMember<any>>().toBeObject()
  })
  test('ArrayOfObjectsMember', () => {
    expectTypeOf<ArrayOfObjectsMember>().not.toBeNever()
  })
  test('ArrayOfObjectsMemberProps', () => {
    expectTypeOf<ArrayOfObjectsMemberProps>().toBeObject()
  })
  test('ArrayOfPrimitivesElementType', () => {
    expectTypeOf<ArrayOfPrimitivesElementType<any>>().not.toBeNever()
  })
  test('ArrayOfPrimitivesFieldProps', () => {
    expectTypeOf<ArrayOfPrimitivesFieldProps>().toBeObject()
  })
  test('ArrayOfPrimitivesFormNode', () => {
    expectTypeOf<ArrayOfPrimitivesFormNode<any, any>>().toBeObject()
  })
  test('ArrayOfPrimitivesInput', () => {
    expectTypeOf<ArrayOfPrimitivesInput>().not.toBeNever()
  })
  test('ArrayOfPrimitivesInputProps', () => {
    expectTypeOf<ArrayOfPrimitivesInputProps<any, any>>().toBeObject()
  })
  test('ArrayOfPrimitivesItemMember', () => {
    expectTypeOf<ArrayOfPrimitivesItemMember<any>>().toBeObject()
  })
  test('ArrayOfPrimitivesMember', () => {
    expectTypeOf<ArrayOfPrimitivesMember>().not.toBeNever()
  })
  test('AssetSourceResolver', () => {
    expectTypeOf<AssetSourceResolver>().not.toBeNever()
  })
  test('AsyncComposableOption', () => {
    expectTypeOf<AsyncComposableOption<any, any>>().not.toBeNever()
  })
  test('AsyncConfigPropertyReducer', () => {
    expectTypeOf<AsyncConfigPropertyReducer<any, any>>().not.toBeNever()
  })
  test('AuthConfig', () => {
    expectTypeOf<AuthConfig>().toBeObject()
  })
  test('AuthProvider', () => {
    expectTypeOf<AuthProvider>().toBeObject()
  })
  test('AuthState', () => {
    expectTypeOf<AuthState>().toBeObject()
  })
  test('AuthStore', () => {
    expectTypeOf<AuthStore>().toBeObject()
  })
  test('AuthStoreOptions', () => {
    expectTypeOf<AuthStoreOptions>().toBeObject()
  })
  test('AutoCollapseMenu', () => {
    expectTypeOf<typeof AutoCollapseMenu>().not.toBeNever()
  })
  test('AvailabilityReason', () => {
    expectTypeOf<AvailabilityReason>().not.toBeNever()
  })
  test('AvailabilityResponse', () => {
    expectTypeOf<AvailabilityResponse>().toBeObject()
  })
  test('AvatarSkeleton', () => {
    expectTypeOf<typeof AvatarSkeleton>().not.toBeNever()
  })
  test('BaseEvent', () => {
    expectTypeOf<BaseEvent>().toBeObject()
  })
  test('BaseFieldProps', () => {
    expectTypeOf<BaseFieldProps>().toBeObject()
  })
  test('BaseFormNode', () => {
    expectTypeOf<BaseFormNode<any, any>>().toBeObject()
  })
  test('BaseInputProps', () => {
    expectTypeOf<BaseInputProps>().toBeObject()
  })
  test('BaseItemProps', () => {
    expectTypeOf<BaseItemProps<any>>().toBeObject()
  })
  test('BaseOptions', () => {
    expectTypeOf<BaseOptions>().toBeObject()
  })
  test('BetaBadgeProps', () => {
    expectTypeOf<BetaBadgeProps>().not.toBeNever()
  })
  test('BetaFeatures', () => {
    expectTypeOf<BetaFeatures>().toBeObject()
  })
  test('BlockAnnotationProps', () => {
    expectTypeOf<BlockAnnotationProps>().toBeObject()
  })
  test('BlockDecoratorProps', () => {
    expectTypeOf<BlockDecoratorProps>().toBeObject()
  })
  test('BlockImagePreviewProps', () => {
    expectTypeOf<BlockImagePreviewProps>().not.toBeNever()
  })
  test('BlockListItemProps', () => {
    expectTypeOf<BlockListItemProps>().toBeObject()
  })
  test('BlockProps', () => {
    expectTypeOf<BlockProps>().toBeObject()
  })
  test('BlockStyleProps', () => {
    expectTypeOf<BlockStyleProps>().toBeObject()
  })
  test('BooleanDiff', () => {
    expectTypeOf<BooleanDiff>().not.toBeNever()
  })
  test('BooleanFieldProps', () => {
    expectTypeOf<BooleanFieldProps>().toBeObject()
  })
  test('BooleanFormNode', () => {
    expectTypeOf<BooleanFormNode<any>>().not.toBeNever()
  })
  test('BooleanInputProps', () => {
    expectTypeOf<BooleanInputProps<any>>().toBeObject()
  })
  test('BufferedDocumentEvent', () => {
    expectTypeOf<BufferedDocumentEvent>().not.toBeNever()
  })
  test('BufferedDocumentWrapper', () => {
    expectTypeOf<BufferedDocumentWrapper>().toBeObject()
  })
  test('CapabilityGate', () => {
    expectTypeOf<typeof CapabilityGate>().not.toBeNever()
  })
  test('ChangeConnectorRootProps', () => {
    expectTypeOf<ChangeConnectorRootProps>().toBeObject()
  })
  test('ChangeFieldWrapper', () => {
    expectTypeOf<typeof ChangeFieldWrapper>().not.toBeNever()
  })
  test('ChangeIndicatorProps', () => {
    expectTypeOf<ChangeIndicatorProps>().toBeObject()
  })
  test('ChangeIndicatorsTracker', () => {
    expectTypeOf<typeof ChangeIndicatorsTracker>().not.toBeNever()
  })
  test('ChangeIndicatorTrackerContextValue', () => {
    expectTypeOf<ChangeIndicatorTrackerContextValue>().not.toBeNever()
  })
  test('ChangeListProps', () => {
    expectTypeOf<ChangeListProps>().toBeObject()
  })
  test('ChangeNode', () => {
    expectTypeOf<ChangeNode>().not.toBeNever()
  })
  test('ChangeResolverProps', () => {
    expectTypeOf<ChangeResolverProps>().toBeObject()
  })
  test('ChangeTitlePath', () => {
    expectTypeOf<ChangeTitlePath>().not.toBeNever()
  })
  test('Chunk', () => {
    expectTypeOf<Chunk>().not.toBeNever()
  })
  test('ChunkType', () => {
    expectTypeOf<ChunkType>().not.toBeNever()
  })
  test('CollapseMenu', () => {
    expectTypeOf<typeof CollapseMenu>().not.toBeNever()
  })
  test('CollapseMenuButton', () => {
    expectTypeOf<typeof CollapseMenuButton>().not.toBeNever()
  })
  test('CollapseMenuButtonProps', () => {
    expectTypeOf<CollapseMenuButtonProps>().toBeObject()
  })
  test('CollapseMenuProps', () => {
    expectTypeOf<CollapseMenuProps>().toBeObject()
  })
  test('CollatedHit', () => {
    expectTypeOf<CollatedHit<any>>().toBeObject()
  })
  test('ColorSchemeProviderProps', () => {
    expectTypeOf<ColorSchemeProviderProps>().toBeObject()
  })
  test('CombinedDocument', () => {
    expectTypeOf<CombinedDocument>().toBeObject()
  })
  test('CommandList', () => {
    expectTypeOf<typeof CommandList>().not.toBeNever()
  })
  test('CommandListElementType', () => {
    expectTypeOf<CommandListElementType>().not.toBeNever()
  })
  test('CommandListGetItemDisabledCallback', () => {
    expectTypeOf<CommandListGetItemDisabledCallback>().not.toBeNever()
  })
  test('CommandListGetItemKeyCallback', () => {
    expectTypeOf<CommandListGetItemKeyCallback>().not.toBeNever()
  })
  test('CommandListGetItemSelectedCallback', () => {
    expectTypeOf<CommandListGetItemSelectedCallback>().not.toBeNever()
  })
  test('CommandListHandle', () => {
    expectTypeOf<CommandListHandle>().toBeObject()
  })
  test('CommandListItemContext', () => {
    expectTypeOf<CommandListItemContext>().not.toBeNever()
  })
  test('CommandListProps', () => {
    expectTypeOf<CommandListProps<any>>().toBeObject()
  })
  test('CommandListRenderItemCallback', () => {
    expectTypeOf<CommandListRenderItemCallback<any>>().not.toBeNever()
  })
  test('CommentBaseCreatePayload', () => {
    expectTypeOf<CommentBaseCreatePayload>().toBeObject()
  })
  test('CommentContext', () => {
    expectTypeOf<CommentContext>().toBeObject()
  })
  test('CommentCreatePayload', () => {
    expectTypeOf<CommentCreatePayload>().not.toBeNever()
  })
  test('CommentDisabledIcon', () => {
    expectTypeOf<typeof CommentDisabledIcon>().not.toBeNever()
  })
  test('CommentDocument', () => {
    expectTypeOf<CommentDocument>().toBeObject()
  })
  test('CommentFieldCreatePayload', () => {
    expectTypeOf<CommentFieldCreatePayload>().toBeObject()
  })
  test('CommentInlineHighlightSpan', () => {
    expectTypeOf<typeof CommentInlineHighlightSpan>().not.toBeNever()
  })
  test('CommentInput', () => {
    expectTypeOf<typeof CommentInput>().not.toBeNever()
  })
  test('CommentInputHandle', () => {
    expectTypeOf<CommentInputHandle>().toBeObject()
  })
  test('CommentInputProps', () => {
    expectTypeOf<CommentInputProps>().toBeObject()
  })
  test('CommentIntentGetter', () => {
    expectTypeOf<CommentIntentGetter>().not.toBeNever()
  })
  test('CommentListBreadcrumbs', () => {
    expectTypeOf<CommentListBreadcrumbs>().not.toBeNever()
  })
  test('CommentMessage', () => {
    expectTypeOf<CommentMessage>().not.toBeNever()
  })
  test('CommentOperations', () => {
    expectTypeOf<CommentOperations>().toBeObject()
  })
  test('CommentPath', () => {
    expectTypeOf<CommentPath>().toBeObject()
  })
  test('CommentPostPayload', () => {
    expectTypeOf<CommentPostPayload>().not.toBeNever()
  })
  test('CommentReactionItem', () => {
    expectTypeOf<CommentReactionItem>().toBeObject()
  })
  test('CommentReactionOption', () => {
    expectTypeOf<CommentReactionOption>().toBeObject()
  })
  test('CommentReactionShortNames', () => {
    expectTypeOf<CommentReactionShortNames>().not.toBeNever()
  })
  test('COMMENTS_INSPECTOR_NAME', () => {
    expectTypeOf<typeof COMMENTS_INSPECTOR_NAME>().not.toBeNever()
  })
  test('CommentsEnabledProvider', () => {
    expectTypeOf<typeof CommentsEnabledProvider>().not.toBeNever()
  })
  test('CommentsIntentProvider', () => {
    expectTypeOf<typeof CommentsIntentProvider>().not.toBeNever()
  })
  test('CommentsIntentProviderProps', () => {
    expectTypeOf<CommentsIntentProviderProps>().toBeObject()
  })
  test('CommentsList', () => {
    expectTypeOf<typeof CommentsList>().not.toBeNever()
  })
  test('CommentsListBreadcrumbItem', () => {
    expectTypeOf<CommentsListBreadcrumbItem>().toBeObject()
  })
  test('CommentsProvider', () => {
    expectTypeOf<typeof CommentsProvider>().not.toBeNever()
  })
  test('CommentsSelectedPath', () => {
    expectTypeOf<CommentsSelectedPath>().toBeObject()
  })
  test('CommentsSelectedPathProvider', () => {
    expectTypeOf<typeof CommentsSelectedPathProvider>().not.toBeNever()
  })
  test('CommentStatus', () => {
    expectTypeOf<CommentStatus>().not.toBeNever()
  })
  test('CommentsTextSelectionItem', () => {
    expectTypeOf<CommentsTextSelectionItem>().toBeObject()
  })
  test('CommentsType', () => {
    expectTypeOf<CommentsType>().not.toBeNever()
  })
  test('CommentsUIMode', () => {
    expectTypeOf<CommentsUIMode>().not.toBeNever()
  })
  test('CommentTaskCreatePayload', () => {
    expectTypeOf<CommentTaskCreatePayload>().toBeObject()
  })
  test('CommentTextSelection', () => {
    expectTypeOf<CommentTextSelection>().toBeObject()
  })
  test('CommentThreadItem', () => {
    expectTypeOf<CommentThreadItem>().toBeObject()
  })
  test('CommentUpdateOperationOptions', () => {
    expectTypeOf<CommentUpdateOperationOptions>().toBeObject()
  })
  test('CommentUpdatePayload', () => {
    expectTypeOf<CommentUpdatePayload>().not.toBeNever()
  })
  test('CommitFunction', () => {
    expectTypeOf<CommitFunction>().not.toBeNever()
  })
  test('CommitRequest', () => {
    expectTypeOf<CommitRequest>().toBeObject()
  })
  test('CommittedEvent', () => {
    expectTypeOf<CommittedEvent>().toBeObject()
  })
  test('CommonProps', () => {
    expectTypeOf<CommonProps>().toBeObject()
  })
  test('CompactPreviewProps', () => {
    expectTypeOf<CompactPreviewProps>().not.toBeNever()
  })
  test('ComplexElementProps', () => {
    expectTypeOf<ComplexElementProps>().toBeObject()
  })
  test('ComposableOption', () => {
    expectTypeOf<ComposableOption<any, any>>().not.toBeNever()
  })
  test('ConcreteRuleClass', () => {
    expectTypeOf<typeof ConcreteRuleClass>().not.toBeNever()
  })
  test('Config', () => {
    expectTypeOf<Config>().not.toBeNever()
  })
  test('ConfigContext', () => {
    expectTypeOf<ConfigContext>().toBeObject()
  })
  test('ConfigPropertyError', () => {
    expectTypeOf<ConfigPropertyError>().not.toBeNever()
  })
  test('ConfigPropertyErrorOptions', () => {
    expectTypeOf<ConfigPropertyErrorOptions>().toBeObject()
  })
  test('ConfigPropertyReducer', () => {
    expectTypeOf<ConfigPropertyReducer<any, any>>().not.toBeNever()
  })
  test('ConfigResolutionError', () => {
    expectTypeOf<ConfigResolutionError>().not.toBeNever()
  })
  test('ConfigResolutionErrorOptions', () => {
    expectTypeOf<ConfigResolutionErrorOptions>().toBeObject()
  })
  test('ConnectedStatus', () => {
    expectTypeOf<ConnectedStatus>().not.toBeNever()
  })
  test('CONNECTING', () => {
    expectTypeOf<typeof CONNECTING>().not.toBeNever()
  })
  test('ConnectingStatus', () => {
    expectTypeOf<ConnectingStatus>().not.toBeNever()
  })
  test('ConnectionState', () => {
    expectTypeOf<ConnectionState>().not.toBeNever()
  })
  test('ConnectionStatus', () => {
    expectTypeOf<ConnectionStatus>().not.toBeNever()
  })
  test('ConnectionStatusStore', () => {
    expectTypeOf<ConnectionStatusStore>().toBeObject()
  })
  test('ConnectionStatusStoreOptions', () => {
    expectTypeOf<ConnectionStatusStoreOptions>().toBeObject()
  })
  test('ConnectorContextValue', () => {
    expectTypeOf<ConnectorContextValue>().toBeObject()
  })
  test('ContextMenuButton', () => {
    expectTypeOf<typeof ContextMenuButton>().not.toBeNever()
  })
  test('CookielessCompatibleLoginMethod', () => {
    expectTypeOf<CookielessCompatibleLoginMethod>().not.toBeNever()
  })
  test('CopyOptions', () => {
    expectTypeOf<CopyOptions>().toBeObject()
  })
  test('CopyPasteContextType', () => {
    expectTypeOf<CopyPasteContextType>().toBeObject()
  })
  test('CopyPasteProvider', () => {
    expectTypeOf<typeof CopyPasteProvider>().not.toBeNever()
  })
  test('CorsOriginError', () => {
    expectTypeOf<CorsOriginError>().not.toBeNever()
  })
  test('CorsOriginErrorOptions', () => {
    expectTypeOf<CorsOriginErrorOptions>().toBeObject()
  })
  test('createAuthStore', () => {
    expectTypeOf<typeof createAuthStore>().not.toBeNever()
  })
  test('createBufferedDocument', () => {
    expectTypeOf<typeof createBufferedDocument>().not.toBeNever()
  })
  test('CreateDocumentVersionEvent', () => {
    expectTypeOf<CreateDocumentVersionEvent>().toBeObject()
  })
  test('CreateLinkedActionsProps', () => {
    expectTypeOf<CreateLinkedActionsProps>().toBeObject()
  })
  test('CreateLinkedDocumentBannerContentProps', () => {
    expectTypeOf<CreateLinkedDocumentBannerContentProps>().toBeObject()
  })
  test('CreateLinkedSanityDocument', () => {
    expectTypeOf<CreateLinkedSanityDocument>().toBeObject()
  })
  test('CreateLinkMetadata', () => {
    expectTypeOf<CreateLinkMetadata>().toBeObject()
  })
  test('CreateLiveDocumentEvent', () => {
    expectTypeOf<CreateLiveDocumentEvent>().toBeObject()
  })
  test('createObservableBufferedDocument', () => {
    expectTypeOf<typeof createObservableBufferedDocument>().not.toBeNever()
  })
  test('createSearch', () => {
    expectTypeOf<typeof createSearch>().not.toBeNever()
  })
  test('createSharedResizeObserver', () => {
    expectTypeOf<typeof createSharedResizeObserver>().not.toBeNever()
  })
  test('CreateWorkspaceFromConfigOptions', () => {
    expectTypeOf<CreateWorkspaceFromConfigOptions>().not.toBeNever()
  })
  test('CrossDatasetReferenceInputProps', () => {
    expectTypeOf<CrossDatasetReferenceInputProps>().not.toBeNever()
  })
  test('DateInputProps', () => {
    expectTypeOf<DateInputProps>().not.toBeNever()
  })
  test('DateTimeInputProps', () => {
    expectTypeOf<DateTimeInputProps>().not.toBeNever()
  })
  test('DEFAULT_MAX_RECURSION_DEPTH', () => {
    expectTypeOf<typeof DEFAULT_MAX_RECURSION_DEPTH>().not.toBeNever()
  })
  test('DEFAULT_STUDIO_CLIENT_OPTIONS', () => {
    expectTypeOf<typeof DEFAULT_STUDIO_CLIENT_OPTIONS>().not.toBeNever()
  })
  test('defaultLocale', () => {
    expectTypeOf<typeof defaultLocale>().not.toBeNever()
  })
  test('DefaultPluginsWorkspaceOptions', () => {
    expectTypeOf<DefaultPluginsWorkspaceOptions>().not.toBeNever()
  })
  test('DefaultPreviewProps', () => {
    expectTypeOf<DefaultPreviewProps>().toBeObject()
  })
  test('defaultRenderAnnotation', () => {
    expectTypeOf<typeof defaultRenderAnnotation>().not.toBeNever()
  })
  test('defaultRenderBlock', () => {
    expectTypeOf<typeof defaultRenderBlock>().not.toBeNever()
  })
  test('defaultRenderField', () => {
    expectTypeOf<typeof defaultRenderField>().not.toBeNever()
  })
  test('defaultRenderInlineBlock', () => {
    expectTypeOf<typeof defaultRenderInlineBlock>().not.toBeNever()
  })
  test('defaultRenderInput', () => {
    expectTypeOf<typeof defaultRenderInput>().not.toBeNever()
  })
  test('defaultRenderItem', () => {
    expectTypeOf<typeof defaultRenderItem>().not.toBeNever()
  })
  test('defaultRenderPreview', () => {
    expectTypeOf<typeof defaultRenderPreview>().not.toBeNever()
  })
  test('defaultTheme', () => {
    expectTypeOf<typeof defaultTheme>().not.toBeNever()
  })
  test('DeleteDocumentGroupEvent', () => {
    expectTypeOf<DeleteDocumentGroupEvent>().toBeObject()
  })
  test('DeleteDocumentVersionEvent', () => {
    expectTypeOf<DeleteDocumentVersionEvent>().toBeObject()
  })
  test('DetailPreviewProps', () => {
    expectTypeOf<DetailPreviewProps>().not.toBeNever()
  })
  test('Diff', () => {
    expectTypeOf<Diff<any, any>>().not.toBeNever()
  })
  test('DiffCard', () => {
    expectTypeOf<typeof DiffCard>().not.toBeNever()
  })
  test('DiffCardProps', () => {
    expectTypeOf<DiffCardProps>().toBeObject()
  })
  test('DiffComponent', () => {
    expectTypeOf<DiffComponent<any>>().not.toBeNever()
  })
  test('DiffComponentOptions', () => {
    expectTypeOf<DiffComponentOptions<any>>().not.toBeNever()
  })
  test('DiffComponentResolver', () => {
    expectTypeOf<DiffComponentResolver>().not.toBeNever()
  })
  test('DiffErrorBoundary', () => {
    expectTypeOf<DiffErrorBoundary>().not.toBeNever()
  })
  test('DiffErrorBoundaryProps', () => {
    expectTypeOf<DiffErrorBoundaryProps>().toBeObject()
  })
  test('DiffErrorBoundaryState', () => {
    expectTypeOf<DiffErrorBoundaryState>().toBeObject()
  })
  test('DiffFromToProps', () => {
    expectTypeOf<DiffFromToProps>().toBeObject()
  })
  test('DiffInspectWrapperProps', () => {
    expectTypeOf<DiffInspectWrapperProps>().toBeObject()
  })
  test('DiffProps', () => {
    expectTypeOf<DiffProps<any>>().not.toBeNever()
  })
  test('diffResolver', () => {
    expectTypeOf<typeof diffResolver>().not.toBeNever()
  })
  test('DiffTooltipProps', () => {
    expectTypeOf<DiffTooltipProps>().toBeObject()
  })
  test('DiffTooltipWithAnnotationsProps', () => {
    expectTypeOf<DiffTooltipWithAnnotationsProps>().toBeObject()
  })
  test('DiffVisitor', () => {
    expectTypeOf<DiffVisitor>().not.toBeNever()
  })
  test('DocumentActionComponent', () => {
    expectTypeOf<DocumentActionComponent>().toBeObject()
  })
  test('DocumentActionConfirmDialogProps', () => {
    expectTypeOf<DocumentActionConfirmDialogProps>().toBeObject()
  })
  test('DocumentActionCustomDialogComponentProps', () => {
    expectTypeOf<DocumentActionCustomDialogComponentProps>().toBeObject()
  })
  test('DocumentActionDescription', () => {
    expectTypeOf<DocumentActionDescription>().toBeObject()
  })
  test('DocumentActionDialogProps', () => {
    expectTypeOf<DocumentActionDialogProps>().not.toBeNever()
  })
  test('DocumentActionGroup', () => {
    expectTypeOf<DocumentActionGroup>().not.toBeNever()
  })
  test('DocumentActionModalDialogProps', () => {
    expectTypeOf<DocumentActionModalDialogProps>().toBeObject()
  })
  test('DocumentActionPopoverDialogProps', () => {
    expectTypeOf<DocumentActionPopoverDialogProps>().toBeObject()
  })
  test('DocumentActionProps', () => {
    expectTypeOf<DocumentActionProps>().toBeObject()
  })
  test('DocumentActionsContext', () => {
    expectTypeOf<DocumentActionsContext>().toBeObject()
  })
  test('DocumentActionsResolver', () => {
    expectTypeOf<DocumentActionsResolver>().not.toBeNever()
  })
  test('DocumentActionsVersionType', () => {
    expectTypeOf<DocumentActionsVersionType>().not.toBeNever()
  })
  test('DocumentAvailability', () => {
    expectTypeOf<DocumentAvailability>().not.toBeNever()
  })
  test('DocumentBadgeComponent', () => {
    expectTypeOf<DocumentBadgeComponent>().toBeObject()
  })
  test('DocumentBadgeDescription', () => {
    expectTypeOf<DocumentBadgeDescription>().toBeObject()
  })
  test('DocumentBadgeProps', () => {
    expectTypeOf<DocumentBadgeProps>().toBeObject()
  })
  test('DocumentBadgesContext', () => {
    expectTypeOf<DocumentBadgesContext>().toBeObject()
  })
  test('DocumentBadgesResolver', () => {
    expectTypeOf<DocumentBadgesResolver>().not.toBeNever()
  })
  test('DocumentChangeContextInstance', () => {
    expectTypeOf<DocumentChangeContextInstance>().not.toBeNever()
  })
  test('DocumentCommentsEnabledContext', () => {
    expectTypeOf<DocumentCommentsEnabledContext>().toBeObject()
  })
  test('DocumentField', () => {
    expectTypeOf<DocumentField>().not.toBeNever()
  })
  test('DocumentFieldAction', () => {
    expectTypeOf<DocumentFieldAction>().toBeObject()
  })
  test('DocumentFieldActionDivider', () => {
    expectTypeOf<DocumentFieldActionDivider>().toBeObject()
  })
  test('DocumentFieldActionGroup', () => {
    expectTypeOf<DocumentFieldActionGroup>().toBeObject()
  })
  test('DocumentFieldActionHook', () => {
    expectTypeOf<DocumentFieldActionHook>().toBeObject()
  })
  test('DocumentFieldActionItem', () => {
    expectTypeOf<DocumentFieldActionItem>().toBeObject()
  })
  test('DocumentFieldActionNode', () => {
    expectTypeOf<DocumentFieldActionNode>().not.toBeNever()
  })
  test('DocumentFieldActionProps', () => {
    expectTypeOf<DocumentFieldActionProps>().toBeObject()
  })
  test('documentFieldActionsReducer', () => {
    expectTypeOf<typeof documentFieldActionsReducer>().not.toBeNever()
  })
  test('DocumentFieldActionsResolver', () => {
    expectTypeOf<DocumentFieldActionsResolver>().not.toBeNever()
  })
  test('DocumentFieldActionsResolverContext', () => {
    expectTypeOf<DocumentFieldActionsResolverContext>().toBeObject()
  })
  test('DocumentFieldActionStatus', () => {
    expectTypeOf<DocumentFieldActionStatus>().not.toBeNever()
  })
  test('DocumentFieldActionTone', () => {
    expectTypeOf<DocumentFieldActionTone>().not.toBeNever()
  })
  test('DocumentFormNode', () => {
    expectTypeOf<DocumentFormNode<any, any>>().not.toBeNever()
  })
  test('DocumentGroupEvent', () => {
    expectTypeOf<DocumentGroupEvent>().not.toBeNever()
  })
  test('DocumentInspector', () => {
    expectTypeOf<DocumentInspector>().toBeObject()
  })
  test('DocumentInspectorComponent', () => {
    expectTypeOf<DocumentInspectorComponent>().not.toBeNever()
  })
  test('DocumentInspectorContext', () => {
    expectTypeOf<DocumentInspectorContext>().toBeObject()
  })
  test('DocumentInspectorMenuItem', () => {
    expectTypeOf<DocumentInspectorMenuItem>().toBeObject()
  })
  test('DocumentInspectorProps', () => {
    expectTypeOf<DocumentInspectorProps>().toBeObject()
  })
  test('DocumentInspectorsResolver', () => {
    expectTypeOf<DocumentInspectorsResolver>().not.toBeNever()
  })
  test('DocumentInspectorUseMenuItemProps', () => {
    expectTypeOf<DocumentInspectorUseMenuItemProps>().toBeObject()
  })
  test('DocumentLanguageFilterComponent', () => {
    expectTypeOf<DocumentLanguageFilterComponent>().not.toBeNever()
  })
  test('DocumentLanguageFilterContext', () => {
    expectTypeOf<DocumentLanguageFilterContext>().toBeObject()
  })
  test('DocumentLanguageFilterResolver', () => {
    expectTypeOf<DocumentLanguageFilterResolver>().not.toBeNever()
  })
  test('DocumentLayoutProps', () => {
    expectTypeOf<DocumentLayoutProps>().toBeObject()
  })
  test('DocumentMeta', () => {
    expectTypeOf<DocumentMeta>().toBeObject()
  })
  test('DocumentMutationEvent', () => {
    expectTypeOf<DocumentMutationEvent>().toBeObject()
  })
  test('DocumentPairPermissionsOptions', () => {
    expectTypeOf<DocumentPairPermissionsOptions>().toBeObject()
  })
  test('DocumentPermission', () => {
    expectTypeOf<DocumentPermission>().not.toBeNever()
  })
  test('DocumentPluginOptions', () => {
    expectTypeOf<DocumentPluginOptions>().toBeObject()
  })
  test('DocumentPresence', () => {
    expectTypeOf<DocumentPresence>().toBeObject()
  })
  test('DocumentPreviewPresenceProps', () => {
    expectTypeOf<DocumentPreviewPresenceProps>().toBeObject()
  })
  test('DocumentPreviewStore', () => {
    expectTypeOf<DocumentPreviewStore>().toBeObject()
  })
  test('DocumentPreviewStoreOptions', () => {
    expectTypeOf<DocumentPreviewStoreOptions>().toBeObject()
  })
  test('DocumentRebaseEvent', () => {
    expectTypeOf<DocumentRebaseEvent>().toBeObject()
  })
  test('DocumentRemoteMutationEvent', () => {
    expectTypeOf<DocumentRemoteMutationEvent>().toBeObject()
  })
  test('DocumentRemoteMutationVersionEvent', () => {
    expectTypeOf<DocumentRemoteMutationVersionEvent>().not.toBeNever()
  })
  test('DocumentRevision', () => {
    expectTypeOf<DocumentRevision>().not.toBeNever()
  })
  test('DocumentStore', () => {
    expectTypeOf<DocumentStore>().toBeObject()
  })
  test('DocumentStoreExtraOptions', () => {
    expectTypeOf<DocumentStoreExtraOptions>().toBeObject()
  })
  test('DocumentStoreOptions', () => {
    expectTypeOf<DocumentStoreOptions>().toBeObject()
  })
  test('DocumentTypeResolveState', () => {
    expectTypeOf<DocumentTypeResolveState>().toBeObject()
  })
  test('DocumentValuePermission', () => {
    expectTypeOf<DocumentValuePermission>().not.toBeNever()
  })
  test('DocumentValuePermissionsOptions', () => {
    expectTypeOf<DocumentValuePermissionsOptions>().toBeObject()
  })
  test('DocumentVariantType', () => {
    expectTypeOf<DocumentVariantType>().not.toBeNever()
  })
  test('DocumentVersion', () => {
    expectTypeOf<DocumentVersion>().toBeObject()
  })
  test('DocumentVersionEvent', () => {
    expectTypeOf<DocumentVersionEvent>().not.toBeNever()
  })
  test('DocumentVersionEventType', () => {
    expectTypeOf<DocumentVersionEventType>().not.toBeNever()
  })
  test('DocumentVersionSnapshots', () => {
    expectTypeOf<DocumentVersionSnapshots>().toBeObject()
  })
  test('DraftId', () => {
    expectTypeOf<DraftId>().not.toBeNever()
  })
  test('DRAFTS_FOLDER', () => {
    expectTypeOf<typeof DRAFTS_FOLDER>().not.toBeNever()
  })
  test('DraftsModelDocument', () => {
    expectTypeOf<DraftsModelDocument<any>>().toBeObject()
  })
  test('DraftsModelDocumentAvailability', () => {
    expectTypeOf<DraftsModelDocumentAvailability>().toBeObject()
  })
  test('DuplicateActionProps', () => {
    expectTypeOf<DuplicateActionProps>().toBeObject()
  })
  test('DuplicateDocumentActionComponent', () => {
    expectTypeOf<DuplicateDocumentActionComponent>().toBeObject()
  })
  test('DuplicateKeysError', () => {
    expectTypeOf<DuplicateKeysError>().not.toBeNever()
  })
  test('EditDocumentVersionEvent', () => {
    expectTypeOf<EditDocumentVersionEvent>().toBeObject()
  })
  test('EditReferenceLinkComponentProps', () => {
    expectTypeOf<EditReferenceLinkComponentProps>().toBeObject()
  })
  test('EditReferenceOptions', () => {
    expectTypeOf<EditReferenceOptions>().toBeObject()
  })
  test('editState', () => {
    expectTypeOf<typeof editState>().not.toBeNever()
  })
  test('EditStateFor', () => {
    expectTypeOf<EditStateFor>().toBeObject()
  })
  test('EmailInputProps', () => {
    expectTypeOf<EmailInputProps>().not.toBeNever()
  })
  test('EMPTY_ARRAY', () => {
    expectTypeOf<typeof EMPTY_ARRAY>().not.toBeNever()
  })
  test('EMPTY_OBJECT', () => {
    expectTypeOf<typeof EMPTY_OBJECT>().not.toBeNever()
  })
  test('ErrorActions', () => {
    expectTypeOf<typeof ErrorActions>().not.toBeNever()
  })
  test('ErrorActionsProps', () => {
    expectTypeOf<ErrorActionsProps>().toBeObject()
  })
  test('ErrorMessageProps', () => {
    expectTypeOf<ErrorMessageProps>().toBeObject()
  })
  test('ErrorState', () => {
    expectTypeOf<ErrorState>().toBeObject()
  })
  test('ErrorStatus', () => {
    expectTypeOf<ErrorStatus>().not.toBeNever()
  })
  test('ErrorWithId', () => {
    expectTypeOf<ErrorWithId>().toBeObject()
  })
  test('escapeField', () => {
    expectTypeOf<typeof escapeField>().not.toBeNever()
  })
  test('EvaluationParams', () => {
    expectTypeOf<EvaluationParams>().toBeObject()
  })
  test('Event', () => {
    expectTypeOf<typeof Event>().toBeFunction()
  })
  test('EventsStore', () => {
    expectTypeOf<EventsStore>().toBeObject()
  })
  test('EventsStoreRevision', () => {
    expectTypeOf<EventsStoreRevision>().toBeObject()
  })
  test('ExpandFieldSetOperation', () => {
    expectTypeOf<ExpandFieldSetOperation>().toBeObject()
  })
  test('ExpandOperation', () => {
    expectTypeOf<ExpandOperation>().not.toBeNever()
  })
  test('ExpandPathOperation', () => {
    expectTypeOf<ExpandPathOperation>().toBeObject()
  })
  test('FallbackDiff', () => {
    expectTypeOf<typeof FallbackDiff>().not.toBeNever()
  })
  test('FieldActionMenu', () => {
    expectTypeOf<typeof FieldActionMenu>().not.toBeNever()
  })
  test('FieldActionMenuProps', () => {
    expectTypeOf<FieldActionMenuProps>().toBeObject()
  })
  test('FieldActionsProps', () => {
    expectTypeOf<FieldActionsProps>().toBeObject()
  })
  test('FieldActionsProvider', () => {
    expectTypeOf<typeof FieldActionsProvider>().not.toBeNever()
  })
  test('FieldActionsResolver', () => {
    expectTypeOf<typeof FieldActionsResolver>().not.toBeNever()
  })
  test('FieldChangeNode', () => {
    expectTypeOf<FieldChangeNode>().toBeObject()
  })
  test('FieldCommentsProps', () => {
    expectTypeOf<FieldCommentsProps>().toBeObject()
  })
  test('FieldError', () => {
    expectTypeOf<FieldError>().toBeObject()
  })
  test('FieldMember', () => {
    expectTypeOf<FieldMember<any>>().toBeObject()
  })
  test('FieldName', () => {
    expectTypeOf<FieldName>().not.toBeNever()
  })
  test('fieldNeedsEscape', () => {
    expectTypeOf<typeof fieldNeedsEscape>().not.toBeNever()
  })
  test('FieldOperationsAPI', () => {
    expectTypeOf<FieldOperationsAPI>().toBeObject()
  })
  test('FieldPresenceData', () => {
    expectTypeOf<FieldPresenceData>().not.toBeNever()
  })
  test('FieldPresenceInner', () => {
    expectTypeOf<typeof FieldPresenceInner>().not.toBeNever()
  })
  test('FieldPresenceInnerProps', () => {
    expectTypeOf<FieldPresenceInnerProps>().toBeObject()
  })
  test('FieldPresenceProps', () => {
    expectTypeOf<FieldPresenceProps>().toBeObject()
  })
  test('FieldPresenceWithOverlay', () => {
    expectTypeOf<typeof FieldPresenceWithOverlay>().not.toBeNever()
  })
  test('FieldPreviewComponent', () => {
    expectTypeOf<FieldPreviewComponent<any>>().not.toBeNever()
  })
  test('FieldProps', () => {
    expectTypeOf<FieldProps>().not.toBeNever()
  })
  test('FieldSetMember', () => {
    expectTypeOf<FieldSetMember>().toBeObject()
  })
  test('FieldsetState', () => {
    expectTypeOf<FieldsetState>().toBeObject()
  })
  test('FieldStatusProps', () => {
    expectTypeOf<FieldStatusProps>().toBeObject()
  })
  test('FieldValueError', () => {
    expectTypeOf<FieldValueError>().toBeObject()
  })
  test('FileInputProps', () => {
    expectTypeOf<FileInputProps>().not.toBeNever()
  })
  test('FileLike', () => {
    expectTypeOf<FileLike>().toBeObject()
  })
  test('FIXME', () => {
    expectTypeOf<FIXME>().not.toBeNever()
  })
  test('flattenConfig', () => {
    expectTypeOf<typeof flattenConfig>().not.toBeNever()
  })
  test('formatRelativeLocale', () => {
    expectTypeOf<typeof formatRelativeLocale>().not.toBeNever()
  })
  test('FormattableMeasurementUnit', () => {
    expectTypeOf<FormattableMeasurementUnit>().not.toBeNever()
  })
  test('FormattedDuration', () => {
    expectTypeOf<FormattedDuration>().toBeObject()
  })
  test('FormBuilderComponentResolverContext', () => {
    expectTypeOf<FormBuilderComponentResolverContext>().toBeObject()
  })
  test('FormBuilderContextValue', () => {
    expectTypeOf<FormBuilderContextValue>().toBeObject()
  })
  test('FormBuilderCustomMarkersComponent', () => {
    expectTypeOf<FormBuilderCustomMarkersComponent>().not.toBeNever()
  })
  test('FormBuilderFilterFieldFn', () => {
    expectTypeOf<FormBuilderFilterFieldFn>().toBeObject()
  })
  test('FormBuilderInputComponentMap', () => {
    expectTypeOf<FormBuilderInputComponentMap>().not.toBeNever()
  })
  test('FormBuilderMarkersComponent', () => {
    expectTypeOf<FormBuilderMarkersComponent>().not.toBeNever()
  })
  test('FormBuilderProps', () => {
    expectTypeOf<FormBuilderProps>().toBeObject()
  })
  test('FormCallbacksProvider', () => {
    expectTypeOf<typeof FormCallbacksProvider>().not.toBeNever()
  })
  test('FormCallbacksValue', () => {
    expectTypeOf<FormCallbacksValue>().toBeObject()
  })
  test('FormComponents', () => {
    expectTypeOf<FormComponents>().toBeObject()
  })
  test('FormDecPatch', () => {
    expectTypeOf<FormDecPatch>().toBeObject()
  })
  test('FormDiffMatchPatch', () => {
    expectTypeOf<FormDiffMatchPatch>().toBeObject()
  })
  test('FormDocumentValue', () => {
    expectTypeOf<FormDocumentValue>().toBeObject()
  })
  test('FormField', () => {
    expectTypeOf<typeof FormField>().not.toBeNever()
  })
  test('FormFieldGroup', () => {
    expectTypeOf<FormFieldGroup>().toBeObject()
  })
  test('FormFieldHeaderText', () => {
    expectTypeOf<typeof FormFieldHeaderText>().not.toBeNever()
  })
  test('FormFieldHeaderTextProps', () => {
    expectTypeOf<FormFieldHeaderTextProps>().toBeObject()
  })
  test('FormFieldProps', () => {
    expectTypeOf<FormFieldProps>().toBeObject()
  })
  test('FormFieldSet', () => {
    expectTypeOf<typeof FormFieldSet>().not.toBeNever()
  })
  test('FormFieldSetProps', () => {
    expectTypeOf<FormFieldSetProps>().toBeObject()
  })
  test('FormFieldValidation', () => {
    expectTypeOf<FormFieldValidation>().not.toBeNever()
  })
  test('FormFieldValidationError', () => {
    expectTypeOf<FormFieldValidationError>().toBeObject()
  })
  test('FormFieldValidationInfo', () => {
    expectTypeOf<FormFieldValidationInfo>().toBeObject()
  })
  test('FormFieldValidationStatusProps', () => {
    expectTypeOf<FormFieldValidationStatusProps>().toBeObject()
  })
  test('FormFieldValidationWarning', () => {
    expectTypeOf<FormFieldValidationWarning>().toBeObject()
  })
  test('FormIncPatch', () => {
    expectTypeOf<FormIncPatch>().toBeObject()
  })
  test('FormInput', () => {
    expectTypeOf<typeof FormInput>().not.toBeNever()
  })
  test('FormInputAbsolutePathArg', () => {
    expectTypeOf<FormInputAbsolutePathArg>().not.toBeNever()
  })
  test('FormInputRelativePathArg', () => {
    expectTypeOf<FormInputRelativePathArg>().not.toBeNever()
  })
  test('FormInsertPatch', () => {
    expectTypeOf<FormInsertPatch>().toBeObject()
  })
  test('FormInsertPatchPosition', () => {
    expectTypeOf<FormInsertPatchPosition>().not.toBeNever()
  })
  test('FormNodePresence', () => {
    expectTypeOf<FormNodePresence>().toBeObject()
  })
  test('FormPatch', () => {
    expectTypeOf<FormPatch>().not.toBeNever()
  })
  test('FormPatchBase', () => {
    expectTypeOf<FormPatchBase>().toBeObject()
  })
  test('FormPatchJSONValue', () => {
    expectTypeOf<FormPatchJSONValue>().not.toBeNever()
  })
  test('FormPatchOrigin', () => {
    expectTypeOf<FormPatchOrigin>().not.toBeNever()
  })
  test('FormProviderProps', () => {
    expectTypeOf<FormProviderProps>().toBeObject()
  })
  test('FormSetIfMissingPatch', () => {
    expectTypeOf<FormSetIfMissingPatch>().toBeObject()
  })
  test('FormSetPatch', () => {
    expectTypeOf<FormSetPatch>().toBeObject()
  })
  test('FormState', () => {
    expectTypeOf<FormState<any, any>>().not.toBeNever()
  })
  test('FormUnsetPatch', () => {
    expectTypeOf<FormUnsetPatch>().toBeObject()
  })
  test('FormValueContextValue', () => {
    expectTypeOf<FormValueContextValue>().toBeObject()
  })
  test('FromTo', () => {
    expectTypeOf<typeof FromTo>().not.toBeNever()
  })
  test('FromToArrowDirection', () => {
    expectTypeOf<FromToArrowDirection>().not.toBeNever()
  })
  test('FromToIndex', () => {
    expectTypeOf<FromToIndex>().toBeObject()
  })
  test('FromToProps', () => {
    expectTypeOf<FromToProps>().not.toBeNever()
  })
  test('GeneralDocumentListLayoutKey', () => {
    expectTypeOf<GeneralDocumentListLayoutKey>().not.toBeNever()
  })
  test('GeneralPreviewLayoutKey', () => {
    expectTypeOf<GeneralPreviewLayoutKey>().not.toBeNever()
  })
  test('GetFormValueProvider', () => {
    expectTypeOf<typeof GetFormValueProvider>().not.toBeNever()
  })
  test('GetHookCollectionState', () => {
    expectTypeOf<typeof GetHookCollectionState>().not.toBeNever()
  })
  test('GetHookCollectionStateProps', () => {
    expectTypeOf<GetHookCollectionStateProps<any, any>>().toBeObject()
  })
  test('getSearchableTypes', () => {
    expectTypeOf<typeof getSearchableTypes>().not.toBeNever()
  })
  test('getVersionInlineBadge', () => {
    expectTypeOf<typeof getVersionInlineBadge>().not.toBeNever()
  })
  test('GlobalCopyPasteElementHandler', () => {
    expectTypeOf<GlobalCopyPasteElementHandler>().toBeObject()
  })
  test('GlobalPresence', () => {
    expectTypeOf<GlobalPresence>().not.toBeNever()
  })
  test('globalScope', () => {
    expectTypeOf<typeof globalScope>().not.toBeNever()
  })
  test('Grant', () => {
    expectTypeOf<Grant>().toBeObject()
  })
  test('GrantsStore', () => {
    expectTypeOf<GrantsStore>().toBeObject()
  })
  test('GrantsStoreOptions', () => {
    expectTypeOf<GrantsStoreOptions>().not.toBeNever()
  })
  test('GroupChangeNode', () => {
    expectTypeOf<GroupChangeNode>().toBeObject()
  })
  test('HexColor', () => {
    expectTypeOf<HexColor>().not.toBeNever()
  })
  test('HiddenField', () => {
    expectTypeOf<HiddenField>().toBeObject()
  })
  test('HistoryClearedEvent', () => {
    expectTypeOf<HistoryClearedEvent>().toBeObject()
  })
  test('HistoryStore', () => {
    expectTypeOf<HistoryStore>().toBeObject()
  })
  test('HistoryStoreOptions', () => {
    expectTypeOf<HistoryStoreOptions>().toBeObject()
  })
  test('HookCollectionActionHook', () => {
    expectTypeOf<HookCollectionActionHook<any, any>>().toBeObject()
  })
  test('HotkeysProps', () => {
    expectTypeOf<HotkeysProps>().not.toBeNever()
  })
  test('HoveredFieldProvider', () => {
    expectTypeOf<typeof HoveredFieldProvider>().not.toBeNever()
  })
  test('I18nNode', () => {
    expectTypeOf<I18nNode<any>>().not.toBeNever()
  })
  test('I18nSearchOperatorDescriptionKey', () => {
    expectTypeOf<I18nSearchOperatorDescriptionKey>().not.toBeNever()
  })
  test('I18nSearchOperatorNameKey', () => {
    expectTypeOf<I18nSearchOperatorNameKey>().not.toBeNever()
  })
  test('Id', () => {
    expectTypeOf<Id>().not.toBeNever()
  })
  test('IdPair', () => {
    expectTypeOf<IdPair>().toBeObject()
  })
  test('ImageInputProps', () => {
    expectTypeOf<ImageInputProps>().not.toBeNever()
  })
  test('ImageUrlBuilder', () => {
    expectTypeOf<ImageUrlBuilder>().not.toBeNever()
  })
  test('ImperativeToast', () => {
    expectTypeOf<typeof ImperativeToast>().not.toBeNever()
  })
  test('ImplicitLocaleResourceBundle', () => {
    expectTypeOf<ImplicitLocaleResourceBundle>().not.toBeNever()
  })
  test('IncompatibleTypeError', () => {
    expectTypeOf<IncompatibleTypeError>().not.toBeNever()
  })
  test('initialDocumentFieldActions', () => {
    expectTypeOf<typeof initialDocumentFieldActions>().not.toBeNever()
  })
  test('InitialSnapshotEvent', () => {
    expectTypeOf<InitialSnapshotEvent>().toBeObject()
  })
  test('InitialValueErrorMsg', () => {
    expectTypeOf<InitialValueErrorMsg>().toBeObject()
  })
  test('InitialValueLoadingMsg', () => {
    expectTypeOf<InitialValueLoadingMsg>().toBeObject()
  })
  test('InitialValueMsg', () => {
    expectTypeOf<InitialValueMsg>().not.toBeNever()
  })
  test('InitialValueOptions', () => {
    expectTypeOf<InitialValueOptions>().toBeObject()
  })
  test('InitialValueState', () => {
    expectTypeOf<InitialValueState>().toBeObject()
  })
  test('InitialValueSuccessMsg', () => {
    expectTypeOf<InitialValueSuccessMsg>().toBeObject()
  })
  test('InitialValueTemplateItem', () => {
    expectTypeOf<InitialValueTemplateItem>().toBeObject()
  })
  test('InlinePreviewProps', () => {
    expectTypeOf<InlinePreviewProps>().not.toBeNever()
  })
  test('InputProps', () => {
    expectTypeOf<InputProps>().not.toBeNever()
  })
  test('InsufficientPermissionsMessageProps', () => {
    expectTypeOf<InsufficientPermissionsMessageProps>().toBeObject()
  })
  test('InterpolationProp', () => {
    expectTypeOf<InterpolationProp>().not.toBeNever()
  })
  test('InvalidationChannelEvent', () => {
    expectTypeOf<InvalidationChannelEvent>().not.toBeNever()
  })
  test('InvalidItemTypeError', () => {
    expectTypeOf<InvalidItemTypeError>().not.toBeNever()
  })
  test('isCreateDocumentVersionEvent', () => {
    expectTypeOf<typeof isCreateDocumentVersionEvent>().not.toBeNever()
  })
  test('isCreateLiveDocumentEvent', () => {
    expectTypeOf<typeof isCreateLiveDocumentEvent>().not.toBeNever()
  })
  test('isDeleteDocumentGroupEvent', () => {
    expectTypeOf<typeof isDeleteDocumentGroupEvent>().not.toBeNever()
  })
  test('isDeleteDocumentVersionEvent', () => {
    expectTypeOf<typeof isDeleteDocumentVersionEvent>().not.toBeNever()
  })
  test('isDev', () => {
    expectTypeOf<typeof isDev>().not.toBeNever()
  })
  test('isEditDocumentVersionEvent', () => {
    expectTypeOf<typeof isEditDocumentVersionEvent>().not.toBeNever()
  })
  test('IsEqualFunction', () => {
    expectTypeOf<IsEqualFunction<any>>().not.toBeNever()
  })
  test('isProd', () => {
    expectTypeOf<typeof isProd>().not.toBeNever()
  })
  test('isPublishDocumentVersionEvent', () => {
    expectTypeOf<typeof isPublishDocumentVersionEvent>().not.toBeNever()
  })
  test('isReleasePerspective', () => {
    expectTypeOf<typeof isReleasePerspective>().not.toBeNever()
  })
  test('isSanityDefinedAction', () => {
    expectTypeOf<typeof isSanityDefinedAction>().not.toBeNever()
  })
  test('isScheduleDocumentVersionEvent', () => {
    expectTypeOf<typeof isScheduleDocumentVersionEvent>().not.toBeNever()
  })
  test('isUnpublishDocumentEvent', () => {
    expectTypeOf<typeof isUnpublishDocumentEvent>().not.toBeNever()
  })
  test('isUnscheduleDocumentVersionEvent', () => {
    expectTypeOf<typeof isUnscheduleDocumentVersionEvent>().not.toBeNever()
  })
  test('isUpdateLiveDocumentEvent', () => {
    expectTypeOf<typeof isUpdateLiveDocumentEvent>().not.toBeNever()
  })
  test('ItemDiff', () => {
    expectTypeOf<ItemDiff>().not.toBeNever()
  })
  test('ItemProps', () => {
    expectTypeOf<ItemProps>().not.toBeNever()
  })
  test('joinPath', () => {
    expectTypeOf<typeof joinPath>().not.toBeNever()
  })
  test('KeyValueStore', () => {
    expectTypeOf<KeyValueStore>().toBeObject()
  })
  test('KeyValueStoreValue', () => {
    expectTypeOf<KeyValueStoreValue>().not.toBeNever()
  })
  test('LatencyReportEvent', () => {
    expectTypeOf<LatencyReportEvent>().toBeObject()
  })
  test('LATEST', () => {
    expectTypeOf<typeof LATEST>().not.toBeNever()
  })
  test('LayoutProps', () => {
    expectTypeOf<LayoutProps>().toBeObject()
  })
  test('LegacyThemeProps', () => {
    expectTypeOf<LegacyThemeProps>().toBeObject()
  })
  test('LegacyThemeTints', () => {
    expectTypeOf<LegacyThemeTints>().not.toBeNever()
  })
  test('ListenerEvent', () => {
    expectTypeOf<ListenerEvent>().not.toBeNever()
  })
  test('ListenQueryOptions', () => {
    expectTypeOf<ListenQueryOptions>().toBeObject()
  })
  test('ListenQueryParams', () => {
    expectTypeOf<ListenQueryParams>().not.toBeNever()
  })
  test('Loadable', () => {
    expectTypeOf<Loadable<any>>().toBeObject()
  })
  test('LoadableState', () => {
    expectTypeOf<LoadableState<any>>().not.toBeNever()
  })
  test('LoadedState', () => {
    expectTypeOf<LoadedState<any>>().toBeObject()
  })
  test('LoadingState', () => {
    expectTypeOf<LoadingState>().toBeObject()
  })
  test('LoadingTuple', () => {
    expectTypeOf<LoadingTuple<any>>().not.toBeNever()
  })
  test('Locale', () => {
    expectTypeOf<Locale>().toBeObject()
  })
  test('LocaleConfigContext', () => {
    expectTypeOf<LocaleConfigContext>().toBeObject()
  })
  test('LocaleDefinition', () => {
    expectTypeOf<LocaleDefinition>().toBeObject()
  })
  test('LocaleNestedResource', () => {
    expectTypeOf<LocaleNestedResource>().not.toBeNever()
  })
  test('LocalePluginOptions', () => {
    expectTypeOf<LocalePluginOptions>().toBeObject()
  })
  test('LocaleResourceBundle', () => {
    expectTypeOf<LocaleResourceBundle>().toBeObject()
  })
  test('LocaleResourceKey', () => {
    expectTypeOf<LocaleResourceKey>().not.toBeNever()
  })
  test('LocaleResourceRecord', () => {
    expectTypeOf<LocaleResourceRecord>().toBeObject()
  })
  test('LocalesBundlesOption', () => {
    expectTypeOf<LocalesBundlesOption>().not.toBeNever()
  })
  test('LocalesOption', () => {
    expectTypeOf<LocalesOption>().not.toBeNever()
  })
  test('LocaleSource', () => {
    expectTypeOf<LocaleSource>().toBeObject()
  })
  test('LocaleWeekInfo', () => {
    expectTypeOf<LocaleWeekInfo>().toBeObject()
  })
  test('Location', () => {
    expectTypeOf<Location>().toBeObject()
  })
  test('LoginComponentProps', () => {
    expectTypeOf<LoginComponentProps>().not.toBeNever()
  })
  test('LoginMethod', () => {
    expectTypeOf<LoginMethod>().not.toBeNever()
  })
  test('LogoProps', () => {
    expectTypeOf<LogoProps>().toBeObject()
  })
  test('MapDocument', () => {
    expectTypeOf<MapDocument>().not.toBeNever()
  })
  test('MatchWorkspaceOptions', () => {
    expectTypeOf<MatchWorkspaceOptions>().toBeObject()
  })
  test('MatchWorkspaceResult', () => {
    expectTypeOf<MatchWorkspaceResult>().not.toBeNever()
  })
  test('MediaLibraryConfig', () => {
    expectTypeOf<MediaLibraryConfig>().toBeObject()
  })
  test('MediaPreviewProps', () => {
    expectTypeOf<MediaPreviewProps>().not.toBeNever()
  })
  test('MemberField', () => {
    expectTypeOf<typeof MemberField>().not.toBeNever()
  })
  test('MemberFieldProps', () => {
    expectTypeOf<MemberFieldProps>().toBeObject()
  })
  test('MemberFieldSet', () => {
    expectTypeOf<typeof MemberFieldSet>().not.toBeNever()
  })
  test('MemberItemProps', () => {
    expectTypeOf<MemberItemProps>().toBeObject()
  })
  test('MetaInfoProps', () => {
    expectTypeOf<MetaInfoProps>().toBeObject()
  })
  test('MissingConfigFile', () => {
    expectTypeOf<MissingConfigFile>().toBeObject()
  })
  test('MissingKeysError', () => {
    expectTypeOf<MissingKeysError>().not.toBeNever()
  })
  test('MixedArrayError', () => {
    expectTypeOf<MixedArrayError>().not.toBeNever()
  })
  test('MockAuthStoreOptions', () => {
    expectTypeOf<MockAuthStoreOptions>().toBeObject()
  })
  test('MutationEvent', () => {
    expectTypeOf<MutationEvent>().toBeObject()
  })
  test('MutationPatch', () => {
    expectTypeOf<MutationPatch>().not.toBeNever()
  })
  test('MutationPatchMsg', () => {
    expectTypeOf<MutationPatchMsg>().toBeObject()
  })
  test('MutationPayload', () => {
    expectTypeOf<MutationPayload>().toBeObject()
  })
  test('MutationResult', () => {
    expectTypeOf<MutationResult>().not.toBeNever()
  })
  test('NavbarAction', () => {
    expectTypeOf<NavbarAction>().not.toBeNever()
  })
  test('NavbarContextValue', () => {
    expectTypeOf<NavbarContextValue>().toBeObject()
  })
  test('NavbarProps', () => {
    expectTypeOf<NavbarProps>().toBeObject()
  })
  test('NewDocumentCreationContext', () => {
    expectTypeOf<NewDocumentCreationContext>().not.toBeNever()
  })
  test('NewDocumentOptionsContext', () => {
    expectTypeOf<NewDocumentOptionsContext>().toBeObject()
  })
  test('NewDocumentOptionsResolver', () => {
    expectTypeOf<NewDocumentOptionsResolver>().not.toBeNever()
  })
  test('NullDiff', () => {
    expectTypeOf<NullDiff>().not.toBeNever()
  })
  test('NumberDiff', () => {
    expectTypeOf<NumberDiff>().not.toBeNever()
  })
  test('NumberFieldProps', () => {
    expectTypeOf<NumberFieldProps>().toBeObject()
  })
  test('NumberFormNode', () => {
    expectTypeOf<NumberFormNode<any>>().not.toBeNever()
  })
  test('NumberInputProps', () => {
    expectTypeOf<NumberInputProps<any>>().toBeObject()
  })
  test('ObjectArrayFormNode', () => {
    expectTypeOf<ObjectArrayFormNode<any, any>>().toBeObject()
  })
  test('ObjectDiff', () => {
    expectTypeOf<ObjectDiff<any>>().not.toBeNever()
  })
  test('ObjectFieldProps', () => {
    expectTypeOf<ObjectFieldProps<any>>().toBeObject()
  })
  test('ObjectFormNode', () => {
    expectTypeOf<ObjectFormNode<any, any>>().toBeObject()
  })
  test('ObjectInput', () => {
    expectTypeOf<typeof ObjectInput>().not.toBeNever()
  })
  test('ObjectInputMember', () => {
    expectTypeOf<typeof ObjectInputMember>().not.toBeNever()
  })
  test('ObjectInputMemberProps', () => {
    expectTypeOf<ObjectInputMemberProps>().toBeObject()
  })
  test('ObjectInputProps', () => {
    expectTypeOf<ObjectInputProps<any, any>>().toBeObject()
  })
  test('ObjectItem', () => {
    expectTypeOf<ObjectItem>().not.toBeNever()
  })
  test('ObjectItemProps', () => {
    expectTypeOf<ObjectItemProps<any>>().toBeObject()
  })
  test('ObjectMember', () => {
    expectTypeOf<ObjectMember>().not.toBeNever()
  })
  test('ObjectMembers', () => {
    expectTypeOf<typeof ObjectMembers>().not.toBeNever()
  })
  test('ObjectMembersProps', () => {
    expectTypeOf<ObjectMembersProps>().toBeObject()
  })
  test('ObserveDocumentAvailabilityFn', () => {
    expectTypeOf<ObserveDocumentAvailabilityFn>().toBeObject()
  })
  test('ObserveDocumentTypeFromIdFn', () => {
    expectTypeOf<ObserveDocumentTypeFromIdFn>().not.toBeNever()
  })
  test('ObserveForPreviewFn', () => {
    expectTypeOf<ObserveForPreviewFn>().not.toBeNever()
  })
  test('ObservePathsFn', () => {
    expectTypeOf<ObservePathsFn>().toBeObject()
  })
  test('OnPathFocusPayload', () => {
    expectTypeOf<OnPathFocusPayload>().toBeObject()
  })
  test('onRetry', () => {
    expectTypeOf<typeof onRetry>().not.toBeNever()
  })
  test('Opaque', () => {
    expectTypeOf<Opaque<any, any>>().not.toBeNever()
  })
  test('Operation', () => {
    expectTypeOf<Operation<any, any>>().toBeObject()
  })
  test('OperationArgs', () => {
    expectTypeOf<OperationArgs>().toBeObject()
  })
  test('OperationError', () => {
    expectTypeOf<OperationError>().toBeObject()
  })
  test('operationEvents', () => {
    expectTypeOf<typeof operationEvents>().not.toBeNever()
  })
  test('OperationImpl', () => {
    expectTypeOf<OperationImpl<any, any>>().toBeObject()
  })
  test('OperationsAPI', () => {
    expectTypeOf<OperationsAPI>().toBeObject()
  })
  test('OperationSuccess', () => {
    expectTypeOf<OperationSuccess>().toBeObject()
  })
  test('OperatorButtonValueComponentProps', () => {
    expectTypeOf<OperatorButtonValueComponentProps<any>>().toBeObject()
  })
  test('operatorDefinitions', () => {
    expectTypeOf<typeof operatorDefinitions>().not.toBeNever()
  })
  test('OperatorInputComponentProps', () => {
    expectTypeOf<OperatorInputComponentProps<any>>().toBeObject()
  })
  test('Pair', () => {
    expectTypeOf<Pair>().not.toBeNever()
  })
  test('ParsedTimeRef', () => {
    expectTypeOf<ParsedTimeRef>().not.toBeNever()
  })
  test('PartialContext', () => {
    expectTypeOf<PartialContext<any>>().not.toBeNever()
  })
  test('PartialExcept', () => {
    expectTypeOf<PartialExcept<any, any>>().not.toBeNever()
  })
  test('PartialIndexSettings', () => {
    expectTypeOf<PartialIndexSettings>().toBeObject()
  })
  test('PasteOptions', () => {
    expectTypeOf<PasteOptions>().toBeObject()
  })
  test('PatchArg', () => {
    expectTypeOf<PatchArg>().not.toBeNever()
  })
  test('PatchChannel', () => {
    expectTypeOf<PatchChannel>().toBeObject()
  })
  test('PatchEvent', () => {
    expectTypeOf<PatchEvent>().not.toBeNever()
  })
  test('PatchMsg', () => {
    expectTypeOf<PatchMsg>().not.toBeNever()
  })
  test('PatchMsgSubscriber', () => {
    expectTypeOf<PatchMsgSubscriber>().toBeObject()
  })
  test('PendingMutationsEvent', () => {
    expectTypeOf<PendingMutationsEvent>().toBeObject()
  })
  test('PermissionCheckResult', () => {
    expectTypeOf<PermissionCheckResult>().toBeObject()
  })
  test('PerspectiveContextValue', () => {
    expectTypeOf<PerspectiveContextValue>().toBeObject()
  })
  test('PerspectiveNotWriteableReason', () => {
    expectTypeOf<PerspectiveNotWriteableReason>().not.toBeNever()
  })
  test('PerspectiveStack', () => {
    expectTypeOf<PerspectiveStack>().not.toBeNever()
  })
  test('Plugin', () => {
    expectTypeOf<Plugin<any>>().not.toBeNever()
  })
  test('PluginFactory', () => {
    expectTypeOf<PluginFactory<any>>().not.toBeNever()
  })
  test('PluginOptions', () => {
    expectTypeOf<PluginOptions>().toBeObject()
  })
  test('BlockEditor', () => {
    expectTypeOf<typeof BlockEditor>().toBeFunction()
  })
  test('PortableTextInput', () => {
    expectTypeOf<typeof PortableTextInput>().toBeFunction()
  })
  test('PortableTextInputProps', () => {
    expectTypeOf<PortableTextInputProps>().toBeObject()
  })
  test('PortableTextMarker', () => {
    expectTypeOf<PortableTextMarker>().toBeObject()
  })
  test('PortableTextMemberItem', () => {
    expectTypeOf<PortableTextMemberItem>().toBeObject()
  })
  test('PortableTextPluginsProps', () => {
    expectTypeOf<PortableTextPluginsProps>().toBeObject()
  })
  test('PortableTextPreviewLayoutKey', () => {
    expectTypeOf<PortableTextPreviewLayoutKey>().not.toBeNever()
  })
  test('Position', () => {
    expectTypeOf<Position>().not.toBeNever()
  })
  test('PreparedConfig', () => {
    expectTypeOf<PreparedConfig>().toBeObject()
  })
  test('PreparedSnapshot', () => {
    expectTypeOf<PreparedSnapshot>().toBeObject()
  })
  test('PresenceLocation', () => {
    expectTypeOf<PresenceLocation>().toBeObject()
  })
  test('PresenceOverlayProps', () => {
    expectTypeOf<PresenceOverlayProps>().toBeObject()
  })
  test('PresenceScopeProps', () => {
    expectTypeOf<PresenceScopeProps>().toBeObject()
  })
  test('PresenceStore', () => {
    expectTypeOf<PresenceStore>().toBeObject()
  })
  test('PresentUser', () => {
    expectTypeOf<PresentUser>().not.toBeNever()
  })
  test('Previewable', () => {
    expectTypeOf<Previewable>().not.toBeNever()
  })
  test('PreviewableType', () => {
    expectTypeOf<PreviewableType>().not.toBeNever()
  })
  test('PreviewCard', () => {
    expectTypeOf<typeof PreviewCard>().not.toBeNever()
  })
  test('PreviewCardContextValue', () => {
    expectTypeOf<PreviewCardContextValue>().toBeObject()
  })
  test('PreviewComponent', () => {
    expectTypeOf<PreviewComponent>().not.toBeNever()
  })
  test('PreviewLayoutKey', () => {
    expectTypeOf<PreviewLayoutKey>().not.toBeNever()
  })
  test('PreviewMediaDimensions', () => {
    expectTypeOf<PreviewMediaDimensions>().toBeObject()
  })
  test('PreviewPath', () => {
    expectTypeOf<PreviewPath>().not.toBeNever()
  })
  test('PreviewProps', () => {
    expectTypeOf<PreviewProps<any>>().toBeObject()
  })
  test('PrimitiveFieldProps', () => {
    expectTypeOf<PrimitiveFieldProps>().not.toBeNever()
  })
  test('PrimitiveFormNode', () => {
    expectTypeOf<PrimitiveFormNode>().not.toBeNever()
  })
  test('PrimitiveInputElementProps', () => {
    expectTypeOf<PrimitiveInputElementProps>().toBeObject()
  })
  test('PrimitiveInputProps', () => {
    expectTypeOf<PrimitiveInputProps>().not.toBeNever()
  })
  test('PrimitiveItemProps', () => {
    expectTypeOf<PrimitiveItemProps>().toBeObject()
  })
  test('PrimitiveMemberItemProps', () => {
    expectTypeOf<PrimitiveMemberItemProps>().toBeObject()
  })
  test('ProjectData', () => {
    expectTypeOf<ProjectData>().toBeObject()
  })
  test('ProjectDatasetData', () => {
    expectTypeOf<ProjectDatasetData>().toBeObject()
  })
  test('ProjectStore', () => {
    expectTypeOf<ProjectStore>().toBeObject()
  })
  test('PublishDocumentVersionEvent', () => {
    expectTypeOf<PublishDocumentVersionEvent>().toBeObject()
  })
  test('PublishedId', () => {
    expectTypeOf<PublishedId>().not.toBeNever()
  })
  test('QueryParams', () => {
    expectTypeOf<QueryParams>().not.toBeNever()
  })
  test('ReactHook', () => {
    expectTypeOf<ReactHook<any, any>>().not.toBeNever()
  })
  test('RebasePatchMsg', () => {
    expectTypeOf<RebasePatchMsg>().toBeObject()
  })
  test('ReconnectEvent', () => {
    expectTypeOf<ReconnectEvent>().toBeObject()
  })
  test('Rect', () => {
    expectTypeOf<Rect>().toBeObject()
  })
  test('ReferenceDiff', () => {
    expectTypeOf<ReferenceDiff>().not.toBeNever()
  })
  test('ReferenceInputOptions', () => {
    expectTypeOf<ReferenceInputOptions>().toBeObject()
  })
  test('ReferenceInputPreviewCard', () => {
    expectTypeOf<typeof ReferenceInputPreviewCard>().not.toBeNever()
  })
  test('ReferenceInputProps', () => {
    expectTypeOf<ReferenceInputProps>().not.toBeNever()
  })
  test('RegionWithIntersectionDetails', () => {
    expectTypeOf<RegionWithIntersectionDetails>().not.toBeNever()
  })
  test('RelativeTimeOptions', () => {
    expectTypeOf<RelativeTimeOptions>().toBeObject()
  })
  test('RelativeTimeProps', () => {
    expectTypeOf<RelativeTimeProps>().toBeObject()
  })
  test('ReleaseDocument', () => {
    expectTypeOf<ReleaseDocument>().toBeObject()
  })
  test('ReleaseId', () => {
    expectTypeOf<ReleaseId>().not.toBeNever()
  })
  test('RELEASES_INTENT', () => {
    expectTypeOf<typeof RELEASES_INTENT>().not.toBeNever()
  })
  test('RELEASES_STUDIO_CLIENT_OPTIONS', () => {
    expectTypeOf<typeof RELEASES_STUDIO_CLIENT_OPTIONS>().not.toBeNever()
  })
  test('ReleasesNav', () => {
    expectTypeOf<typeof ReleasesNav>().not.toBeNever()
  })
  test('ReleasesNavMenuItemPropsGetter', () => {
    expectTypeOf<ReleasesNavMenuItemPropsGetter>().not.toBeNever()
  })
  test('RemoteSnapshotEvent', () => {
    expectTypeOf<RemoteSnapshotEvent>().not.toBeNever()
  })
  test('remoteSnapshots', () => {
    expectTypeOf<typeof remoteSnapshots>().not.toBeNever()
  })
  test('RemoteSnapshotVersionEvent', () => {
    expectTypeOf<RemoteSnapshotVersionEvent>().not.toBeNever()
  })
  test('removeMissingReferences', () => {
    expectTypeOf<typeof removeMissingReferences>().not.toBeNever()
  })
  test('RenderAnnotationCallback', () => {
    expectTypeOf<RenderAnnotationCallback<any>>().not.toBeNever()
  })
  test('RenderArrayOfObjectsItemCallback', () => {
    expectTypeOf<RenderArrayOfObjectsItemCallback>().not.toBeNever()
  })
  test('RenderArrayOfPrimitivesItemCallback', () => {
    expectTypeOf<RenderArrayOfPrimitivesItemCallback>().not.toBeNever()
  })
  test('RenderBlockActionsCallback', () => {
    expectTypeOf<RenderBlockActionsCallback>().not.toBeNever()
  })
  test('RenderBlockActionsProps', () => {
    expectTypeOf<RenderBlockActionsProps>().toBeObject()
  })
  test('RenderBlockCallback', () => {
    expectTypeOf<RenderBlockCallback<any>>().not.toBeNever()
  })
  test('RenderCustomMarkers', () => {
    expectTypeOf<RenderCustomMarkers>().not.toBeNever()
  })
  test('RenderFieldCallback', () => {
    expectTypeOf<RenderFieldCallback<any>>().not.toBeNever()
  })
  test('RenderInputCallback', () => {
    expectTypeOf<RenderInputCallback<any>>().not.toBeNever()
  })
  test('RenderItemCallback', () => {
    expectTypeOf<RenderItemCallback>().not.toBeNever()
  })
  test('RenderPreviewCallback', () => {
    expectTypeOf<RenderPreviewCallback>().not.toBeNever()
  })
  test('RenderPreviewCallbackProps', () => {
    expectTypeOf<RenderPreviewCallbackProps<any>>().toBeObject()
  })
  test('Reported', () => {
    expectTypeOf<Reported<any>>().not.toBeNever()
  })
  test('ReportedRegionWithRect', () => {
    expectTypeOf<ReportedRegionWithRect<any>>().not.toBeNever()
  })
  test('ReporterHook', () => {
    expectTypeOf<ReporterHook<any>>().not.toBeNever()
  })
  test('resizeObserver', () => {
    expectTypeOf<typeof resizeObserver>().not.toBeNever()
  })
  test('ResolvedUploader', () => {
    expectTypeOf<ResolvedUploader>().not.toBeNever()
  })
  test('resolveInitialValueForType', () => {
    expectTypeOf<typeof resolveInitialValueForType>().not.toBeNever()
  })
  test('ResolveProductionUrlContext', () => {
    expectTypeOf<ResolveProductionUrlContext>().toBeObject()
  })
  test('ResourceCache', () => {
    expectTypeOf<ResourceCache>().toBeObject()
  })
  test('ResourceCacheProviderProps', () => {
    expectTypeOf<ResourceCacheProviderProps>().toBeObject()
  })
  test('RetryingStatus', () => {
    expectTypeOf<RetryingStatus>().not.toBeNever()
  })
  test('RevertChangesButton', () => {
    expectTypeOf<typeof RevertChangesButton>().not.toBeNever()
  })
  test('RovingFocusNavigationType', () => {
    expectTypeOf<RovingFocusNavigationType>().not.toBeNever()
  })
  test('RovingFocusProps', () => {
    expectTypeOf<RovingFocusProps>().toBeObject()
  })
  test('SANITY_PATCH_TYPE', () => {
    expectTypeOf<typeof SANITY_PATCH_TYPE>().not.toBeNever()
  })
  test('SANITY_VERSION', () => {
    expectTypeOf<typeof SANITY_VERSION>().not.toBeNever()
  })
  test('SanityClient', () => {
    expectTypeOf<SanityClient>().not.toBeNever()
  })
  test('SanityClipboardItem', () => {
    expectTypeOf<SanityClipboardItem>().toBeObject()
  })
  test('SanityCreateConfigContextValue', () => {
    expectTypeOf<SanityCreateConfigContextValue>().toBeObject()
  })
  test('SanityDefaultPreview', () => {
    expectTypeOf<typeof SanityDefaultPreview>().not.toBeNever()
  })
  test('SanityDefaultPreviewProps', () => {
    expectTypeOf<SanityDefaultPreviewProps>().toBeObject()
  })
  test('SanityFormConfig', () => {
    expectTypeOf<SanityFormConfig>().toBeObject()
  })
  test('ScheduleDocumentVersionEvent', () => {
    expectTypeOf<ScheduleDocumentVersionEvent>().toBeObject()
  })
  test('ScheduledPublishingPluginOptions', () => {
    expectTypeOf<ScheduledPublishingPluginOptions>().toBeObject()
  })
  test('SchemaError', () => {
    expectTypeOf<SchemaError>().not.toBeNever()
  })
  test('SchemaPluginOptions', () => {
    expectTypeOf<SchemaPluginOptions>().toBeObject()
  })
  test('ScrollContainer', () => {
    expectTypeOf<typeof ScrollContainer>().not.toBeNever()
  })
  test('ScrollContainerProps', () => {
    expectTypeOf<ScrollContainerProps<any>>().toBeObject()
  })
  test('ScrollContextValue', () => {
    expectTypeOf<ScrollContextValue>().toBeObject()
  })
  test('ScrollEventHandler', () => {
    expectTypeOf<ScrollEventHandler>().not.toBeNever()
  })
  test('SearchButton', () => {
    expectTypeOf<typeof SearchButton>().not.toBeNever()
  })
  test('SearchContextValue', () => {
    expectTypeOf<SearchContextValue>().toBeObject()
  })
  test('SearchFactoryOptions', () => {
    expectTypeOf<SearchFactoryOptions>().toBeObject()
  })
  test('SearchFilterDefinition', () => {
    expectTypeOf<SearchFilterDefinition<any>>().not.toBeNever()
  })
  test('SearchHeader', () => {
    expectTypeOf<typeof SearchHeader>().not.toBeNever()
  })
  test('SearchOperatorBase', () => {
    expectTypeOf<SearchOperatorBase>().toBeObject()
  })
  test('SearchOperatorBuilder', () => {
    expectTypeOf<SearchOperatorBuilder<any, any>>().toBeObject()
  })
  test('SearchOperatorButtonValue', () => {
    expectTypeOf<SearchOperatorButtonValue<any>>().not.toBeNever()
  })
  test('SearchOperatorInput', () => {
    expectTypeOf<SearchOperatorInput<any>>().not.toBeNever()
  })
  test('SearchOperatorParams', () => {
    expectTypeOf<SearchOperatorParams<any>>().not.toBeNever()
  })
  test('SearchOperatorType', () => {
    expectTypeOf<SearchOperatorType>().not.toBeNever()
  })
  test('SearchOptions', () => {
    expectTypeOf<SearchOptions>().not.toBeNever()
  })
  test('SearchPopoverProps', () => {
    expectTypeOf<SearchPopoverProps>().toBeObject()
  })
  test('SearchSort', () => {
    expectTypeOf<SearchSort>().not.toBeNever()
  })
  test('SearchTerms', () => {
    expectTypeOf<SearchTerms<any>>().toBeObject()
  })
  test('SearchValueFormatterContext', () => {
    expectTypeOf<SearchValueFormatterContext>().not.toBeNever()
  })
  test('SelectedPerspective', () => {
    expectTypeOf<SelectedPerspective>().not.toBeNever()
  })
  test('Selection', () => {
    expectTypeOf<Selection>().not.toBeNever()
  })
  test('SelectionState', () => {
    expectTypeOf<SelectionState>().not.toBeNever()
  })
  test('Serializeable', () => {
    expectTypeOf<Serializeable<any>>().not.toBeNever()
  })
  test('Session', () => {
    expectTypeOf<Session>().toBeObject()
  })
  test('SESSION_ID', () => {
    expectTypeOf<typeof SESSION_ID>().not.toBeNever()
  })
  test('SetActiveGroupOperation', () => {
    expectTypeOf<SetActiveGroupOperation>().toBeObject()
  })
  test('SharedResizeObserver', () => {
    expectTypeOf<SharedResizeObserver>().toBeObject()
  })
  test('SingleWorkspace', () => {
    expectTypeOf<SingleWorkspace>().not.toBeNever()
  })
  test('Size', () => {
    expectTypeOf<Size>().not.toBeNever()
  })
  test('SlugInputProps', () => {
    expectTypeOf<SlugInputProps>().not.toBeNever()
  })
  test('SnapshotEvent', () => {
    expectTypeOf<SnapshotEvent>().toBeObject()
  })
  test('snapshotPair', () => {
    expectTypeOf<typeof snapshotPair>().not.toBeNever()
  })
  test('Source', () => {
    expectTypeOf<Source>().toBeObject()
  })
  test('SourceClientOptions', () => {
    expectTypeOf<SourceClientOptions>().toBeObject()
  })
  test('SourceOptions', () => {
    expectTypeOf<SourceOptions>().toBeObject()
  })
  test('SourceProviderProps', () => {
    expectTypeOf<SourceProviderProps>().not.toBeNever()
  })
  test('StateTree', () => {
    expectTypeOf<StateTree<any>>().toBeObject()
  })
  test('StaticLocaleResourceBundle', () => {
    expectTypeOf<StaticLocaleResourceBundle>().not.toBeNever()
  })
  test('Status', () => {
    expectTypeOf<Status>().not.toBeNever()
  })
  test('StatusButton', () => {
    expectTypeOf<typeof StatusButton>().not.toBeNever()
  })
  test('StatusButtonProps', () => {
    expectTypeOf<StatusButtonProps>().not.toBeNever()
  })
  test('StringDiff', () => {
    expectTypeOf<StringDiff>().not.toBeNever()
  })
  test('StringDiffSegment', () => {
    expectTypeOf<StringDiffSegment>().not.toBeNever()
  })
  test('StringFieldProps', () => {
    expectTypeOf<StringFieldProps>().toBeObject()
  })
  test('StringFormNode', () => {
    expectTypeOf<StringFormNode<any>>().not.toBeNever()
  })
  test('StringInputProps', () => {
    expectTypeOf<StringInputProps<any>>().toBeObject()
  })
  test('StringSegmentChanged', () => {
    expectTypeOf<StringSegmentChanged>().not.toBeNever()
  })
  test('StringSegmentUnchanged', () => {
    expectTypeOf<StringSegmentUnchanged>().not.toBeNever()
  })
  test('StudioComponents', () => {
    expectTypeOf<StudioComponents>().toBeObject()
  })
  test('StudioComponentsPluginOptions', () => {
    expectTypeOf<StudioComponentsPluginOptions>().toBeObject()
  })
  test('StudioLocaleResourceKeys', () => {
    expectTypeOf<StudioLocaleResourceKeys>().not.toBeNever()
  })
  test('StudioProps', () => {
    expectTypeOf<StudioProps>().toBeObject()
  })
  test('StudioProviderProps', () => {
    expectTypeOf<StudioProviderProps>().toBeObject()
  })
  test('StudioTheme', () => {
    expectTypeOf<StudioTheme>().toBeObject()
  })
  test('StudioThemeColorSchemeKey', () => {
    expectTypeOf<StudioThemeColorSchemeKey>().not.toBeNever()
  })
  test('supportsTouch', () => {
    expectTypeOf<typeof supportsTouch>().not.toBeNever()
  })
  test('SyncState', () => {
    expectTypeOf<SyncState>().toBeObject()
  })
  test('SystemBundle', () => {
    expectTypeOf<SystemBundle>().not.toBeNever()
  })
  test('systemBundles', () => {
    expectTypeOf<typeof systemBundles>().not.toBeNever()
  })
  test('TagsArrayInputProps', () => {
    expectTypeOf<TagsArrayInputProps>().not.toBeNever()
  })
  test('TelephoneInputProps', () => {
    expectTypeOf<TelephoneInputProps>().not.toBeNever()
  })
  test('Template', () => {
    expectTypeOf<Template<any, any>>().toBeObject()
  })
  test('TemplateArrayFieldDefinition', () => {
    expectTypeOf<TemplateArrayFieldDefinition>().not.toBeNever()
  })
  test('TemplateFieldDefinition', () => {
    expectTypeOf<TemplateFieldDefinition>().toBeObject()
  })
  test('TemplateItem', () => {
    expectTypeOf<TemplateItem>().toBeObject()
  })
  test('TemplateOption', () => {
    expectTypeOf<TemplateOption>().toBeObject()
  })
  test('TemplateParameter', () => {
    expectTypeOf<TemplateParameter>().not.toBeNever()
  })
  test('TemplatePermissionsOptions', () => {
    expectTypeOf<TemplatePermissionsOptions>().toBeObject()
  })
  test('TemplatePermissionsResult', () => {
    expectTypeOf<TemplatePermissionsResult<any>>().toBeObject()
  })
  test('TemplatePreviewProps', () => {
    expectTypeOf<TemplatePreviewProps>().toBeObject()
  })
  test('TemplateReferenceTarget', () => {
    expectTypeOf<TemplateReferenceTarget>().toBeObject()
  })
  test('TemplateResolver', () => {
    expectTypeOf<TemplateResolver>().not.toBeNever()
  })
  test('TextInputProps', () => {
    expectTypeOf<TextInputProps>().not.toBeNever()
  })
  test('TextWithTone', () => {
    expectTypeOf<typeof TextWithTone>().not.toBeNever()
  })
  test('TextWithToneProps', () => {
    expectTypeOf<TextWithToneProps>().toBeObject()
  })
  test('TFunction', () => {
    expectTypeOf<TFunction<any, any>>().toBeObject()
  })
  test('TimeAgoOpts', () => {
    expectTypeOf<TimeAgoOpts>().toBeObject()
  })
  test('Timeline', () => {
    expectTypeOf<Timeline>().not.toBeNever()
  })
  test('TIMELINE_ITEM_I18N_KEY_MAPPING', () => {
    expectTypeOf<typeof TIMELINE_ITEM_I18N_KEY_MAPPING>().not.toBeNever()
  })
  test('TimelineController', () => {
    expectTypeOf<TimelineController>().not.toBeNever()
  })
  test('TimelineControllerOptions', () => {
    expectTypeOf<TimelineControllerOptions>().not.toBeNever()
  })
  test('TimelineOptions', () => {
    expectTypeOf<TimelineOptions>().toBeObject()
  })
  test('TimelineState', () => {
    expectTypeOf<TimelineState>().toBeObject()
  })
  test('TimelineStore', () => {
    expectTypeOf<TimelineStore>().toBeObject()
  })
  test('ToastParams', () => {
    expectTypeOf<ToastParams>().toBeObject()
  })
  test('Tool', () => {
    expectTypeOf<Tool<any>>().toBeObject()
  })
  test('ToolLink', () => {
    expectTypeOf<typeof ToolLink>().not.toBeNever()
  })
  test('ToolLinkProps', () => {
    expectTypeOf<ToolLinkProps>().toBeObject()
  })
  test('ToolMenuProps', () => {
    expectTypeOf<ToolMenuProps>().toBeObject()
  })
  test('TooltipOfDisabled', () => {
    expectTypeOf<typeof TooltipOfDisabled>().not.toBeNever()
  })
  test('TrackedArea', () => {
    expectTypeOf<TrackedArea>().toBeObject()
  })
  test('TrackedChange', () => {
    expectTypeOf<TrackedChange>().toBeObject()
  })
  test('TrackerContextGetSnapshot', () => {
    expectTypeOf<TrackerContextGetSnapshot<any>>().not.toBeNever()
  })
  test('TrackerContextStore', () => {
    expectTypeOf<TrackerContextStore<any>>().toBeObject()
  })
  test('Transaction', () => {
    expectTypeOf<Transaction>().toBeObject()
  })
  test('TransformPatches', () => {
    expectTypeOf<typeof TransformPatches>().not.toBeNever()
  })
  test('TranslateComponentMap', () => {
    expectTypeOf<TranslateComponentMap>().not.toBeNever()
  })
  test('TranslationProps', () => {
    expectTypeOf<TranslationProps>().toBeObject()
  })
  test('TypeAnnotationMismatchError', () => {
    expectTypeOf<TypeAnnotationMismatchError>().not.toBeNever()
  })
  test('TypeChangeDiff', () => {
    expectTypeOf<TypeChangeDiff>().not.toBeNever()
  })
  test('TypeTarget', () => {
    expectTypeOf<TypeTarget>().toBeObject()
  })
  test('uncaughtErrorHandler', () => {
    expectTypeOf<typeof uncaughtErrorHandler>().not.toBeNever()
  })
  test('UndeclaredMembersError', () => {
    expectTypeOf<UndeclaredMembersError>().not.toBeNever()
  })
  test('UnitFormatter', () => {
    expectTypeOf<UnitFormatter>().not.toBeNever()
  })
  test('UnpublishDocumentEvent', () => {
    expectTypeOf<UnpublishDocumentEvent>().toBeObject()
  })
  test('UnscheduleDocumentVersionEvent', () => {
    expectTypeOf<UnscheduleDocumentVersionEvent>().toBeObject()
  })
  test('UpdateLiveDocumentEvent', () => {
    expectTypeOf<UpdateLiveDocumentEvent>().toBeObject()
  })
  test('Uploader', () => {
    expectTypeOf<Uploader<any>>().not.toBeNever()
  })
  test('UploaderDef', () => {
    expectTypeOf<UploaderDef>().not.toBeNever()
  })
  test('UploaderResolver', () => {
    expectTypeOf<UploaderResolver<any>>().not.toBeNever()
  })
  test('UploadEvent', () => {
    expectTypeOf<UploadEvent>().toBeObject()
  })
  test('UploadOptions', () => {
    expectTypeOf<UploadOptions>().not.toBeNever()
  })
  test('UploadProgressEvent', () => {
    expectTypeOf<UploadProgressEvent>().not.toBeNever()
  })
  test('UpsellDialogDismissed', () => {
    expectTypeOf<typeof UpsellDialogDismissed>().not.toBeNever()
  })
  test('UpsellDialogLearnMoreCtaClicked', () => {
    expectTypeOf<typeof UpsellDialogLearnMoreCtaClicked>().not.toBeNever()
  })
  test('UpsellDialogUpgradeCtaClicked', () => {
    expectTypeOf<typeof UpsellDialogUpgradeCtaClicked>().not.toBeNever()
  })
  test('UpsellDialogViewed', () => {
    expectTypeOf<typeof UpsellDialogViewed>().not.toBeNever()
  })
  test('UpsellDialogViewedInfo', () => {
    expectTypeOf<UpsellDialogViewedInfo>().toBeObject()
  })
  test('UrlInputProps', () => {
    expectTypeOf<UrlInputProps>().not.toBeNever()
  })
  test('useCanvasCompanionDoc', () => {
    expectTypeOf<typeof useCanvasCompanionDoc>().not.toBeNever()
  })
  test('useChangeIndicatorsReporter', () => {
    expectTypeOf<typeof useChangeIndicatorsReporter>().not.toBeNever()
  })
  test('useCopyPaste', () => {
    expectTypeOf<typeof useCopyPaste>().not.toBeNever()
  })
  test('UseDateTimeFormatOptions', () => {
    expectTypeOf<UseDateTimeFormatOptions>().not.toBeNever()
  })
  test('useDocumentPairPermissionsFromHookFactory', () => {
    expectTypeOf<typeof useDocumentPairPermissionsFromHookFactory>().not.toBeNever()
  })
  test('useDocumentVersionTypeSortedList', () => {
    expectTypeOf<typeof useDocumentVersionTypeSortedList>().not.toBeNever()
  })
  test('UseFormattedDurationOptions', () => {
    expectTypeOf<UseFormattedDurationOptions>().toBeObject()
  })
  test('UseFormStateOptions', () => {
    expectTypeOf<UseFormStateOptions>().toBeObject()
  })
  test('useIsReleaseActive', () => {
    expectTypeOf<typeof useIsReleaseActive>().not.toBeNever()
  })
  test('UseListFormatOptions', () => {
    expectTypeOf<UseListFormatOptions>().toBeObject()
  })
  test('UseManageFavoriteProps', () => {
    expectTypeOf<UseManageFavoriteProps>().toBeObject()
  })
  test('useNavigateToCanvasDoc', () => {
    expectTypeOf<typeof useNavigateToCanvasDoc>().not.toBeNever()
  })
  test('usEnglishLocale', () => {
    expectTypeOf<typeof usEnglishLocale>().not.toBeNever()
  })
  test('UseNumberFormatOptions', () => {
    expectTypeOf<UseNumberFormatOptions>().not.toBeNever()
  })
  test('useOnlyHasVersions', () => {
    expectTypeOf<typeof useOnlyHasVersions>().not.toBeNever()
  })
  test('UserAvatarProps', () => {
    expectTypeOf<UserAvatarProps>().toBeObject()
  })
  test('UserColor', () => {
    expectTypeOf<UserColor>().toBeObject()
  })
  test('UserColorHue', () => {
    expectTypeOf<UserColorHue>().not.toBeNever()
  })
  test('UserColorManager', () => {
    expectTypeOf<UserColorManager>().toBeObject()
  })
  test('UserColorManagerOptions', () => {
    expectTypeOf<UserColorManagerOptions>().toBeObject()
  })
  test('UserColorManagerProviderProps', () => {
    expectTypeOf<UserColorManagerProviderProps>().toBeObject()
  })
  test('useReconnectingToast', () => {
    expectTypeOf<typeof useReconnectingToast>().not.toBeNever()
  })
  test('UserId', () => {
    expectTypeOf<UserId>().not.toBeNever()
  })
  test('UserListWithPermissionsHookValue', () => {
    expectTypeOf<UserListWithPermissionsHookValue>().not.toBeNever()
  })
  test('UserListWithPermissionsOptions', () => {
    expectTypeOf<UserListWithPermissionsOptions>().toBeObject()
  })
  test('UserSessionPair', () => {
    expectTypeOf<UserSessionPair>().toBeObject()
  })
  test('UserStore', () => {
    expectTypeOf<UserStore>().toBeObject()
  })
  test('UserStoreOptions', () => {
    expectTypeOf<UserStoreOptions>().toBeObject()
  })
  test('UserWithPermission', () => {
    expectTypeOf<UserWithPermission>().toBeObject()
  })
  test('useStudioUrl', () => {
    expectTypeOf<typeof useStudioUrl>().not.toBeNever()
  })
  test('useTemplatePermissionsFromHookFactory', () => {
    expectTypeOf<typeof useTemplatePermissionsFromHookFactory>().not.toBeNever()
  })
  test('UseTranslationOptions', () => {
    expectTypeOf<UseTranslationOptions<any>>().toBeObject()
  })
  test('UseTranslationResponse', () => {
    expectTypeOf<UseTranslationResponse<any, any>>().not.toBeNever()
  })
  test('UseUnitFormatterOptions', () => {
    expectTypeOf<UseUnitFormatterOptions>().not.toBeNever()
  })
  test('useWorkspaceSchemaId', () => {
    expectTypeOf<typeof useWorkspaceSchemaId>().not.toBeNever()
  })
  test('ValidateDocumentOptions', () => {
    expectTypeOf<ValidateDocumentOptions>().toBeObject()
  })
  test('ValidateWorkspaceOptions', () => {
    expectTypeOf<ValidateWorkspaceOptions>().toBeObject()
  })
  test('validation', () => {
    expectTypeOf<typeof validation>().not.toBeNever()
  })
  test('ValidationLocaleResourceKeys', () => {
    expectTypeOf<ValidationLocaleResourceKeys>().not.toBeNever()
  })
  test('ValuelessSearchOperatorBuilder', () => {
    expectTypeOf<ValuelessSearchOperatorBuilder<any>>().toBeObject()
  })
  test('ValuelessSearchOperatorParams', () => {
    expectTypeOf<ValuelessSearchOperatorParams>().not.toBeNever()
  })
  test('VERSION_FOLDER', () => {
    expectTypeOf<typeof VERSION_FOLDER>().not.toBeNever()
  })
  test('VersionChip', () => {
    expectTypeOf<typeof VersionChip>().not.toBeNever()
  })
  test('VersionInfoDocumentStub', () => {
    expectTypeOf<VersionInfoDocumentStub>().toBeObject()
  })
  test('VersionInlineBadge', () => {
    expectTypeOf<typeof VersionInlineBadge>().not.toBeNever()
  })
  test('VirtualizerScrollInstance', () => {
    expectTypeOf<VirtualizerScrollInstance>().toBeObject()
  })
  test('WelcomeEvent', () => {
    expectTypeOf<WelcomeEvent>().toBeObject()
  })
  test('WithVersion', () => {
    expectTypeOf<WithVersion<any>>().not.toBeNever()
  })
  test('Workspace', () => {
    expectTypeOf<Workspace>().toBeObject()
  })
  test('WorkspaceLike', () => {
    expectTypeOf<WorkspaceLike>().toBeObject()
  })
  test('WorkspaceOptions', () => {
    expectTypeOf<WorkspaceOptions>().toBeObject()
  })
  test('WorkspaceProviderProps', () => {
    expectTypeOf<WorkspaceProviderProps>().toBeObject()
  })
  test('WorkspacesContextValue', () => {
    expectTypeOf<WorkspacesContextValue>().not.toBeNever()
  })
  test('WorkspacesProviderProps', () => {
    expectTypeOf<WorkspacesProviderProps>().toBeObject()
  })
  test('WorkspaceSummary', () => {
    expectTypeOf<WorkspaceSummary>().toBeObject()
  })
  test('ZIndexContextValue', () => {
    expectTypeOf<ZIndexContextValue>().toBeObject()
  })
  test('ZIndexContextValueKey', () => {
    expectTypeOf<ZIndexContextValueKey>().not.toBeNever()
  })
  test('defineArrayMember', () => {
    expectTypeOf<typeof defineArrayMember>().toBeFunction()
  })
  test('defineAssetAspect', () => {
    expectTypeOf<typeof defineAssetAspect>().toBeFunction()
  })
  test('defineField', () => {
    expectTypeOf<typeof defineField>().toBeFunction()
  })
  test('defineType', () => {
    expectTypeOf<typeof defineType>().toBeFunction()
  })
  test('isArrayOfBlocksSchemaType', () => {
    expectTypeOf<typeof isArrayOfBlocksSchemaType>().toBeFunction()
  })
  test('isArrayOfObjectsSchemaType', () => {
    expectTypeOf<typeof isArrayOfObjectsSchemaType>().toBeFunction()
  })
  test('isArrayOfPrimitivesSchemaType', () => {
    expectTypeOf<typeof isArrayOfPrimitivesSchemaType>().toBeFunction()
  })
  test('isArraySchemaType', () => {
    expectTypeOf<typeof isArraySchemaType>().toBeFunction()
  })
  test('isAssetAspect', () => {
    expectTypeOf<typeof isAssetAspect>().toBeFunction()
  })
  test('isBlockChildrenObjectField', () => {
    expectTypeOf<typeof isBlockChildrenObjectField>().toBeFunction()
  })
  test('isBlockListObjectField', () => {
    expectTypeOf<typeof isBlockListObjectField>().toBeFunction()
  })
  test('isBlockSchemaType', () => {
    expectTypeOf<typeof isBlockSchemaType>().toBeFunction()
  })
  test('isBlockStyleObjectField', () => {
    expectTypeOf<typeof isBlockStyleObjectField>().toBeFunction()
  })
  test('isBooleanSchemaType', () => {
    expectTypeOf<typeof isBooleanSchemaType>().toBeFunction()
  })
  test('isCreateIfNotExistsMutation', () => {
    expectTypeOf<typeof isCreateIfNotExistsMutation>().toBeFunction()
  })
  test('isCreateMutation', () => {
    expectTypeOf<typeof isCreateMutation>().toBeFunction()
  })
  test('isCreateOrReplaceMutation', () => {
    expectTypeOf<typeof isCreateOrReplaceMutation>().toBeFunction()
  })
  test('isCreateSquashedMutation', () => {
    expectTypeOf<typeof isCreateSquashedMutation>().toBeFunction()
  })
  test('isCrossDatasetReference', () => {
    expectTypeOf<typeof isCrossDatasetReference>().toBeFunction()
  })
  test('isCrossDatasetReferenceSchemaType', () => {
    expectTypeOf<typeof isCrossDatasetReferenceSchemaType>().toBeFunction()
  })
  test('isDateTimeSchemaType', () => {
    expectTypeOf<typeof isDateTimeSchemaType>().toBeFunction()
  })
  test('isDeleteMutation', () => {
    expectTypeOf<typeof isDeleteMutation>().toBeFunction()
  })
  test('isDeprecatedSchemaType', () => {
    expectTypeOf<typeof isDeprecatedSchemaType>().toBeFunction()
  })
  test('isDeprecationConfiguration', () => {
    expectTypeOf<typeof isDeprecationConfiguration>().toBeFunction()
  })
  test('isDocumentSchemaType', () => {
    expectTypeOf<typeof isDocumentSchemaType>().toBeFunction()
  })
  test('isFileSchemaType', () => {
    expectTypeOf<typeof isFileSchemaType>().toBeFunction()
  })
  test('isGlobalDocumentReference', () => {
    expectTypeOf<typeof isGlobalDocumentReference>().toBeFunction()
  })
  test('isImage', () => {
    expectTypeOf<typeof isImage>().toBeFunction()
  })
  test('isImageSchemaType', () => {
    expectTypeOf<typeof isImageSchemaType>().toBeFunction()
  })
  test('isIndexSegment', () => {
    expectTypeOf<typeof isIndexSegment>().toBeFunction()
  })
  test('isIndexTuple', () => {
    expectTypeOf<typeof isIndexTuple>().toBeFunction()
  })
  test('isKeyedObject', () => {
    expectTypeOf<typeof isKeyedObject>().toBeFunction()
  })
  test('isKeySegment', () => {
    expectTypeOf<typeof isKeySegment>().toBeFunction()
  })
  test('isNumberSchemaType', () => {
    expectTypeOf<typeof isNumberSchemaType>().toBeFunction()
  })
  test('isObjectSchemaType', () => {
    expectTypeOf<typeof isObjectSchemaType>().toBeFunction()
  })
  test('isPatchMutation', () => {
    expectTypeOf<typeof isPatchMutation>().toBeFunction()
  })
  test('isPortableTextListBlock', () => {
    expectTypeOf<typeof isPortableTextListBlock>().toBeFunction()
  })
  test('isPortableTextSpan', () => {
    expectTypeOf<typeof isPortableTextSpan>().toBeFunction()
  })
  test('isPortableTextTextBlock', () => {
    expectTypeOf<typeof isPortableTextTextBlock>().toBeFunction()
  })
  test('isPrimitiveSchemaType', () => {
    expectTypeOf<typeof isPrimitiveSchemaType>().toBeFunction()
  })
  test('isReference', () => {
    expectTypeOf<typeof isReference>().toBeFunction()
  })
  test('isReferenceSchemaType', () => {
    expectTypeOf<typeof isReferenceSchemaType>().toBeFunction()
  })
  test('isSanityDocument', () => {
    expectTypeOf<typeof isSanityDocument>().toBeFunction()
  })
  test('isSearchStrategy', () => {
    expectTypeOf<typeof isSearchStrategy>().toBeFunction()
  })
  test('isSlug', () => {
    expectTypeOf<typeof isSlug>().toBeFunction()
  })
  test('isSpanSchemaType', () => {
    expectTypeOf<typeof isSpanSchemaType>().toBeFunction()
  })
  test('isStringSchemaType', () => {
    expectTypeOf<typeof isStringSchemaType>().toBeFunction()
  })
  test('isTitledListValue', () => {
    expectTypeOf<typeof isTitledListValue>().toBeFunction()
  })
  test('isTypedObject', () => {
    expectTypeOf<typeof isTypedObject>().toBeFunction()
  })
  test('isValidationError', () => {
    expectTypeOf<typeof isValidationError>().toBeFunction()
  })
  test('isValidationErrorMarker', () => {
    expectTypeOf<typeof isValidationErrorMarker>().toBeFunction()
  })
  test('isValidationInfo', () => {
    expectTypeOf<typeof isValidationInfo>().toBeFunction()
  })
  test('isValidationInfoMarker', () => {
    expectTypeOf<typeof isValidationInfoMarker>().toBeFunction()
  })
  test('isValidationWarning', () => {
    expectTypeOf<typeof isValidationWarning>().toBeFunction()
  })
  test('isValidationWarningMarker', () => {
    expectTypeOf<typeof isValidationWarningMarker>().toBeFunction()
  })
  test('typed', () => {
    expectTypeOf<typeof typed>().toBeFunction()
  })
  test('ArrayActionName', () => {
    expectTypeOf<ArrayActionName>().not.toBeNever()
  })
  test('ArrayDefinition', () => {
    expectTypeOf<ArrayDefinition>().toBeObject()
  })
  test('ArrayDefinition', () => {
    expectTypeOf<ArrayDefinition>().toBeObject()
  })
  test('ArrayDefinition', () => {
    expectTypeOf<ArrayDefinition>().toBeObject()
  })
  test('ArrayDefinition', () => {
    expectTypeOf<ArrayDefinition>().toBeObject()
  })
  test('ArrayOfEntry', () => {
    expectTypeOf<ArrayOfEntry<any>>().not.toBeNever()
  })
  test('ArrayOfType', () => {
    expectTypeOf<ArrayOfType<any, any>>().not.toBeNever()
  })
  test('ArrayOptions', () => {
    expectTypeOf<ArrayOptions<any>>().toBeObject()
  })
  test('ArrayRule', () => {
    expectTypeOf<ArrayRule<any>>().toBeObject()
  })
  test('ArraySchemaType', () => {
    expectTypeOf<ArraySchemaType<any>>().toBeObject()
  })
  test('ArraySchemaTypeOf', () => {
    expectTypeOf<ArraySchemaTypeOf<any>>().not.toBeNever()
  })
  test('Asset', () => {
    expectTypeOf<Asset>().toBeObject()
  })
  test('AssetFromSource', () => {
    expectTypeOf<AssetFromSource>().not.toBeNever()
  })
  test('AssetMetadataType', () => {
    expectTypeOf<AssetMetadataType>().not.toBeNever()
  })
  test('AssetSchemaTypeOptions', () => {
    expectTypeOf<AssetSchemaTypeOptions>().toBeObject()
  })
  test('AssetSource', () => {
    expectTypeOf<AssetSource>().toBeObject()
  })
  test('AssetSourceComponentProps', () => {
    expectTypeOf<AssetSourceComponentProps>().toBeObject()
  })
  test('AssetSourceSpec', () => {
    expectTypeOf<AssetSourceSpec>().toBeObject()
  })
  test('AssetSourceUploader', () => {
    expectTypeOf<AssetSourceUploader>().toBeObject()
  })
  test('AssetSourceUploaderClass', () => {
    expectTypeOf<AssetSourceUploaderClass>().not.toBeNever()
  })
  test('AssetSourceUploadEvent', () => {
    expectTypeOf<AssetSourceUploadEvent>().not.toBeNever()
  })
  test('AssetSourceUploadEventAbort', () => {
    expectTypeOf<AssetSourceUploadEventAbort>().not.toBeNever()
  })
  test('AssetSourceUploadEventAllComplete', () => {
    expectTypeOf<AssetSourceUploadEventAllComplete>().not.toBeNever()
  })
  test('AssetSourceUploadEventError', () => {
    expectTypeOf<AssetSourceUploadEventError>().not.toBeNever()
  })
  test('AssetSourceUploadEventProgress', () => {
    expectTypeOf<AssetSourceUploadEventProgress>().not.toBeNever()
  })
  test('AssetSourceUploadEventStatus', () => {
    expectTypeOf<AssetSourceUploadEventStatus>().not.toBeNever()
  })
  test('AssetSourceUploadFile', () => {
    expectTypeOf<AssetSourceUploadFile>().toBeObject()
  })
  test('AssetSourceUploadSubscriber', () => {
    expectTypeOf<AssetSourceUploadSubscriber>().not.toBeNever()
  })
  test('AutocompleteString', () => {
    expectTypeOf<AutocompleteString>().not.toBeNever()
  })
  test('BaseSchemaDefinition', () => {
    expectTypeOf<BaseSchemaDefinition>().toBeObject()
  })
  test('BaseSchemaType', () => {
    expectTypeOf<BaseSchemaType>().toBeObject()
  })
  test('BaseSchemaTypeOptions', () => {
    expectTypeOf<BaseSchemaTypeOptions>().toBeObject()
  })
  test('BlockAnnotationDefinition', () => {
    expectTypeOf<BlockAnnotationDefinition>().toBeObject()
  })
  test('BlockAnnotationDefinition', () => {
    expectTypeOf<BlockAnnotationDefinition>().toBeObject()
  })
  test('BlockAnnotationDefinition', () => {
    expectTypeOf<BlockAnnotationDefinition>().toBeObject()
  })
  test('BlockAnnotationDefinition', () => {
    expectTypeOf<BlockAnnotationDefinition>().toBeObject()
  })
  test('BlockChildrenObjectField', () => {
    expectTypeOf<BlockChildrenObjectField>().not.toBeNever()
  })
  test('BlockDecoratorDefinition', () => {
    expectTypeOf<BlockDecoratorDefinition>().toBeObject()
  })
  test('BlockDecoratorDefinition', () => {
    expectTypeOf<BlockDecoratorDefinition>().toBeObject()
  })
  test('BlockDecoratorDefinition', () => {
    expectTypeOf<BlockDecoratorDefinition>().toBeObject()
  })
  test('BlockDecoratorDefinition', () => {
    expectTypeOf<BlockDecoratorDefinition>().toBeObject()
  })
  test('BlockDefinition', () => {
    expectTypeOf<BlockDefinition>().toBeObject()
  })
  test('BlockDefinition', () => {
    expectTypeOf<BlockDefinition>().toBeObject()
  })
  test('BlockDefinition', () => {
    expectTypeOf<BlockDefinition>().toBeObject()
  })
  test('BlockDefinition', () => {
    expectTypeOf<BlockDefinition>().toBeObject()
  })
  test('BlockListDefinition', () => {
    expectTypeOf<BlockListDefinition>().toBeObject()
  })
  test('BlockListDefinition', () => {
    expectTypeOf<BlockListDefinition>().toBeObject()
  })
  test('BlockListDefinition', () => {
    expectTypeOf<BlockListDefinition>().toBeObject()
  })
  test('BlockListDefinition', () => {
    expectTypeOf<BlockListDefinition>().toBeObject()
  })
  test('BlockListObjectField', () => {
    expectTypeOf<BlockListObjectField>().not.toBeNever()
  })
  test('BlockMarksDefinition', () => {
    expectTypeOf<BlockMarksDefinition>().toBeObject()
  })
  test('BlockOptions', () => {
    expectTypeOf<BlockOptions>().toBeObject()
  })
  test('BlockRule', () => {
    expectTypeOf<BlockRule>().toBeObject()
  })
  test('BlockSchemaType', () => {
    expectTypeOf<BlockSchemaType>().toBeObject()
  })
  test('BlockStyleDefinition', () => {
    expectTypeOf<BlockStyleDefinition>().toBeObject()
  })
  test('BlockStyleDefinition', () => {
    expectTypeOf<BlockStyleDefinition>().toBeObject()
  })
  test('BlockStyleDefinition', () => {
    expectTypeOf<BlockStyleDefinition>().toBeObject()
  })
  test('BlockStyleDefinition', () => {
    expectTypeOf<BlockStyleDefinition>().toBeObject()
  })
  test('BlockStyleObjectField', () => {
    expectTypeOf<BlockStyleObjectField>().not.toBeNever()
  })
  test('BooleanDefinition', () => {
    expectTypeOf<BooleanDefinition>().toBeObject()
  })
  test('BooleanDefinition', () => {
    expectTypeOf<BooleanDefinition>().toBeObject()
  })
  test('BooleanDefinition', () => {
    expectTypeOf<BooleanDefinition>().toBeObject()
  })
  test('BooleanDefinition', () => {
    expectTypeOf<BooleanDefinition>().toBeObject()
  })
  test('BooleanOptions', () => {
    expectTypeOf<BooleanOptions>().toBeObject()
  })
  test('BooleanRule', () => {
    expectTypeOf<BooleanRule>().toBeObject()
  })
  test('BooleanSchemaType', () => {
    expectTypeOf<BooleanSchemaType>().toBeObject()
  })
  test('CanvasAppOptions', () => {
    expectTypeOf<CanvasAppOptions>().toBeObject()
  })
  test('CollapseOptions', () => {
    expectTypeOf<CollapseOptions>().toBeObject()
  })
  test('ConditionalIndexAccess', () => {
    expectTypeOf<ConditionalIndexAccess<any, any>>().not.toBeNever()
  })
  test('ConditionalProperty', () => {
    expectTypeOf<ConditionalProperty>().not.toBeNever()
  })
  test('ConditionalPropertyCallback', () => {
    expectTypeOf<ConditionalPropertyCallback>().not.toBeNever()
  })
  test('ConditionalPropertyCallbackContext', () => {
    expectTypeOf<ConditionalPropertyCallbackContext>().toBeObject()
  })
  test('CreateIfNotExistsMutation', () => {
    expectTypeOf<CreateIfNotExistsMutation>().toBeObject()
  })
  test('CreateMutation', () => {
    expectTypeOf<CreateMutation>().toBeObject()
  })
  test('CreateOrReplaceMutation', () => {
    expectTypeOf<CreateOrReplaceMutation>().toBeObject()
  })
  test('CreateSquashedMutation', () => {
    expectTypeOf<CreateSquashedMutation>().toBeObject()
  })
  test('CrossDatasetReferenceDefinition', () => {
    expectTypeOf<CrossDatasetReferenceDefinition>().toBeObject()
  })
  test('CrossDatasetReferenceDefinition', () => {
    expectTypeOf<CrossDatasetReferenceDefinition>().toBeObject()
  })
  test('CrossDatasetReferenceDefinition', () => {
    expectTypeOf<CrossDatasetReferenceDefinition>().toBeObject()
  })
  test('CrossDatasetReferenceDefinition', () => {
    expectTypeOf<CrossDatasetReferenceDefinition>().toBeObject()
  })
  test('CrossDatasetReferenceFilterResolver', () => {
    expectTypeOf<CrossDatasetReferenceFilterResolver>().not.toBeNever()
  })
  test('CrossDatasetReferenceFilterSearchOptions', () => {
    expectTypeOf<CrossDatasetReferenceFilterSearchOptions>().not.toBeNever()
  })
  test('CrossDatasetReferenceSchemaType', () => {
    expectTypeOf<CrossDatasetReferenceSchemaType>().toBeObject()
  })
  test('CrossDatasetReferenceValue', () => {
    expectTypeOf<CrossDatasetReferenceValue>().toBeObject()
  })
  test('CrossDatasetType', () => {
    expectTypeOf<CrossDatasetType>().toBeObject()
  })
  test('CurrentUser', () => {
    expectTypeOf<CurrentUser>().toBeObject()
  })
  test('CustomValidator', () => {
    expectTypeOf<CustomValidator<any>>().toBeObject()
  })
  test('CustomValidatorResult', () => {
    expectTypeOf<CustomValidatorResult>().not.toBeNever()
  })
  test('DateDefinition', () => {
    expectTypeOf<DateDefinition>().toBeObject()
  })
  test('DateDefinition', () => {
    expectTypeOf<DateDefinition>().toBeObject()
  })
  test('DateDefinition', () => {
    expectTypeOf<DateDefinition>().toBeObject()
  })
  test('DateDefinition', () => {
    expectTypeOf<DateDefinition>().toBeObject()
  })
  test('DateOptions', () => {
    expectTypeOf<DateOptions>().toBeObject()
  })
  test('DateRule', () => {
    expectTypeOf<DateRule>().toBeObject()
  })
  test('DatetimeDefinition', () => {
    expectTypeOf<DatetimeDefinition>().toBeObject()
  })
  test('DatetimeDefinition', () => {
    expectTypeOf<DatetimeDefinition>().toBeObject()
  })
  test('DatetimeDefinition', () => {
    expectTypeOf<DatetimeDefinition>().toBeObject()
  })
  test('DatetimeDefinition', () => {
    expectTypeOf<DatetimeDefinition>().toBeObject()
  })
  test('DatetimeOptions', () => {
    expectTypeOf<DatetimeOptions>().toBeObject()
  })
  test('DatetimeRule', () => {
    expectTypeOf<DatetimeRule>().toBeObject()
  })
  test('DefineArrayMemberBase', () => {
    expectTypeOf<DefineArrayMemberBase<any, any>>().not.toBeNever()
  })
  test('DefineSchemaBase', () => {
    expectTypeOf<DefineSchemaBase<any, any>>().not.toBeNever()
  })
  test('DefineSchemaOptions', () => {
    expectTypeOf<DefineSchemaOptions<any, any>>().toBeObject()
  })
  test('DefineSchemaType', () => {
    expectTypeOf<DefineSchemaType<any, any>>().not.toBeNever()
  })
  test('DeleteMutation', () => {
    expectTypeOf<DeleteMutation>().toBeObject()
  })
  test('DeprecatedProperty', () => {
    expectTypeOf<DeprecatedProperty>().toBeObject()
  })
  test('DeprecatedSchemaType', () => {
    expectTypeOf<DeprecatedSchemaType<any>>().not.toBeNever()
  })
  test('DeprecationConfiguration', () => {
    expectTypeOf<DeprecationConfiguration>().toBeObject()
  })
  test('DocumentDefinition', () => {
    expectTypeOf<DocumentDefinition>().toBeObject()
  })
  test('DocumentDefinition', () => {
    expectTypeOf<DocumentDefinition>().toBeObject()
  })
  test('DocumentDefinition', () => {
    expectTypeOf<DocumentDefinition>().toBeObject()
  })
  test('DocumentDefinition', () => {
    expectTypeOf<DocumentDefinition>().toBeObject()
  })
  test('DocumentOptions', () => {
    expectTypeOf<DocumentOptions>().toBeObject()
  })
  test('DocumentRule', () => {
    expectTypeOf<DocumentRule>().toBeObject()
  })
  test('EmailDefinition', () => {
    expectTypeOf<EmailDefinition>().toBeObject()
  })
  test('EmailDefinition', () => {
    expectTypeOf<EmailDefinition>().toBeObject()
  })
  test('EmailDefinition', () => {
    expectTypeOf<EmailDefinition>().toBeObject()
  })
  test('EmailDefinition', () => {
    expectTypeOf<EmailDefinition>().toBeObject()
  })
  test('EmailOptions', () => {
    expectTypeOf<EmailOptions>().toBeObject()
  })
  test('EmailRule', () => {
    expectTypeOf<EmailRule>().toBeObject()
  })
  test('EmptyProps', () => {
    expectTypeOf<EmptyProps>().toBeObject()
  })
  test('EnumListProps', () => {
    expectTypeOf<EnumListProps<any>>().toBeObject()
  })
  test('FieldDefinition', () => {
    expectTypeOf<FieldDefinition<any, any>>().not.toBeNever()
  })
  test('FieldDefinitionBase', () => {
    expectTypeOf<FieldDefinitionBase>().toBeObject()
  })
  test('FieldGroup', () => {
    expectTypeOf<FieldGroup>().toBeObject()
  })
  test('FieldGroupDefinition', () => {
    expectTypeOf<FieldGroupDefinition>().not.toBeNever()
  })
  test('FieldReference', () => {
    expectTypeOf<FieldReference>().toBeObject()
  })
  test('FieldRules', () => {
    expectTypeOf<FieldRules>().not.toBeNever()
  })
  test('Fieldset', () => {
    expectTypeOf<Fieldset>().not.toBeNever()
  })
  test('FieldsetDefinition', () => {
    expectTypeOf<FieldsetDefinition>().not.toBeNever()
  })
  test('File', () => {
    expectTypeOf<File>().toBeObject()
  })
  test('FileAsset', () => {
    expectTypeOf<FileAsset>().toBeObject()
  })
  test('FileDefinition', () => {
    expectTypeOf<FileDefinition>().toBeObject()
  })
  test('FileDefinition', () => {
    expectTypeOf<FileDefinition>().toBeObject()
  })
  test('FileDefinition', () => {
    expectTypeOf<FileDefinition>().toBeObject()
  })
  test('FileDefinition', () => {
    expectTypeOf<FileDefinition>().toBeObject()
  })
  test('FileOptions', () => {
    expectTypeOf<FileOptions>().toBeObject()
  })
  test('FileRule', () => {
    expectTypeOf<FileRule>().toBeObject()
  })
  test('FileSchemaType', () => {
    expectTypeOf<FileSchemaType>().toBeObject()
  })
  test('FileValue', () => {
    expectTypeOf<FileValue>().toBeObject()
  })
  test('FormNodeValidation', () => {
    expectTypeOf<FormNodeValidation>().toBeObject()
  })
  test('GeopointDefinition', () => {
    expectTypeOf<GeopointDefinition>().toBeObject()
  })
  test('GeopointDefinition', () => {
    expectTypeOf<GeopointDefinition>().toBeObject()
  })
  test('GeopointDefinition', () => {
    expectTypeOf<GeopointDefinition>().toBeObject()
  })
  test('GeopointDefinition', () => {
    expectTypeOf<GeopointDefinition>().toBeObject()
  })
  test('GeopointOptions', () => {
    expectTypeOf<GeopointOptions>().toBeObject()
  })
  test('GeopointRule', () => {
    expectTypeOf<GeopointRule>().toBeObject()
  })
  test('GeopointValue', () => {
    expectTypeOf<GeopointValue>().toBeObject()
  })
  test('GlobalDocumentReferenceDefinition', () => {
    expectTypeOf<GlobalDocumentReferenceDefinition>().toBeObject()
  })
  test('GlobalDocumentReferenceFilterResolver', () => {
    expectTypeOf<GlobalDocumentReferenceFilterResolver>().not.toBeNever()
  })
  test('GlobalDocumentReferenceFilterSearchOptions', () => {
    expectTypeOf<GlobalDocumentReferenceFilterSearchOptions>().not.toBeNever()
  })
  test('GlobalDocumentReferenceSchemaType', () => {
    expectTypeOf<GlobalDocumentReferenceSchemaType>().toBeObject()
  })
  test('GlobalDocumentReferenceType', () => {
    expectTypeOf<GlobalDocumentReferenceType>().toBeObject()
  })
  test('GlobalDocumentReferenceValue', () => {
    expectTypeOf<GlobalDocumentReferenceValue>().toBeObject()
  })
  test('HotspotOptions', () => {
    expectTypeOf<HotspotOptions>().toBeObject()
  })
  test('HotspotPreview', () => {
    expectTypeOf<HotspotPreview>().toBeObject()
  })
  test('I18nTextRecord', () => {
    expectTypeOf<I18nTextRecord<any>>().not.toBeNever()
  })
  test('I18nTitledListValue', () => {
    expectTypeOf<I18nTitledListValue<any>>().toBeObject()
  })
  test('Image', () => {
    expectTypeOf<Image>().toBeObject()
  })
  test('ImageAsset', () => {
    expectTypeOf<ImageAsset>().toBeObject()
  })
  test('ImageCrop', () => {
    expectTypeOf<ImageCrop>().toBeObject()
  })
  test('ImageDefinition', () => {
    expectTypeOf<ImageDefinition>().toBeObject()
  })
  test('ImageDefinition', () => {
    expectTypeOf<ImageDefinition>().toBeObject()
  })
  test('ImageDefinition', () => {
    expectTypeOf<ImageDefinition>().toBeObject()
  })
  test('ImageDefinition', () => {
    expectTypeOf<ImageDefinition>().toBeObject()
  })
  test('ImageDimensions', () => {
    expectTypeOf<ImageDimensions>().toBeObject()
  })
  test('ImageHotspot', () => {
    expectTypeOf<ImageHotspot>().toBeObject()
  })
  test('ImageMetadata', () => {
    expectTypeOf<ImageMetadata>().toBeObject()
  })
  test('ImageMetadataType', () => {
    expectTypeOf<ImageMetadataType>().not.toBeNever()
  })
  test('ImageOptions', () => {
    expectTypeOf<ImageOptions>().toBeObject()
  })
  test('ImagePalette', () => {
    expectTypeOf<ImagePalette>().toBeObject()
  })
  test('ImageRule', () => {
    expectTypeOf<ImageRule>().toBeObject()
  })
  test('ImageSchemaType', () => {
    expectTypeOf<ImageSchemaType>().toBeObject()
  })
  test('ImageSwatch', () => {
    expectTypeOf<ImageSwatch>().toBeObject()
  })
  test('ImageUrlAutoMode', () => {
    expectTypeOf<ImageUrlAutoMode>().not.toBeNever()
  })
  test('ImageUrlCropMode', () => {
    expectTypeOf<ImageUrlCropMode>().not.toBeNever()
  })
  test('ImageUrlFitMode', () => {
    expectTypeOf<ImageUrlFitMode>().not.toBeNever()
  })
  test('ImageUrlFormat', () => {
    expectTypeOf<ImageUrlFormat>().not.toBeNever()
  })
  test('ImageUrlOrientation', () => {
    expectTypeOf<ImageUrlOrientation>().not.toBeNever()
  })
  test('ImageUrlParams', () => {
    expectTypeOf<ImageUrlParams>().toBeObject()
  })
  test('ImageValue', () => {
    expectTypeOf<ImageValue>().toBeObject()
  })
  test('IndexTuple', () => {
    expectTypeOf<IndexTuple>().not.toBeNever()
  })
  test('InitialValueProperty', () => {
    expectTypeOf<InitialValueProperty<any, any>>().not.toBeNever()
  })
  test('InitialValueResolver', () => {
    expectTypeOf<InitialValueResolver<any, any>>().not.toBeNever()
  })
  test('InitialValueResolverContext', () => {
    expectTypeOf<InitialValueResolverContext>().toBeObject()
  })
  test('InlineFieldDefinition', () => {
    expectTypeOf<InlineFieldDefinition>().not.toBeNever()
  })
  test('InsertMenuOptions', () => {
    expectTypeOf<InsertMenuOptions>().toBeObject()
  })
  test('InsertPatch', () => {
    expectTypeOf<InsertPatch>().not.toBeNever()
  })
  test('IntrinsicArrayOfBase', () => {
    expectTypeOf<IntrinsicArrayOfBase>().not.toBeNever()
  })
  test('IntrinsicArrayOfDefinition', () => {
    expectTypeOf<IntrinsicArrayOfDefinition>().not.toBeNever()
  })
  test('IntrinsicBase', () => {
    expectTypeOf<IntrinsicBase>().not.toBeNever()
  })
  test('IntrinsicDefinitions', () => {
    expectTypeOf<IntrinsicDefinitions>().toBeObject()
  })
  test('IntrinsicTypeName', () => {
    expectTypeOf<IntrinsicTypeName>().not.toBeNever()
  })
  test('KeyedObject', () => {
    expectTypeOf<KeyedObject>().toBeObject()
  })
  test('KeyedSegment', () => {
    expectTypeOf<KeyedSegment>().not.toBeNever()
  })
  test('LocalizedValidationMessages', () => {
    expectTypeOf<LocalizedValidationMessages>().toBeObject()
  })
  test('MaybeAllowUnknownProps', () => {
    expectTypeOf<MaybeAllowUnknownProps<any>>().not.toBeNever()
  })
  test('MaybePreview', () => {
    expectTypeOf<MaybePreview<any, any>>().not.toBeNever()
  })
  test('MEDIA_LIBRARY_ASSET_ASPECT_TYPE_NAME', () => {
    expectTypeOf<typeof MEDIA_LIBRARY_ASSET_ASPECT_TYPE_NAME>().not.toBeNever()
  })
  test('MediaAssetTypes', () => {
    expectTypeOf<MediaAssetTypes>().not.toBeNever()
  })
  test('MediaLibraryAssetAspectDefinition', () => {
    expectTypeOf<MediaLibraryAssetAspectDefinition>().not.toBeNever()
  })
  test('MediaLibraryAssetAspectDocument', () => {
    expectTypeOf<MediaLibraryAssetAspectDocument>().toBeObject()
  })
  test('MediaLibraryAssetAspectSupportedFieldDefinitions', () => {
    expectTypeOf<MediaLibraryAssetAspectSupportedFieldDefinitions>().not.toBeNever()
  })
  test('MediaLibraryAssetAspectTypeName', () => {
    expectTypeOf<MediaLibraryAssetAspectTypeName>().not.toBeNever()
  })
  test('MediaLibraryAssetType', () => {
    expectTypeOf<MediaLibraryAssetType>().not.toBeNever()
  })
  test('MediaValidationValue', () => {
    expectTypeOf<MediaValidationValue<any>>().toBeObject()
  })
  test('MediaValidator', () => {
    expectTypeOf<MediaValidator<any>>().toBeObject()
  })
  test('MendozaEffectPair', () => {
    expectTypeOf<MendozaEffectPair>().toBeObject()
  })
  test('MendozaPatch', () => {
    expectTypeOf<MendozaPatch>().not.toBeNever()
  })
  test('MultiFieldSet', () => {
    expectTypeOf<MultiFieldSet>().toBeObject()
  })
  test('MultipleMutationResult', () => {
    expectTypeOf<MultipleMutationResult>().toBeObject()
  })
  test('Mutation', () => {
    expectTypeOf<Mutation>().not.toBeNever()
  })
  test('MutationOperationName', () => {
    expectTypeOf<MutationOperationName>().not.toBeNever()
  })
  test('MutationSelection', () => {
    expectTypeOf<MutationSelection>().not.toBeNever()
  })
  test('NarrowPreview', () => {
    expectTypeOf<NarrowPreview<any, any, any, any>>().not.toBeNever()
  })
  test('NumberDefinition', () => {
    expectTypeOf<NumberDefinition>().toBeObject()
  })
  test('NumberDefinition', () => {
    expectTypeOf<NumberDefinition>().toBeObject()
  })
  test('NumberDefinition', () => {
    expectTypeOf<NumberDefinition>().toBeObject()
  })
  test('NumberDefinition', () => {
    expectTypeOf<NumberDefinition>().toBeObject()
  })
  test('NumberOptions', () => {
    expectTypeOf<NumberOptions>().toBeObject()
  })
  test('NumberRule', () => {
    expectTypeOf<NumberRule>().toBeObject()
  })
  test('NumberSchemaType', () => {
    expectTypeOf<NumberSchemaType>().toBeObject()
  })
  test('ObjectDefinition', () => {
    expectTypeOf<ObjectDefinition>().toBeObject()
  })
  test('ObjectDefinition', () => {
    expectTypeOf<ObjectDefinition>().toBeObject()
  })
  test('ObjectDefinition', () => {
    expectTypeOf<ObjectDefinition>().toBeObject()
  })
  test('ObjectDefinition', () => {
    expectTypeOf<ObjectDefinition>().toBeObject()
  })
  test('ObjectField', () => {
    expectTypeOf<ObjectField<any>>().toBeObject()
  })
  test('ObjectFieldType', () => {
    expectTypeOf<ObjectFieldType<any>>().not.toBeNever()
  })
  test('ObjectOptions', () => {
    expectTypeOf<ObjectOptions>().toBeObject()
  })
  test('ObjectRule', () => {
    expectTypeOf<ObjectRule>().toBeObject()
  })
  test('ObjectSchemaType', () => {
    expectTypeOf<ObjectSchemaType>().toBeObject()
  })
  test('ObjectSchemaTypeWithOptions', () => {
    expectTypeOf<ObjectSchemaTypeWithOptions>().toBeObject()
  })
  test('PatchMutation', () => {
    expectTypeOf<PatchMutation>().toBeObject()
  })
  test('PatchMutationOperation', () => {
    expectTypeOf<PatchMutationOperation>().not.toBeNever()
  })
  test('PatchOperations', () => {
    expectTypeOf<PatchOperations>().toBeObject()
  })
  test('Path', () => {
    expectTypeOf<Path>().not.toBeNever()
  })
  test('PathSegment', () => {
    expectTypeOf<PathSegment>().not.toBeNever()
  })
  test('PortableTextBlock', () => {
    expectTypeOf<PortableTextBlock>().not.toBeNever()
  })
  test('PortableTextChild', () => {
    expectTypeOf<PortableTextChild>().not.toBeNever()
  })
  test('PortableTextListBlock', () => {
    expectTypeOf<PortableTextListBlock>().toBeObject()
  })
  test('PortableTextObject', () => {
    expectTypeOf<PortableTextObject>().toBeObject()
  })
  test('PortableTextSpan', () => {
    expectTypeOf<PortableTextSpan>().toBeObject()
  })
  test('PortableTextTextBlock', () => {
    expectTypeOf<PortableTextTextBlock<any>>().toBeObject()
  })
  test('PrepareViewOptions', () => {
    expectTypeOf<PrepareViewOptions>().toBeObject()
  })
  test('PreviewConfig', () => {
    expectTypeOf<PreviewConfig<any, any>>().toBeObject()
  })
  test('PreviewValue', () => {
    expectTypeOf<PreviewValue>().toBeObject()
  })
  test('Reference', () => {
    expectTypeOf<Reference>().toBeObject()
  })
  test('ReferenceBaseOptions', () => {
    expectTypeOf<ReferenceBaseOptions>().toBeObject()
  })
  test('ReferenceDefinition', () => {
    expectTypeOf<ReferenceDefinition>().toBeObject()
  })
  test('ReferenceDefinition', () => {
    expectTypeOf<ReferenceDefinition>().toBeObject()
  })
  test('ReferenceDefinition', () => {
    expectTypeOf<ReferenceDefinition>().toBeObject()
  })
  test('ReferenceDefinition', () => {
    expectTypeOf<ReferenceDefinition>().toBeObject()
  })
  test('ReferenceFilterOptions', () => {
    expectTypeOf<ReferenceFilterOptions>().not.toBeNever()
  })
  test('ReferenceFilterQueryOptions', () => {
    expectTypeOf<ReferenceFilterQueryOptions>().toBeObject()
  })
  test('ReferenceFilterResolver', () => {
    expectTypeOf<ReferenceFilterResolver>().not.toBeNever()
  })
  test('ReferenceFilterResolverContext', () => {
    expectTypeOf<ReferenceFilterResolverContext>().toBeObject()
  })
  test('ReferenceFilterResolverOptions', () => {
    expectTypeOf<ReferenceFilterResolverOptions>().toBeObject()
  })
  test('ReferenceFilterSearchOptions', () => {
    expectTypeOf<ReferenceFilterSearchOptions>().not.toBeNever()
  })
  test('ReferenceOptions', () => {
    expectTypeOf<ReferenceOptions>().not.toBeNever()
  })
  test('ReferenceRule', () => {
    expectTypeOf<ReferenceRule>().toBeObject()
  })
  test('ReferenceSchemaType', () => {
    expectTypeOf<ReferenceSchemaType>().toBeObject()
  })
  test('ReferenceTo', () => {
    expectTypeOf<ReferenceTo>().not.toBeNever()
  })
  test('ReferenceValue', () => {
    expectTypeOf<ReferenceValue>().not.toBeNever()
  })
  test('Role', () => {
    expectTypeOf<Role>().toBeObject()
  })
  test('Rule', () => {
    expectTypeOf<Rule>().toBeObject()
  })
  test('RuleBuilder', () => {
    expectTypeOf<RuleBuilder<any, any>>().not.toBeNever()
  })
  test('RuleClass', () => {
    expectTypeOf<RuleClass>().toBeObject()
  })
  test('RuleDef', () => {
    expectTypeOf<RuleDef<any, any>>().toBeObject()
  })
  test('RuleSpec', () => {
    expectTypeOf<RuleSpec>().not.toBeNever()
  })
  test('RuleSpecConstraint', () => {
    expectTypeOf<RuleSpecConstraint<any>>().not.toBeNever()
  })
  test('RuleTypeConstraint', () => {
    expectTypeOf<RuleTypeConstraint>().not.toBeNever()
  })
  test('SanityCreateOptions', () => {
    expectTypeOf<SanityCreateOptions>().toBeObject()
  })
  test('SanityDocument', () => {
    expectTypeOf<SanityDocument>().toBeObject()
  })
  test('SanityDocumentLike', () => {
    expectTypeOf<SanityDocumentLike>().toBeObject()
  })
  test('Schema', () => {
    expectTypeOf<Schema>().toBeObject()
  })
  test('SchemaType', () => {
    expectTypeOf<SchemaType>().not.toBeNever()
  })
  test('SchemaTypeDefinition', () => {
    expectTypeOf<SchemaTypeDefinition<any>>().not.toBeNever()
  })
  test('SchemaValidationError', () => {
    expectTypeOf<SchemaValidationError>().toBeObject()
  })
  test('SchemaValidationProblem', () => {
    expectTypeOf<SchemaValidationProblem>().not.toBeNever()
  })
  test('SchemaValidationProblemGroup', () => {
    expectTypeOf<SchemaValidationProblemGroup>().toBeObject()
  })
  test('SchemaValidationProblemPath', () => {
    expectTypeOf<SchemaValidationProblemPath>().not.toBeNever()
  })
  test('SchemaValidationValue', () => {
    expectTypeOf<SchemaValidationValue>().not.toBeNever()
  })
  test('SchemaValidationWarning', () => {
    expectTypeOf<SchemaValidationWarning>().toBeObject()
  })
  test('SearchConfiguration', () => {
    expectTypeOf<SearchConfiguration>().toBeObject()
  })
  test('searchStrategies', () => {
    expectTypeOf<typeof searchStrategies>().not.toBeNever()
  })
  test('SearchStrategy', () => {
    expectTypeOf<SearchStrategy>().not.toBeNever()
  })
  test('SingleFieldSet', () => {
    expectTypeOf<SingleFieldSet>().toBeObject()
  })
  test('SingleMutationResult', () => {
    expectTypeOf<SingleMutationResult>().toBeObject()
  })
  test('Slug', () => {
    expectTypeOf<Slug>().toBeObject()
  })
  test('SlugDefinition', () => {
    expectTypeOf<SlugDefinition>().toBeObject()
  })
  test('SlugDefinition', () => {
    expectTypeOf<SlugDefinition>().toBeObject()
  })
  test('SlugDefinition', () => {
    expectTypeOf<SlugDefinition>().toBeObject()
  })
  test('SlugDefinition', () => {
    expectTypeOf<SlugDefinition>().toBeObject()
  })
  test('SlugifierFn', () => {
    expectTypeOf<SlugifierFn>().not.toBeNever()
  })
  test('SlugIsUniqueValidator', () => {
    expectTypeOf<SlugIsUniqueValidator>().not.toBeNever()
  })
  test('SlugOptions', () => {
    expectTypeOf<SlugOptions>().toBeObject()
  })
  test('SlugParent', () => {
    expectTypeOf<SlugParent>().not.toBeNever()
  })
  test('SlugRule', () => {
    expectTypeOf<SlugRule>().toBeObject()
  })
  test('SlugSchemaType', () => {
    expectTypeOf<SlugSchemaType>().toBeObject()
  })
  test('SlugSourceContext', () => {
    expectTypeOf<SlugSourceContext>().toBeObject()
  })
  test('SlugSourceFn', () => {
    expectTypeOf<SlugSourceFn>().not.toBeNever()
  })
  test('SlugValidationContext', () => {
    expectTypeOf<SlugValidationContext>().toBeObject()
  })
  test('SlugValue', () => {
    expectTypeOf<SlugValue>().toBeObject()
  })
  test('SortOrdering', () => {
    expectTypeOf<SortOrdering>().not.toBeNever()
  })
  test('SortOrderingItem', () => {
    expectTypeOf<SortOrderingItem>().toBeObject()
  })
  test('SpanMarksObjectField', () => {
    expectTypeOf<SpanMarksObjectField>().not.toBeNever()
  })
  test('SpanSchemaType', () => {
    expectTypeOf<SpanSchemaType>().toBeObject()
  })
  test('SpanTextObjectField', () => {
    expectTypeOf<SpanTextObjectField>().not.toBeNever()
  })
  test('StrictDefinition', () => {
    expectTypeOf<StrictDefinition>().not.toBeNever()
  })
  test('StringDefinition', () => {
    expectTypeOf<StringDefinition>().toBeObject()
  })
  test('StringDefinition', () => {
    expectTypeOf<StringDefinition>().toBeObject()
  })
  test('StringDefinition', () => {
    expectTypeOf<StringDefinition>().toBeObject()
  })
  test('StringDefinition', () => {
    expectTypeOf<StringDefinition>().toBeObject()
  })
  test('StringOptions', () => {
    expectTypeOf<StringOptions>().toBeObject()
  })
  test('StringRule', () => {
    expectTypeOf<StringRule>().toBeObject()
  })
  test('StringSchemaType', () => {
    expectTypeOf<StringSchemaType>().toBeObject()
  })
  test('SwatchName', () => {
    expectTypeOf<SwatchName>().not.toBeNever()
  })
  test('TextDefinition', () => {
    expectTypeOf<TextDefinition>().toBeObject()
  })
  test('TextDefinition', () => {
    expectTypeOf<TextDefinition>().toBeObject()
  })
  test('TextDefinition', () => {
    expectTypeOf<TextDefinition>().toBeObject()
  })
  test('TextDefinition', () => {
    expectTypeOf<TextDefinition>().toBeObject()
  })
  test('TextOptions', () => {
    expectTypeOf<TextOptions>().toBeObject()
  })
  test('TextRule', () => {
    expectTypeOf<TextRule>().toBeObject()
  })
  test('TextSchemaType', () => {
    expectTypeOf<TextSchemaType>().toBeObject()
  })
  test('TitledListValue', () => {
    expectTypeOf<TitledListValue<any>>().toBeObject()
  })
  test('TransactionLogEvent', () => {
    expectTypeOf<TransactionLogEvent>().toBeObject()
  })
  test('TransactionLogEventWithEffects', () => {
    expectTypeOf<TransactionLogEventWithEffects>().toBeObject()
  })
  test('TransactionLogEventWithMutations', () => {
    expectTypeOf<TransactionLogEventWithMutations>().toBeObject()
  })
  test('TransactionLogMutation', () => {
    expectTypeOf<TransactionLogMutation>().not.toBeNever()
  })
  test('TypeAliasDefinition', () => {
    expectTypeOf<TypeAliasDefinition<any, any>>().toBeObject()
  })
  test('TypedObject', () => {
    expectTypeOf<TypedObject>().toBeObject()
  })
  test('TypeReference', () => {
    expectTypeOf<TypeReference>().toBeObject()
  })
  test('UploadState', () => {
    expectTypeOf<UploadState>().toBeObject()
  })
  test('UriValidationOptions', () => {
    expectTypeOf<UriValidationOptions>().toBeObject()
  })
  test('UrlDefinition', () => {
    expectTypeOf<UrlDefinition>().toBeObject()
  })
  test('UrlDefinition', () => {
    expectTypeOf<UrlDefinition>().toBeObject()
  })
  test('UrlDefinition', () => {
    expectTypeOf<UrlDefinition>().toBeObject()
  })
  test('UrlDefinition', () => {
    expectTypeOf<UrlDefinition>().toBeObject()
  })
  test('UrlOptions', () => {
    expectTypeOf<UrlOptions>().toBeObject()
  })
  test('UrlRule', () => {
    expectTypeOf<UrlRule>().toBeObject()
  })
  test('User', () => {
    expectTypeOf<User>().toBeObject()
  })
  test('ValidationBuilder', () => {
    expectTypeOf<ValidationBuilder<any, any>>().not.toBeNever()
  })
  test('ValidationContext', () => {
    expectTypeOf<ValidationContext>().toBeObject()
  })
  test('ValidationContext', () => {
    expectTypeOf<ValidationContext>().toBeObject()
  })
  test('ValidationContext', () => {
    expectTypeOf<ValidationContext>().toBeObject()
  })
  test('ValidationContext', () => {
    expectTypeOf<ValidationContext>().toBeObject()
  })
  test('ValidationError', () => {
    expectTypeOf<ValidationError>().toBeObject()
  })
  test('ValidationErrorClass', () => {
    expectTypeOf<ValidationErrorClass>().toBeObject()
  })
  test('ValidationErrorOptions', () => {
    expectTypeOf<ValidationErrorOptions>().toBeObject()
  })
  test('ValidationMarker', () => {
    expectTypeOf<ValidationMarker>().toBeObject()
  })
  test('Validator', () => {
    expectTypeOf<Validator<any, any>>().not.toBeNever()
  })
  test('Validators', () => {
    expectTypeOf<Validators>().not.toBeNever()
  })
  test('WeakCrossDatasetReferenceValue', () => {
    expectTypeOf<WeakCrossDatasetReferenceValue>().toBeObject()
  })
  test('WeakGlobalDocumentReferenceValue', () => {
    expectTypeOf<WeakGlobalDocumentReferenceValue>().toBeObject()
  })
  test('WeakReference', () => {
    expectTypeOf<WeakReference>().toBeObject()
  })
  test('WidenInitialValue', () => {
    expectTypeOf<WidenInitialValue>().toBeObject()
  })
  test('WidenValidation', () => {
    expectTypeOf<WidenValidation>().toBeObject()
  })
  test('ArrayOfObjectsComponents', () => {
    expectTypeOf<ArrayOfObjectsComponents>().toBeObject()
  })
  test('ArrayOfObjectsComponents', () => {
    expectTypeOf<ArrayOfObjectsComponents>().toBeObject()
  })
  test('ArrayOfObjectsComponents', () => {
    expectTypeOf<ArrayOfObjectsComponents>().toBeObject()
  })
  test('ArrayOfPrimitivesComponents', () => {
    expectTypeOf<ArrayOfPrimitivesComponents>().toBeObject()
  })
  test('ArrayOfPrimitivesComponents', () => {
    expectTypeOf<ArrayOfPrimitivesComponents>().toBeObject()
  })
  test('ArrayOfPrimitivesComponents', () => {
    expectTypeOf<ArrayOfPrimitivesComponents>().toBeObject()
  })
  test('BooleanComponents', () => {
    expectTypeOf<BooleanComponents>().toBeObject()
  })
  test('BooleanComponents', () => {
    expectTypeOf<BooleanComponents>().toBeObject()
  })
  test('BooleanComponents', () => {
    expectTypeOf<BooleanComponents>().toBeObject()
  })
  test('DateComponents', () => {
    expectTypeOf<DateComponents>().toBeObject()
  })
  test('DateComponents', () => {
    expectTypeOf<DateComponents>().toBeObject()
  })
  test('DateComponents', () => {
    expectTypeOf<DateComponents>().toBeObject()
  })
  test('DatetimeComponents', () => {
    expectTypeOf<DatetimeComponents>().toBeObject()
  })
  test('DatetimeComponents', () => {
    expectTypeOf<DatetimeComponents>().toBeObject()
  })
  test('DatetimeComponents', () => {
    expectTypeOf<DatetimeComponents>().toBeObject()
  })
  test('DocumentComponents', () => {
    expectTypeOf<DocumentComponents>().toBeObject()
  })
  test('DocumentComponents', () => {
    expectTypeOf<DocumentComponents>().toBeObject()
  })
  test('DocumentComponents', () => {
    expectTypeOf<DocumentComponents>().toBeObject()
  })
  test('FileComponents', () => {
    expectTypeOf<FileComponents>().toBeObject()
  })
  test('FileComponents', () => {
    expectTypeOf<FileComponents>().toBeObject()
  })
  test('FileComponents', () => {
    expectTypeOf<FileComponents>().toBeObject()
  })
  test('GeopointComponents', () => {
    expectTypeOf<GeopointComponents>().toBeObject()
  })
  test('GeopointComponents', () => {
    expectTypeOf<GeopointComponents>().toBeObject()
  })
  test('GeopointComponents', () => {
    expectTypeOf<GeopointComponents>().toBeObject()
  })
  test('ImageComponents', () => {
    expectTypeOf<ImageComponents>().toBeObject()
  })
  test('ImageComponents', () => {
    expectTypeOf<ImageComponents>().toBeObject()
  })
  test('ImageComponents', () => {
    expectTypeOf<ImageComponents>().toBeObject()
  })
  test('NumberComponents', () => {
    expectTypeOf<NumberComponents>().toBeObject()
  })
  test('NumberComponents', () => {
    expectTypeOf<NumberComponents>().toBeObject()
  })
  test('NumberComponents', () => {
    expectTypeOf<NumberComponents>().toBeObject()
  })
  test('ObjectComponents', () => {
    expectTypeOf<ObjectComponents>().toBeObject()
  })
  test('ObjectComponents', () => {
    expectTypeOf<ObjectComponents>().toBeObject()
  })
  test('ObjectComponents', () => {
    expectTypeOf<ObjectComponents>().toBeObject()
  })
  test('ReferenceComponents', () => {
    expectTypeOf<ReferenceComponents>().toBeObject()
  })
  test('ReferenceComponents', () => {
    expectTypeOf<ReferenceComponents>().toBeObject()
  })
  test('ReferenceComponents', () => {
    expectTypeOf<ReferenceComponents>().toBeObject()
  })
  test('CrossDatasetReferenceComponents', () => {
    expectTypeOf<CrossDatasetReferenceComponents>().toBeObject()
  })
  test('CrossDatasetReferenceComponents', () => {
    expectTypeOf<CrossDatasetReferenceComponents>().toBeObject()
  })
  test('CrossDatasetReferenceComponents', () => {
    expectTypeOf<CrossDatasetReferenceComponents>().toBeObject()
  })
  test('SlugComponents', () => {
    expectTypeOf<SlugComponents>().toBeObject()
  })
  test('SlugComponents', () => {
    expectTypeOf<SlugComponents>().toBeObject()
  })
  test('SlugComponents', () => {
    expectTypeOf<SlugComponents>().toBeObject()
  })
  test('SpanComponents', () => {
    expectTypeOf<SpanComponents>().toBeObject()
  })
  test('SpanComponents', () => {
    expectTypeOf<SpanComponents>().toBeObject()
  })
  test('SpanComponents', () => {
    expectTypeOf<SpanComponents>().toBeObject()
  })
  test('StringComponents', () => {
    expectTypeOf<StringComponents>().toBeObject()
  })
  test('StringComponents', () => {
    expectTypeOf<StringComponents>().toBeObject()
  })
  test('StringComponents', () => {
    expectTypeOf<StringComponents>().toBeObject()
  })
  test('TextComponents', () => {
    expectTypeOf<TextComponents>().toBeObject()
  })
  test('TextComponents', () => {
    expectTypeOf<TextComponents>().toBeObject()
  })
  test('TextComponents', () => {
    expectTypeOf<TextComponents>().toBeObject()
  })
  test('UrlComponents', () => {
    expectTypeOf<UrlComponents>().toBeObject()
  })
  test('UrlComponents', () => {
    expectTypeOf<UrlComponents>().toBeObject()
  })
  test('UrlComponents', () => {
    expectTypeOf<UrlComponents>().toBeObject()
  })
  test('EmailComponents', () => {
    expectTypeOf<EmailComponents>().toBeObject()
  })
  test('EmailComponents', () => {
    expectTypeOf<EmailComponents>().toBeObject()
  })
  test('EmailComponents', () => {
    expectTypeOf<EmailComponents>().toBeObject()
  })
  test('SpanDefinition', () => {
    expectTypeOf<SpanDefinition>().toBeObject()
  })
  test('SpanDefinition', () => {
    expectTypeOf<SpanDefinition>().toBeObject()
  })
  test('SpanDefinition', () => {
    expectTypeOf<SpanDefinition>().toBeObject()
  })
})
