// Auto-generated by running `pnpm generate:dts-exports`
import type {
  append,
  at,
  collectMigrationMutations,
  create,
  createIfNotExists,
  createOrReplace,
  decodeText,
  defineMigration,
  delay,
  delete_,
  dryRun,
  filter,
  fromDocuments,
  fromExportArchive,
  fromExportEndpoint,
  insert,
  insertBefore,
  map,
  parse,
  parseJSON,
  patch,
  prepend,
  replace,
  run,
  split,
  stringify,
  stringifyJSON,
  take,
  toArray,
  toFetchOptionsIterable,
  transaction,
  truncate,
  AnyOp,
  APIConfig,
  ArrayOp,
  AsyncIterableMigration,
  CreateIfNotExistsMutation,
  CreateMutation,
  CreateOrReplaceMutation,
  dec,
  DecOp,
  DEFAULT_MUTATION_CONCURRENCY,
  del,
  DeleteMutation,
  diffMatchPatch,
  DiffMatchPatchOp,
  DocumentMigrationReturnValue,
  ExportAPIConfig,
  inc,
  IncOp,
  IndexedSegment,
  insertAfter,
  InsertOp,
  JsonArray,
  JsonObject,
  JSONOptions,
  JSONParser,
  JsonPrimitive,
  JsonValue,
  KeyedSegment,
  MAX_MUTATION_CONCURRENCY,
  MigrateDefinition,
  Migration,
  MigrationContext,
  MigrationProgress,
  MigrationRunnerConfig,
  Mutation,
  NodeMigration,
  NodeMigrationReturnValue,
  NodePatch,
  NodePatchList,
  NumberOp,
  Operation,
  PatchMutation,
  PatchOptions,
  Path,
  PrimitiveOp,
  RelativePosition,
  ReplaceOp,
  safeJsonParser,
  SanityDocument,
  set,
  setIfMissing,
  SetIfMissingOp,
  SetOp,
  StringOp,
  Transaction,
  TruncateOp,
  unset,
  UnsetOp,
} from 'sanity/migrate'
import {describe, expectTypeOf, test} from 'vitest'

describe('sanity/migrate', () => {
  test('append', () => {
    expectTypeOf<typeof append>().toBeFunction()
  })
  test('at', () => {
    expectTypeOf<typeof at>().toBeFunction()
  })
  test('collectMigrationMutations', () => {
    expectTypeOf<typeof collectMigrationMutations>().toBeFunction()
  })
  test('create', () => {
    expectTypeOf<typeof create>().toBeFunction()
  })
  test('createIfNotExists', () => {
    expectTypeOf<typeof createIfNotExists>().toBeFunction()
  })
  test('createOrReplace', () => {
    expectTypeOf<typeof createOrReplace>().toBeFunction()
  })
  test('decodeText', () => {
    expectTypeOf<typeof decodeText>().toBeFunction()
  })
  test('defineMigration', () => {
    expectTypeOf<typeof defineMigration>().toBeFunction()
  })
  test('delay', () => {
    expectTypeOf<typeof delay>().toBeFunction()
  })
  test('delete_', () => {
    expectTypeOf<typeof delete_>().toBeFunction()
  })
  test('dryRun', () => {
    expectTypeOf<typeof dryRun>().toBeFunction()
  })
  test('filter', () => {
    expectTypeOf<typeof filter>().toBeFunction()
  })
  test('fromDocuments', () => {
    expectTypeOf<typeof fromDocuments>().toBeFunction()
  })
  test('fromExportArchive', () => {
    expectTypeOf<typeof fromExportArchive>().toBeFunction()
  })
  test('fromExportEndpoint', () => {
    expectTypeOf<typeof fromExportEndpoint>().toBeFunction()
  })
  test('insert', () => {
    expectTypeOf<typeof insert>().toBeFunction()
  })
  test('insertBefore', () => {
    expectTypeOf<typeof insertBefore>().toBeFunction()
  })
  test('map', () => {
    expectTypeOf<typeof map>().toBeFunction()
  })
  test('parse', () => {
    expectTypeOf<typeof parse>().toBeFunction()
  })
  test('parseJSON', () => {
    expectTypeOf<typeof parseJSON>().toBeFunction()
  })
  test('patch', () => {
    expectTypeOf<typeof patch>().toBeFunction()
  })
  test('prepend', () => {
    expectTypeOf<typeof prepend>().toBeFunction()
  })
  test('replace', () => {
    expectTypeOf<typeof replace>().toBeFunction()
  })
  test('run', () => {
    expectTypeOf<typeof run>().toBeFunction()
  })
  test('split', () => {
    expectTypeOf<typeof split>().toBeFunction()
  })
  test('stringify', () => {
    expectTypeOf<typeof stringify>().toBeFunction()
  })
  test('stringifyJSON', () => {
    expectTypeOf<typeof stringifyJSON>().toBeFunction()
  })
  test('take', () => {
    expectTypeOf<typeof take>().toBeFunction()
  })
  test('toArray', () => {
    expectTypeOf<typeof toArray>().toBeFunction()
  })
  test('toFetchOptionsIterable', () => {
    expectTypeOf<typeof toFetchOptionsIterable>().toBeFunction()
  })
  test('transaction', () => {
    expectTypeOf<typeof transaction>().toBeFunction()
  })
  test('transaction', () => {
    expectTypeOf<typeof transaction>().toBeFunction()
  })
  test('truncate', () => {
    expectTypeOf<typeof truncate>().toBeFunction()
  })
  test('AnyOp', () => {
    expectTypeOf<AnyOp>().not.toBeNever()
  })
  test('APIConfig', () => {
    expectTypeOf<APIConfig>().toBeObject()
  })
  test('ArrayOp', () => {
    expectTypeOf<ArrayOp>().not.toBeNever()
  })
  test('AsyncIterableMigration', () => {
    expectTypeOf<AsyncIterableMigration>().not.toBeNever()
  })
  test('CreateIfNotExistsMutation', () => {
    expectTypeOf<CreateIfNotExistsMutation<any>>().not.toBeNever()
  })
  test('CreateMutation', () => {
    expectTypeOf<CreateMutation<any>>().not.toBeNever()
  })
  test('CreateOrReplaceMutation', () => {
    expectTypeOf<CreateOrReplaceMutation<any>>().not.toBeNever()
  })
  test('dec', () => {
    expectTypeOf<typeof dec>().not.toBeNever()
  })
  test('DecOp', () => {
    expectTypeOf<DecOp<any>>().not.toBeNever()
  })
  test('DEFAULT_MUTATION_CONCURRENCY', () => {
    expectTypeOf<typeof DEFAULT_MUTATION_CONCURRENCY>().not.toBeNever()
  })
  test('del', () => {
    expectTypeOf<typeof del>().not.toBeNever()
  })
  test('DeleteMutation', () => {
    expectTypeOf<DeleteMutation>().not.toBeNever()
  })
  test('diffMatchPatch', () => {
    expectTypeOf<typeof diffMatchPatch>().not.toBeNever()
  })
  test('DiffMatchPatchOp', () => {
    expectTypeOf<DiffMatchPatchOp>().not.toBeNever()
  })
  test('DocumentMigrationReturnValue', () => {
    expectTypeOf<DocumentMigrationReturnValue>().not.toBeNever()
  })
  test('ExportAPIConfig', () => {
    expectTypeOf<ExportAPIConfig>().toBeObject()
  })
  test('inc', () => {
    expectTypeOf<typeof inc>().not.toBeNever()
  })
  test('IncOp', () => {
    expectTypeOf<IncOp<any>>().not.toBeNever()
  })
  test('IndexedSegment', () => {
    expectTypeOf<IndexedSegment>().not.toBeNever()
  })
  test('insertAfter', () => {
    expectTypeOf<typeof insertAfter>().not.toBeNever()
  })
  test('InsertOp', () => {
    expectTypeOf<InsertOp<any, any, any>>().not.toBeNever()
  })
  test('JsonArray', () => {
    expectTypeOf<JsonArray>().not.toBeNever()
  })
  test('JsonObject', () => {
    expectTypeOf<JsonObject>().not.toBeNever()
  })
  test('JSONOptions', () => {
    expectTypeOf<JSONOptions<any>>().toBeObject()
  })
  test('JSONParser', () => {
    expectTypeOf<JSONParser<any>>().not.toBeNever()
  })
  test('JsonPrimitive', () => {
    expectTypeOf<JsonPrimitive>().not.toBeNever()
  })
  test('JsonValue', () => {
    expectTypeOf<JsonValue>().not.toBeNever()
  })
  test('KeyedSegment', () => {
    expectTypeOf<KeyedSegment>().not.toBeNever()
  })
  test('MAX_MUTATION_CONCURRENCY', () => {
    expectTypeOf<typeof MAX_MUTATION_CONCURRENCY>().not.toBeNever()
  })
  test('MigrateDefinition', () => {
    expectTypeOf<MigrateDefinition>().not.toBeNever()
  })
  test('Migration', () => {
    expectTypeOf<Migration<any>>().toBeObject()
  })
  test('MigrationContext', () => {
    expectTypeOf<MigrationContext>().toBeObject()
  })
  test('MigrationProgress', () => {
    expectTypeOf<MigrationProgress>().not.toBeNever()
  })
  test('MigrationRunnerConfig', () => {
    expectTypeOf<MigrationRunnerConfig>().toBeObject()
  })
  test('Mutation', () => {
    expectTypeOf<Mutation<any>>().not.toBeNever()
  })
  test('NodeMigration', () => {
    expectTypeOf<NodeMigration>().toBeObject()
  })
  test('NodeMigrationReturnValue', () => {
    expectTypeOf<NodeMigrationReturnValue>().not.toBeNever()
  })
  test('NodePatch', () => {
    expectTypeOf<NodePatch<any, any>>().not.toBeNever()
  })
  test('NodePatchList', () => {
    expectTypeOf<NodePatchList>().not.toBeNever()
  })
  test('NumberOp', () => {
    expectTypeOf<NumberOp>().not.toBeNever()
  })
  test('Operation', () => {
    expectTypeOf<Operation>().not.toBeNever()
  })
  test('PatchMutation', () => {
    expectTypeOf<PatchMutation<any>>().not.toBeNever()
  })
  test('PatchOptions', () => {
    expectTypeOf<PatchOptions>().not.toBeNever()
  })
  test('Path', () => {
    expectTypeOf<Path>().not.toBeNever()
  })
  test('PrimitiveOp', () => {
    expectTypeOf<PrimitiveOp>().not.toBeNever()
  })
  test('RelativePosition', () => {
    expectTypeOf<RelativePosition>().not.toBeNever()
  })
  test('ReplaceOp', () => {
    expectTypeOf<ReplaceOp<any, any>>().not.toBeNever()
  })
  test('safeJsonParser', () => {
    expectTypeOf<typeof safeJsonParser>().not.toBeNever()
  })
  test('SanityDocument', () => {
    expectTypeOf<SanityDocument>().not.toBeNever()
  })
  test('set', () => {
    expectTypeOf<typeof set>().not.toBeNever()
  })
  test('setIfMissing', () => {
    expectTypeOf<typeof setIfMissing>().not.toBeNever()
  })
  test('SetIfMissingOp', () => {
    expectTypeOf<SetIfMissingOp<any>>().not.toBeNever()
  })
  test('SetOp', () => {
    expectTypeOf<SetOp<any>>().not.toBeNever()
  })
  test('StringOp', () => {
    expectTypeOf<StringOp>().not.toBeNever()
  })
  test('Transaction', () => {
    expectTypeOf<Transaction>().toBeObject()
  })
  test('TruncateOp', () => {
    expectTypeOf<TruncateOp>().not.toBeNever()
  })
  test('unset', () => {
    expectTypeOf<typeof unset>().not.toBeNever()
  })
  test('UnsetOp', () => {
    expectTypeOf<UnsetOp>().not.toBeNever()
  })
})
