// Auto-generated by running `pnpm generate:dts-exports`
import type {
  extractSchema,
  groupProblems,
  resolveSearchConfig,
  resolveSearchConfigForBaseFieldPaths,
  validateMediaLibraryAssetAspect,
  validateSchema,
  builtinTypes,
  DEFAULT_MAX_FIELD_DEPTH,
  DescriptorConverter,
  FIXME,
  isActionEnabled,
  ProblemPath,
  ProblemPathPropertySegment,
  ProblemPathSegment,
  ProblemPathTypeSegment,
  Problem,
  ValidationResult,
  TypeWithProblems,
} from '@sanity/schema/_internal'
import {describe, expectTypeOf, test} from 'vitest'

describe('@sanity/schema/_internal', () => {
  test('extractSchema', () => {
    expectTypeOf<typeof extractSchema>().toBeFunction()
  })
  test('groupProblems', () => {
    expectTypeOf<typeof groupProblems>().toBeFunction()
  })
  test('resolveSearchConfig', () => {
    expectTypeOf<typeof resolveSearchConfig>().toBeFunction()
  })
  test('resolveSearchConfigForBaseFieldPaths', () => {
    expectTypeOf<typeof resolveSearchConfigForBaseFieldPaths>().toBeFunction()
  })
  test('validateMediaLibraryAssetAspect', () => {
    expectTypeOf<typeof validateMediaLibraryAssetAspect>().toBeFunction()
  })
  test('validateSchema', () => {
    expectTypeOf<typeof validateSchema>().toBeFunction()
  })
  test('builtinTypes', () => {
    expectTypeOf<typeof builtinTypes>().not.toBeNever()
  })
  test('DEFAULT_MAX_FIELD_DEPTH', () => {
    expectTypeOf<typeof DEFAULT_MAX_FIELD_DEPTH>().not.toBeNever()
  })
  test('DescriptorConverter', () => {
    expectTypeOf<DescriptorConverter>().not.toBeNever()
  })
  test('FIXME', () => {
    expectTypeOf<FIXME>().not.toBeNever()
  })
  test('isActionEnabled', () => {
    expectTypeOf<typeof isActionEnabled>().not.toBeNever()
  })
  test('ProblemPath', () => {
    expectTypeOf<ProblemPath>().not.toBeNever()
  })
  test('ProblemPathPropertySegment', () => {
    expectTypeOf<ProblemPathPropertySegment>().toBeObject()
  })
  test('ProblemPathSegment', () => {
    expectTypeOf<ProblemPathSegment>().not.toBeNever()
  })
  test('ProblemPathTypeSegment', () => {
    expectTypeOf<ProblemPathTypeSegment>().toBeObject()
  })
  test('Problem', () => {
    expectTypeOf<Problem>().toBeObject()
  })
  test('ValidationResult', () => {
    expectTypeOf<ValidationResult>().toBeObject()
  })
  test('TypeWithProblems', () => {
    expectTypeOf<TypeWithProblems>().toBeObject()
  })
})
