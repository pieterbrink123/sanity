import {definePlugin, defineType, type ObjectInputProps, type PluginOptions} from 'sanity'

import {createUsageDocumentDeleteAction, createUsageDocumentPublishAction} from './actions'
import {AssetLibraryAssetInput} from './components/input'
import {assetUsageDocumentBaseDefinition} from './schema/usageDocument'

export const inlineDocumentEditingPlugin = definePlugin<PluginOptions | void>(
  (config): PluginOptions => {
    return {
      name: 'sanity-asset-library-plugin',
      schema: {
        types: [
          // Base definition for the usage document
          // ("base" because it doesn't include the custom fields)
          defineType(assetUsageDocumentBaseDefinition),

          // This type will be generated by the Asset Library plugin helper
          defineType({
            name: 'sanity.asset-library.asset',
            title: 'Asset Library Asset',
            type: 'object',
            fields: [
              {
                name: 'asset',
                type: 'reference',
                to: [{type: 'sanity.asset-library.usage-document'}],
              },
            ],
            components: {
              input: (props: ObjectInputProps) =>
                AssetLibraryAssetInput(props, [
                  {
                    name: 'altText',
                    type: 'string',
                    title: 'Alt text',
                  },
                ]),
            },
          }),

          // This schema type doesn't belong here, but is rather a studio type.
          // It's included here just to make the example work and have a better overview.
          defineType({
            name: 'testInline',
            title: 'Test inline document editing',
            type: 'document',
            fields: [
              {
                name: 'title',
                type: 'string',
              },
              {
                name: 'mainImage',
                type: 'sanity.asset-library.asset',
              },
            ],
          }),
        ],
      },
      document: {
        actions: (prev) =>
          prev.map((originalAction) => {
            switch (originalAction.action) {
              case 'publish':
                return createUsageDocumentPublishAction(originalAction)
              case 'delete':
                return createUsageDocumentDeleteAction(originalAction)
              default:
                return originalAction
            }
          }),
      },
    }
  },
)
